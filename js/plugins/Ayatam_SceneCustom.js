//=============================================================================
// plugin Ayatam_SceneCustom.js
// ■ シーンカスタマイズMV 対応コアver 1.6.3
//
// (C)2022 ayatam
//=============================================================================
//  【更新内容】
//  2022/7/21 v0.02 メインメニューカスタマイズMVから
//                  シーンカスタマイズMVに変更しました。
//                  本来予定していたシーン毎にデザインを変更する機能へ
//                  グレードアップしました。
//                  さらに他プラグイン作者が作成したシーンにも
//                  ウィンドウを追加できるように調整しました。
//  2022/4/3 v0.01 試作完成。
//=============================================================================

var Imported = Imported || {};
Imported.SceneCustom = true;

var Ayatam = Ayatam || {};
Ayatam.SCENECUSTOM = Ayatam.SCENECUSTOM || {};

/*:
 * @target MV
 * @plugindesc シーンカスタマイズMV v0.02b
 * 様々なシーンをカスタマイズする機能を追加
 * @author Ayatam (Another Young Animations)
 * 
 * @help ■ シーンカスタマイズMV
 * 本プラグインは、MV Core ver 1.6.3 に対応。
 * 
 * 【利用規約】
 * ・改造はご自由に行ってください。
 * ・他サイト様の素材との競合によるエラーには基本、対応しません。
 * ・素材単体でのエラーには対応します。ただし、その責任は負いません。
 * ・アダルト・商業可。
 * 
 * 【素材を使用したゲーム等について】
 * ・作者名、サイト名、URLなどをread_meなどに分かりやすい形で記載してください。
 * 
 *   作者名:ayatam
 *   サイト名:Another Young Animations 公式サイト
 *   URL:https://ayatam.wixsite.com/index
 * 
 * =============================================================================
 *  【プラグイン使用方法】
 *  ・本プラグインにはプラグインコマンドはありません。
 *    スクリプトコマンドのみです。
 *  ・他プラグインのシーンにウィンドウを追加する場合は、
 *    対象のプラグインよりも下にシーンカスタマイズMVを
 *    配置してください。
 * 
 *  【仕様】
 *  ・デザインクオリティに特化しているため、高速ボタン連打に耐性がありません。
 *    高速ボタン連打をしなければ問題はありません。
 *    コマンドウィンドウでのマウスホイール操作の負荷が高いため、
 *    無効化しています。
 * 
 *  【本プラグイン専用画像フォルダパス】
 *    img/m_menu/
 *    本プラグインで使用する画像はすべて、
 *    このフォルダにインポートしてください。
 * =============================================================================
 * 
 * =============================================================================
 * 
 *  スクリプトコマンド - 画面系 -
 * 
 * =============================================================================
 * 
 *  ●オリジナルシーンを開く
 *   SceneManager.push(sceneName)
 *   sceneName : シーン名を 
 *               オリジナルシーンの場合は、''(シングルクォート)で囲んで指定。
 *               既存シーンの場合は、''(シングルクォート)で囲まずに指定。
 * 
 *  【例:1】既存シーンのメインメニューを開く際は、
 *          ''(シングルクォート)で囲まずに指定します。
 *          SceneManager.push(Scene_Menu)
 * 
 *  【例:2】オリジナルシーンを開く際は、
 *          ''(シングルクォート)で囲んで指定します。
 *          SceneManager.push('Scene_NewMenu')
 * 
 * =============================================================================
 * 
 * @param sceneCreations
 * @text シーンの作成
 * @type struct<MainMenuDesignSetups>[]
 * @default ["{\"sceneName\":\"Scene_SampleTitle //サンプルタイトルシーン\",\"windowSettings\":\"\",\"windowOrder\":\"[\\\"Window_TitleCommand\\\"]\",\"windowInfo\":\"[\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_TitleCommand\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"command\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateFromBegin\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"ニューゲーム\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ロードゲーム\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"オプション\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ニューゲーム\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":commandNewGame\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ロードゲーム\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Scene_Load //セーブシーン ※直接呼び出すようにできていますので、コマンドの選択方法を直接呼び出しに設定してください。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.isLoadEnabled(); //コマンド参照名が Scene_Load の場合にセーブデータが存在するかを判定します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"オプション\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Scene_Options //オプションシーン ※直接呼び出すようにできていますので、コマンドの選択方法を直接呼び出しに設定してください。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"(Graphics.boxWidth - 240) / 2\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 144 - 96;\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"240\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"144\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\"]\",\"sceneSettings\":\"\",\"sceneCreateList\":\"[\\\"this.mmcCreateTitleBackGround();\\\",\\\"this.mmcCreateGameTitleName();\\\",\\\"this.mmcCreateAllWindows();\\\"]\",\"sceneShortcutSettings\":\"[]\",\"useSlideOutWhenChange\":\"false\",\"useSlideOutWhenAbort\":\"false\",\"eraseSceneBlur\":\"false\",\"sceneBackgroundSettings\":\"{\\\"usePicture\\\":\\\"false\\\",\\\"pictureFile\\\":\\\"\\\",\\\"pictureX\\\":\\\"0\\\",\\\"pictureY\\\":\\\"0\\\",\\\"pictureOpacity\\\":\\\"255\\\",\\\"pictureAnchor\\\":\\\"false\\\"}\"}","{\"sceneName\":\"Scene_SampleMap //サンプルマップシーン\",\"windowSettings\":\"\",\"windowOrder\":\"[\\\"Window_variable1\\\"]\",\"windowInfo\":\"[\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_variable1\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"freeType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"テスト\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",0,0,'left',true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"240\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"240\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\"]\",\"sceneSettings\":\"\",\"sceneCreateList\":\"[\\\"this.mmcCreateAllWindows();\\\"]\",\"sceneShortcutSettings\":\"[\\\"{\\\\\\\"keyboardKey\\\\\\\":\\\\\\\"R\\\\\\\",\\\\\\\"gamePadKey\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"function\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"functionCommandName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"ニューメニュー呼び出し\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionCallType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionCommandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Scene_Menu2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionCommandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionCommandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionTargetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionReturnTargetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"functionCommandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\"}\\\"]\",\"useSlideOutWhenChange\":\"false\",\"useSlideOutWhenAbort\":\"false\",\"eraseSceneBlur\":\"false\",\"sceneBackgroundSettings\":\"{\\\"usePicture\\\":\\\"false\\\",\\\"pictureFile\\\":\\\"\\\",\\\"pictureX\\\":\\\"0\\\",\\\"pictureY\\\":\\\"0\\\",\\\"pictureOpacity\\\":\\\"255\\\",\\\"pictureAnchor\\\":\\\"false\\\"}\"}","{\"sceneName\":\"Scene_SampleEquip //サンプル装備シーン\",\"windowSettings\":\"\",\"windowOrder\":\"[\\\"Window_Help\\\",\\\"Window_EquipCommand\\\",\\\"Window_ActorStatus\\\",\\\"Window_EquipSlot\\\",\\\"Window_EquipItemList\\\"]\",\"windowInfo\":\"[\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_Help\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"allWaysDeactivated\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":helpMode\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawHelpText(index,0,0,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"96\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_EquipCommand\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"command\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateFromBegin\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"closeScene //本シーンの終了\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"Window_Help\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"装備変更\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"最強装備\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"すべて外す\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"装備変更\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"activateWindow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Window_EquipSlot:activate\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"装備を変更します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"最強装備\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":equipOptimize\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"最強装備\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"すべて外す\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":equipAllOff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"すべての装備を外します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":previousActor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":nextActor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"312\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"96\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 312 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"this.fittingHeight(1) //72\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_ActorStatus\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"$gameParty.menuActor(); // ウィンドウの選択情報の共有にて アクター情報共有 で共有されたアクターを取得します。\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"$gameParty.menuActor(); // ウィンドウの選択情報の共有にて アクター情報共有 で共有されたアクターを取得します。\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"freeType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorName(index,0,0,28,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"//[リスト型専用]アクターの能力値を描画\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcSetActorParamIcons([84,67,77,81,101,139,82,313,71]);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcSetActorXParamIcons([84,67,77,81,101,139,82,313,71,313]);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcSetActorSParamIcons([84,67,77,81,101,139,82,313,71,313,71]);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcSetActorEParamIcons([84,67,77,81,101,139,82,313]);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorChangedEquipStatus(index,['all','all','all','all','all','all'],true,true,0,42,36,-40,0,16,16,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"➡\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorParam(index,[0,1,2,3,4,5,6,7],true,true,0,42,36,-40,0,16,16,false,'➡',!this.getCompareEquipter());\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}← → ページ切替\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",120,3,'left',!this.getCompareEquipter());\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorFace(index,0,0,0,0,false,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}← → ページ切替\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",120,3,'left',!this.getCompareEquipter());\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"96\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"312\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"86 + (380 - 96) + (Graphics.boxHeight - (96 + 86 + (380 - 96)))\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_EquipSlot\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"memoryReturn //アクセス元に戻る\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":actorEquips $gameParty.menuActor();\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawEquipSlots(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",true,true,0,0,138,28,28,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowNextPage Window_ActorStatus\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowPreivousPage Window_ActorStatus\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetHeight Window_EquipSlot 72\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetHeight Window_EquipItemList Graphics.boxHeight-(96+72+72)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":send Window_EquipItemList:selectLast Window_ActorStatus EquipSlot\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetPage Window_ActorStatus 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetTopRow Window_EquipSlot Window_EquipSlot index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetY Window_EquipItemList 96+72+72\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"312\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"96 + 72\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 312 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"this.fittingHeight(5)\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_EquipItemList\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"memoryReturn //アクセス元に戻る\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"Window_Help\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":commandRecieve actorEquip\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawItemName(index,0,0,28,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":previousActor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetHeight Window_EquipSlot 'default'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetY Window_EquipItemList 'default'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetHeight Window_EquipItemList 'default'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetTopRow Window_EquipSlot none default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":equipChange Window_ActorStatus\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowFunction Window_ActorStatus deactivate\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetHeight Window_EquipSlot 'default'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetY Window_EquipItemList 'default'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetHeight Window_EquipItemList 'default'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":windowSetTopRow Window_EquipSlot none default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":callHandler\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"312\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"96 + 72 + this.fittingHeight(5)\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 312 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"Graphics.boxHeight - (96 + 72 + this.fittingHeight(5)) //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\"]\",\"sceneSettings\":\"\",\"sceneCreateList\":\"[\\\"this.mmcCreateAllWindows();\\\"]\",\"sceneShortcutSettings\":\"[]\",\"useSlideOutWhenChange\":\"false\",\"useSlideOutWhenAbort\":\"false\",\"eraseSceneBlur\":\"false\",\"sceneBackgroundSettings\":\"{\\\"usePicture\\\":\\\"false\\\",\\\"pictureFile\\\":\\\"\\\",\\\"pictureX\\\":\\\"0\\\",\\\"pictureY\\\":\\\"0\\\",\\\"pictureOpacity\\\":\\\"255\\\",\\\"pictureAnchor\\\":\\\"false\\\"}\"}","{\"sceneName\":\"Scene_SampleBattle //サンプル戦闘シーン\",\"windowSettings\":\"\",\"windowOrder\":\"[\\\"Window_variable1\\\",\\\"Window_PartyCommand\\\",\\\"Window_ActorCommand\\\",\\\"Window_BattleStatus\\\",\\\"Window_BattleStatusSelect\\\",\\\"Window_BattleSkill\\\",\\\"Window_BattleItem\\\",\\\"Window_BattleEnemy\\\",\\\"Window_BattleLog\\\",\\\"Window_BattleHelp\\\"]\",\"windowInfo\":\"[\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_variable1\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"allWaysDeactivated\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"freeType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}戦闘テスト\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",0,0,'left',true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawIcon(index,84,0,36,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}変数ID:15 中身:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\v[15]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",0,80,'left',true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\c[18]UI全体\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\c[0]の\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\c[6]カスタマイズ可\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\c[0]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",0,140,'left',true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}アクションターン中にだけ表示するウィンドウです。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",0,160,'left',true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawTextEx(index,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\}コマンド入力ターン中にだけ表示するウィンドウも可能\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",0,180,'left',true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - (360 + 180) //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"480\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"360\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_PartyCommand\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"command\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"Window_BattleHelp\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"戦う\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"逃げる\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"戦う\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand startFight\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\c[24]敵と戦いますか？\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\c[0]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"逃げる\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand escapeBattle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"戦闘から離脱しますか？\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 180//Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_ActorCommand\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"command\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"攻撃\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"sType:必殺技\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"sType:魔法\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"防御\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"アイテム\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"攻撃\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand commandAttack\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcCanAttack(); //コマンド参照名が :battleCommand commandAttack, ○○ の場合に攻撃可能かを判定します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"敵に通常攻撃を行います。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sType:必殺技\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand commandSkill\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"必殺技を使用します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sType:魔法\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand commandSkill\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"魔法を使用します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"防御\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand commandGuard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcCanGuard(); //コマンド参照名が :battleCommand commandGuard の場合に防御可能かを判定します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"防御行動を行います。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"アイテム\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"functionCommand\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":battleCommand commandItem\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandShowSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commandHelpText\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"アイテムを使用します。\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 180//Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleStatus\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"allWaysDeactivated\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"$gameParty.battleMembers(); // [リスト型]戦闘メンバーのみ\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorName(index,0,0,16);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorHpText(index,true,250,0,30,15,5,24,17,17,17,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorFace(index,0,36,0,0,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorHpGauge(index,300,0,240,12,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 180 //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 192 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleStatusSelect\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"$gameParty.battleMembers(); // [リスト型]戦闘メンバーのみ\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorName(index,0,0,16);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorHpText(index,true,250,0,30,15,5,24,17,17,17,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawActorHpGauge(index,300,0,240,12,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 360 //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 192 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleEnemy\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"$gameTroop.aliveMembers(); // [リスト型]生存中の敵リスト\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawEnemyName(index,0,0,16);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 360 //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 192 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleSkill\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"Window_BattleHelp\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":commandRecieve actorSkill\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawSkillName(index,0,0,16,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawSkillCost(index,150,0,16,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 360 //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 192 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleItem\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"Window_BattleHelp\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":functionNote $gameParty.allItems():BattleItem, false\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawItemName(index,0,0,16,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawItemAmount(index,190,0,16,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"Graphics.boxHeight - 360 //Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth - 192 //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"180\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleLog\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openFromBegin\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"activateWhenSelected\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":logMode\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawLogText(index,0,18,true,0,-1.5,0,35,'#000000',64,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"Graphics.boxHeight - (Graphics.boxHeight/2)//Graphics.boxHeight 画面全体の縦幅を取得できます。\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"{\\\\\\\"windowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowName\\\\\\\":\\\\\\\"Window_BattleHelp\\\\\\\",\\\\\\\"windowType\\\\\\\":\\\\\\\"standard\\\\\\\",\\\\\\\"windowBeginBehavior\\\\\\\":\\\\\\\"openWhenSelected\\\\\\\",\\\\\\\"windowCloseBehavior\\\\\\\":\\\\\\\"closeWindow\\\\\\\",\\\\\\\"windowBeginActivate\\\\\\\":\\\\\\\"allWaysDeactivated\\\\\\\",\\\\\\\"windowUpdateBehavior\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"windowCancelBehavior\\\\\\\":\\\\\\\"none //なにもしない\\\\\\\",\\\\\\\"permissionMoveCursor\\\\\\\":\\\\\\\"default\\\\\\\",\\\\\\\"windowHighLight\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"showArrow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"helpWindowInfo\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"helpWindowName\\\\\\\":\\\\\\\"none\\\\\\\",\\\\\\\"commandSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandOrder\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commands\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseCommandCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"commandListDesign\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"commandHighLight\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"standardSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"standardTargetData\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\":helpMode\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"windowDesignType\\\\\\\":\\\\\\\"listType\\\\\\\",\\\\\\\"caseStandardCol\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"caseStandardRow\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"drawPageList\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standardDrawList\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this.mmcDrawHelpText(index,0,0,true);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"infoSharing\\\\\\\":\\\\\\\"ignoreSharing\\\\\\\",\\\\\\\"windowSlideSettings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"useSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeWindowSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"windowSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useOpenSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"openSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"useCloseSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"closeSlideDataDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataOpenSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlide\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataCloseSlideDelay\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"dataSlideSpeedY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"cursorSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"commandCursorDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorRight\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCursorLeft\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageUp\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandPageDown\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandOk\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"commandCancel\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"cursorAction\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"callType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callScene\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTypeName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableSwitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandTargetType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"callDirectly\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"targetWindowName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"commandEnableExt\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"none //使用しない\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"windowSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowX\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowY\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"windowW\\\\\\\":\\\\\\\"Graphics.boxWidth //Graphics.boxWidth 画面全体の横幅を取得できます。\\\\\\\",\\\\\\\"windowH\\\\\\\":\\\\\\\"72\\\\\\\",\\\\\\\"windowOpacity\\\\\\\":\\\\\\\"255\\\\\\\",\\\\\\\"windowBackOpacity\\\\\\\":\\\\\\\"192\\\\\\\",\\\\\\\"windowBackgroundSetup\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"windowBackground\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"usePicture\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureFile\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureX\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureY\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureOpacity\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pictureAnchor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"}\\\\\\\"}\\\"]\",\"sceneSettings\":\"\",\"sceneCreateList\":\"[\\\"//[必須] 作成・設定したウィンドウを作成\\\",\\\"this.mmcCreateAllWindows();\\\",\\\"//戦闘ログウィンドウの設定\\\",\\\"this.mmcBattleLogWindow('Window_BattleLog');\\\",\\\"//戦闘パーティコマンドの設定\\\",\\\"this.mmcBattlePartyCommand('Window_PartyCommand');\\\",\\\"//戦闘アクターコマンドの設定\\\",\\\"this.mmcBattleActorCommand('Window_ActorCommand');\\\",\\\"//戦闘アクターステータスリストの設定\\\",\\\"this.mmcBattleStatusList('Window_BattleStatus');\\\",\\\"//戦闘スキルリストの設定\\\",\\\"this.mmcBattleSkillList('Window_BattleSkill');\\\",\\\"//戦闘アイテムリストの設定\\\",\\\"this.mmcBattleItemList('Window_BattleItem');\\\",\\\"//戦闘アクター選択リストの設定\\\",\\\"this.mmcBattleActorSelectList('Window_BattleStatusSelect');\\\",\\\"//戦闘敵選択リストの設定\\\",\\\"this.mmcBattleEnemyList('Window_BattleEnemy');\\\",\\\"//ターン終了時に強制的に指定対象を閉じる[複数設定可]\\\",\\\"this.mmcTurnEndAutoCloseWindow('Window_PartyCommand');\\\",\\\"this.mmcTurnEndAutoCloseWindow('Window_ActorCommand');\\\",\\\"this.mmcTurnEndAutoCloseWindow('Window_BattleHelp');\\\",\\\"//アクションターン時に強制的に指定対象を開く[複数設定可]\\\",\\\"this.mmcActionTurnAutoWindow('Window_variable1');\\\",\\\"//戦闘アクターステータスをデフォルトの挙動モードに設定\\\",\\\"this.mmcActivateDefaultStatusMovements();\\\"]\",\"sceneShortcutSettings\":\"[]\",\"useSlideOutWhenChange\":\"false\",\"useSlideOutWhenAbort\":\"false\",\"eraseSceneBlur\":\"false\",\"sceneBackgroundSettings\":\"{\\\"usePicture\\\":\\\"false\\\",\\\"pictureFile\\\":\\\"\\\",\\\"pictureX\\\":\\\"0\\\",\\\"pictureY\\\":\\\"0\\\",\\\"pictureOpacity\\\":\\\"255\\\",\\\"pictureAnchor\\\":\\\"false\\\"}\"}"]
 * @desc 各種シーンのデザイン設定を行います。
 * 
 * @param termList
 * @text 項目名称の設定
 * @type struct<MainMenuTermLists>
 * @default {"itemTerms":"","itemScopeTermName":"\"効果範囲\"","itemScopeTypeName":"[\"なし\",\"敵単体\",\"敵全体\",\"敵1体ランダム\",\"敵2体ランダム\",\"敵3体ランダム\",\"敵4体ランダム\",\"味方単体\",\"味方全体\",\"味方単体(戦闘不能)\",\"味方全体(戦闘不能)\",\"使用者\"]","itemTypeTermName":"\"アイテムタイプ\"","itemTypeName":"[\"通常アイテム\",\"大事なもの\",\"隠しアイテムA\",\"隠しアイテムB\"]","consumeTermName":"\"消耗\"","consumeTypeName":"[\"する\",\"しない\"]","useAvailableTermName":"\"使用可能時\"","useAvailableTypeName":"[\"常時\",\"バトルのみ\",\"メニューのみ\",\"使用不可\"]","repeatTermName":"\"連続回数\"","tpGainTermName":"\"得TP\"","damageTypeTermName":"\"効果タイプ\"","damageTypeName":"[\"命中率\",\"回避率\",\"会心率\",\"会心回避率\",\"魔法回避率\"]","useEffectTermName":"\"使用効果\"","useEffectTypeName":"[\"HP回復\",\"MP回復\",\"TP増加\",\"ステート付与\",\"ステート解除\",\"強化\",\"弱体\",\"強化解除\",\"弱体解除\",\"特殊効果\",\"成長\",\"スキル習得\"]","equipTerms":"","equipTypeName":"\"装備タイプ\"","weaponTypeName":"\"武器タイプ\"","armorTypeName":"\"防具タイプ\"","elementName":"\"(t)属性\"","stateRateName":"\"(t)付与率\"","debuffRateName":"\"(t)弱体率\"","additionalParamTermName":"\"追加能力\"","additionalParamName":"[\"命中率\",\"回避率\",\"会心率\",\"会心回避率\",\"魔法回避率\",\"魔法反射率\",\"反撃率\",\"HP再生率\",\"MP再生率\",\"TP再生率\"]","specialParamTermName":"\"特殊能力\"","specialParamName":"[\"狙われ率\",\"防御効果率\",\"回復効果率\",\"薬の知識\",\"MP消費率\",\"TPチャージ率\",\"物理ダメージ率\",\"魔法ダメージ率\",\"床ダメージ率\",\"経験値獲得率\"]","itemEquipCommonTerms":"","priceTermName":"\"値段\""}
 * @desc 本プラグイン内で使用される各種項目名称のカスタマイズ設定を行います。
 */

//=============================================================================
//  【MainMenuDesignSetups】
//=============================================================================

/*~struct~MainMenuDesignSetups:
 * @param sceneName
 * @text シーン名
 * @type combo
 * @option -----------[既存のシーン]-----------
 * @option Scene_Title //タイトルシーン
 * @option 
 * @option Scene_Menu //メインメニューシーン
 * @option Scene_Item //アイテムシーン [不具合につき無効中]
 * @option Scene_Skill //スキルシーン [不具合につき無効中]
 * @option Scene_Equip //装備シーン
 * @option Scene_Status //ステータスシーン
 * @option Scene_Options //オプションシーン
 * @option Scene_Load //ロードシーン [不具合につき無効中]
 * @option Scene_Save //セーブシーン [不具合につき無効中]
 * @option Scene_GameEnd //ゲーム終了シーン
 * @option 
 * @option Scene_Battle //戦闘シーン
 * @option Scene_Gameover //ゲームオーバーシーン
 * @option 
 * @option Scene_Map //マップシーン
 * @option Scene_Shop //お店シーン [不具合につき無効中]
 * @option 
 * @default Scene_New
 * @desc シーン名の登録。既存シーンを指定した場合、上書きします。命名は、Scene_○○という法則に従ってください。例: Scene_MainMenu
 * 
 * @param windowSettings
 * @text ウィンドウの設定
 * 
 * @param sceneSettings
 * @text シーンの設定
 * 
 * @param windowOrder
 * @text ウィンドウの登録
 * @parent windowSettings
 * @type combo[]
 * @option none //ウィンドウなし
 * @default []
 * @desc ウィンドウ名を指定。ウィンドウがここに登録されていない場合、作成対象外。リストIdが大きいほど手前に表示されます。
 * 
 * @param windowInfo
 * @text ウィンドウの作成/設定
 * @parent windowSettings
 * @type struct<DesignWindowInfo>[]
 * @default []
 * @desc ウィンドウの設定を行います。設定された新規ウィンドウをウィンドウの登録に設定することで表示されるようになります。
 * 
 * @param sceneCreateList
 * @text シーン上で作成するデータリスト
 * @parent sceneSettings
 * @type combo[]
 * @option -----------[スクリプト集]-----------
 * @option [目次]
 * @option >> 必須設定スクリプト
 * @option >> シーン上にデータを作成
 * @option >> [*] 要別途:エロRPG制作キットMV
 * @option >> Scene_Titleのカスタマイズ時に使用可能なスクリプトリスト
 * @option >> Scene_Battleのカスタマイズ時に使用可能なスクリプトリスト
 * @option 
 * @option -----------[必須設定スクリプト]-----------
 * @option //[必須] 作成・設定したウィンドウを作成
 * @option this.mmcCreateAllWindows();
 * @option 
 * @option -----------[シーン上にデータを作成]----------
 * @option ※この項目内にあるスクリプトはショートカット機能から操作可能です。
 * @option //ピクチャーを描画
 * @option this.mmcDrawPicture(picId,picName,x,y,w,h,op,anchor,mDistance,mSpeed,enableSceneSwitch,showSceneSwitch,dEnableSceneSwitch,dShowSceneSwitch);
 * @option >> picId              : ピクチャーの Id を指定します。
 * @option >> picName            : 画像名を "" で指定します。
 * @option >> x                  : x座標
 * @option >> y                  : y座標
 * @option >> w                  : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h                  : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op                 : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor             : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> mDistance          : 移動距離を 1以上 で指定。
 * @option >> mSpeed             : 移動速度を 1以上 で指定。
 * @option >> enableSceneSwitch  : ショートカット機能から操作可能なピクチャー操作可能条件の シーン専用スイッチId を指定します。
 * @option >> showSceneSwitch    : ショートカット機能から操作可能なピクチャー表示可能条件の シーン専用スイッチId を指定します。
 * @option >> dEnableSceneSwitch : 操作用の シーン専用スイッチId の初期設定。true:操作可 / false:操作不可
 * @option >> dShowSceneSwitch   : 表示用の シーン専用スイッチId の初期設定。true:表示 / false:非表示
 * @option >> img/m_menu/ 内の picName で対象の画像を読み込みます。
 * @option 
 * @option //アクターバストアップイラストを描画
 * @option this.mmcDrawActorIllust(picId,picName,actorId,useHpRate,x,y,w,h,op,anchor,mDistance,mSpeed,enableSceneSwitch,showSceneSwitch,dEnableSceneSwitch,dShowSceneSwitch);
 * @option >> picId              : ピクチャーの Id を指定します。
 * @option >> picName            : 画像名を "" で指定します。
 * @option >> actorId            : アクターId を指定します。
 * @option >> useHpRate          : HP割合差分を true:有効 / false:無効
 * @option >> x                  : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y                  : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w                  : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h                  : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op                 : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor             : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> mDistance          : 移動距離を 1以上 で指定。
 * @option >> mSpeed             : 移動速度を 1以上 で指定。
 * @option >> enableSceneSwitch  : ショートカット機能から操作可能なピクチャー操作可能条件の シーン専用スイッチId を指定します。
 * @option >> showSceneSwitch    : ショートカット機能から操作可能なピクチャー表示可能条件の シーン専用スイッチId を指定します。
 * @option >> dEnableSceneSwitch : 操作用の シーン専用スイッチId の初期設定。true:操作可 / false:操作不可
 * @option >> dShowSceneSwitch   : 表示用の シーン専用スイッチId の初期設定。true:表示 / false:非表示
 * @option >> img/m_menu/ 内の picName + アクターID で対象の画像を読み込みます。
 * @option >> HP割合差分を使用する場合は、 下記の画像を img/m_menu/ 内に準備してください。
 * @option >>   HPが100%の時 picName + アクターID _100
 * @option >>   HPが50%の時 picName + アクターID _50
 * @option >>   HPが25%の時 picName + アクターID _20
 * @option >>   HPが0%の時 picName + アクターID _0
 * @option 
 * @option //ピクチャー用スライド効果付与
 * @option this.mmcPictureSlide(picId,onAccess,useOpen,oX,oY,oSpeedX,oSpeedY,useClose,cX,cY,cSpeedX,cSpeedY,useReturn,rX,rY,rSpeedX,rSpeedY);
 * @option >> picId     : 描画済みのピクチャーの Id を指定します。
 * @option >> onAccess  : 起動するタイミングを true:アクセスが発生した際 false:メニューが開かれた際
 * @option >> useOpen   : 起動した際のスライドを true:使用 false:使用しない
 * @option >> oX        : 起動した際のスライド先x座標
 * @option >> oY        : 起動した際のスライド先y座標
 * @option >> oSpeedX   : 起動した際のスライドxのスライド速度
 * @option >> oSpeedY   : 起動した際のスライドyのスライド速度
 * @option >> useClose  : メニューが別シーンに移行した際のスライドを true:使用 false:使用しない
 * @option >> cX        : メニューが別シーンに移行した際のスライド先x座標
 * @option >> cY        : メニューが別シーンに移行した際のスライド先y座標
 * @option >> cSpeedX   : メニューが別シーンに移行した際のスライドxのスライド速度
 * @option >> cSpeedY   : メニューが別シーンに移行した際のスライドyのスライド速度
 * @option >> useReturn : 終了した際のスライドを true:使用 false:使用しない
 * @option >> rX        : 終了した際のスライド先x座標
 * @option >> rY        : 終了した際のスライド先y座標
 * @option >> rSpeedX   : 終了した際のスライドxのスライド速度
 * @option >> rSpeedY   : 終了した際のスライドyのスライド速度
 * @option >> ※このスクリプトは必ず、上記の「ピクチャー描画」で対象画像を作成した後に指定してください。
 * @option 
 * @option //ピクチャー用回転効果付与
 * @option >> this.mmcPictureRotation(picId,useRotation,rSpeed);
 * @option >> picId       : 描画済みのピクチャーの Id を指定します。
 * @option >> useRotation : 回転効果を true:付与する false:付与しない
 * @option >> rSpeed      : 回転速度を指定します。-(マイナス)を指定すると逆回転します。デフォルトは、0.001 です。
 * @option >> ※ピクチャーを描画を作成する際、anchor の座標を軸に回転します。
 * @option >> ※このスクリプトは必ず、上記の「ピクチャー描画」で対象画像を作成した後に指定してください。
 * @option 
 * @option //ピクチャー用パーティクル効果
 * @option this.mmcPictureParticle(picId,mSpeedX,mSpeedY,swingX,swingY,useRotation,rSpeed,useRepeat,useRandomScale,rScale,anchor,blendMode,amount);
 * @option >> picId          : 描画済みのピクチャーの Id を指定します。
 * @option >> mSpeedX        : パーティクルのx方向速度 0 で停止。
 * @option >> mSpeedY        : パーティクルのy方向速度 0 で停止。
 * @option >> swingX         : パーティクルのx方向速度のふり幅。0 で使用しない。デフォルトは、0.4 です。
 * @option >> swingY         : パーティクルのy方向速度のふり幅。0 で使用しない。デフォルトは、0.4 です。
 * @option >> useRotation    : パーティクルを true:回転する false:回転しない
 * @option >> rSpeed         : 回転速度。-(マイナス)で逆回転します。デフォルトは、0.01 です。
 * @option >> useRepeat      : 画像が画面外に到達した際 true:再生し直す false:なにもしない
 * @option >> useRandomScale : 画像再生時に大きさを true:ランダム化 false:なにもしない
 * @option >> rScale         : 画像の大きさをランダム化する際の大きさのふり幅。デフォルトは、0.5 です。
 * @option >> anchor         : パーティクルの中心を true:画像中央に / false:画像の左上に
 * @option >> blendMode      : パーティクルの合成方法を 0:通常 1:加算 2:乗算 3:スクリーン から指定。デフォルトは、1 です。
 * @option >> amount         : 作成するパーティクルの数を指定します。多ければ多いほど処理負荷がかかりますので、やりすぎに注意。
 * @option >> ※このスクリプトは必ず、上記の「ピクチャー描画」で対象画像を作成した後に指定してください。
 * @option 
 * @option -----------[要別途:エロRPG制作キットMV]-----------
 * @option ※この項目内にあるスクリプトはショートカット機能から操作可能です。
 * @option //アニメーションアクターを描画
 * @option this.mmcDrawAegActor(id,actorId,poseId,playMode,playSpeed,customStartFrame,customEndFrame,mirror,x,y,w,h,op);
 * @option >> id               : id を指定して複数のアニメーションアクターを管理することが可能です。デフォルトは、0 です。
 * @option >> actorId          : アクターIdを指定します。
 * @option >> poseId           : エロRPG制作キットMVにて作成したポーズフォルダのIdを指定
 * @option >> playMode         : 再生モードを ''(シングルクォート)で指定 'loop' : ループ再生 'once' : 片道再生 'stop' : 停止
 * @option >> playSpeed        : 再生速度をエロRPG制作キットMV指定の数値で指定 デフォルトは、1 を指定
 * @option >> customStartFrame : アニメーション開始フレーム番号を指定 'continue' と指定すると読み込まれた最初のフレームが指定されます
 * @option >> customEndFrame   : アニメーション終了フレーム番号を指定 'end' と指定すると読み込まれた最後のフレームが指定されます
 * @option >> mirror           : 画像を true:反転 / false:反転しない
 * @option >> x                : 画像のx座標の調整値 指定しない場合は、0 を指定
 * @option >> y                : 画像のy座標の調整値 指定しない場合は、0 を指定
 * @option >> w                : 画像横幅の倍率を指定 デフォルトは、100 を指定
 * @option >> h                : 画像縦幅の倍率を指定 デフォルトは、100 を指定
 * @option >> op               : 画像の不透明度を指定 デフォルトは、255 を指定
 * @option >> ※こちらはショートカットキー機能からの操作は行えません。
 * @option 
 * @option -----------[Scene_Titleのカスタマイズ時に使用可能なスクリプトリスト]----------
 * @option //ゲームタイトル名を描画します。
 * @option this.mmcCreateGameTitleName();
 * @option 
 * @option //システム設定上のタイトル背景を描画します。
 * @option this.mmcCreateTitleBackGround();
 * @option 
 * @option -----------[Scene_Battleのカスタマイズ時に使用可能なスクリプトリスト]----------
 * @option //他プラグインからのバトルHUDをコピーします。
 * @option this.mmcCopyBattleScene();
 * @option >> 他プラグインからコピーを行った際、下記戦闘設定は不要になりますが、
 * @option >> コピー対象のバトルHUDプラグインをシーンカスタマイズMVより上に配置してください。
 * @option >> コピー時の特徴は操作ウィンドウは作成できませんが、
 * @option >> ちょっと表示ウィンドウを追加したいなどの場合に活用します。
 * @option 
 * @option [.:戦闘設定:.]
 * @option 上記、他プラグインからバトルHUDをコピーしない場合は、
 * @option バトルシステムと紐づけを行う必要がありますので、
 * @option 下記、各種戦闘ウィンドウを作成し紐づけ設定を行ってください。
 * @option 
 * @option //戦闘ログウィンドウの設定
 * @option this.mmcBattleLogWindow('Window_○○');
 * @option >> [戦闘ログ]を表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleLogWindow('Window_BattleLog');
 * @option 
 * @option //戦闘ヘルプウィンドウの設定
 * @option this.mmcBattleHelp('Window_○○');
 * @option >> [スキルの説明など]を表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleHelp('Window_BattleHelp');
 * @option 
 * @option //戦闘パーティコマンドの設定
 * @option this.mmcBattlePartyCommand('Window_○○');
 * @option >> [戦う、逃げる]のコマンド型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> ※戦闘パーティコマンドを作成していない場合は、
 * @option >>   そのまま省略され戦闘アクターコマンドが展開されます。
 * @option >> [使用例]
 * @option this.mmcBattlePartyCommand('Window_PartyCommand');
 * @option 
 * @option //戦闘アクターコマンドの設定
 * @option this.mmcBattleActorCommand('Window_○○');
 * @option >> アクター毎の[攻撃、防御、スキル、アイテム]のコマンド型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleActorCommand('Window_ActorCommand');
 * @option 
 * @option //戦闘アクターステータスリストの設定
 * @option this.mmcBattleStatusList('Window_○○');
 * @option >> [戦闘アクターのHP/MP/TP]などを表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleStatusList('Window_BattleStatus');
 * @option 
 * @option //戦闘スキルリストの設定
 * @option this.mmcBattleSkillList('Window_○○');
 * @option >> [戦闘アクターのスキルリスト]を表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleSkillList('Window_BattleSkill');
 * @option 
 * @option //戦闘アイテムリストの設定
 * @option this.mmcBattleItemList('Window_○○');
 * @option >> [戦闘アクターのアイテムリスト]を表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleItemList('Window_BattleItem');
 * @option 
 * @option //戦闘アクター選択リストの設定
 * @option this.mmcBattleActorSelectList('Window_○○');
 * @option >> [アクターリスト]を表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleActorSelectList('Window_BattleStatusSelect');
 * @option 
 * @option //戦闘敵選択リストの設定
 * @option this.mmcBattleEnemyList('Window_○○');
 * @option >> [戦闘敵リスト]を表示するデータ型ウィンドウを
 * @option >> 'Window_○○' に指定してください。
 * @option >> [使用例]
 * @option this.mmcBattleEnemyList('Window_BattleEnemy');
 * @option 
 * @option //戦闘アクターステータスをデフォルトの挙動モードに設定
 * @option this.mmcActivateDefaultStatusMovements();
 * @option >> 未指定で無効化
 * @option 
 * @option [.:戦闘共通設定:.]
 * @option 他プラグインのバトルHUDをコピーしてもしなくても共通で使用できます。
 * @option 
 * @option //ターン開始時に強制的に指定対象を開く[複数設定可]
 * @option this.mmcTurnBeginAutoOpenWindow('Window_○○');
 * @option >> [注意] アクティブ設定も対象ウィンドウの設定に基づいて
 * @option >>        設定され、本プラグインによって
 * @option >>        作成されているウィンドウ限定です。
 * @option >>        また戦闘設定各種のウィンドウは
 * @option >>        自動的に開かれますので設定不要。
 * @option >> [使用例1]
 * @option this.mmcTurnBeginAutoOpenWindow('Window_NewWindow1');
 * @option >> [使用例2 複数設定する場合]
 * @option this.mmcTurnBeginAutoOpenWindow('Window_NewWindow1');
 * @option this.mmcTurnBeginAutoOpenWindow('Window_NewWindow2');
 * @option this.mmcTurnBeginAutoOpenWindow('Window_NewWindow3');
 * @option 
 * @option //ターン終了時に強制的に指定対象を閉じる[複数設定可]
 * @option this.mmcTurnEndAutoCloseWindow('Window_○○');
 * @option >> [注意] アクティブ設定も対象ウィンドウの設定に基づいて
 * @option >>        設定され、本プラグインによって
 * @option >>        作成されているウィンドウ限定です。
 * @option >>        また戦闘設定各種のウィンドウも
 * @option >>        閉じたい場合は指定してください。
 * @option >> [使用例1]
 * @option this.mmcTurnEndAutoCloseWindow('Window_NewWindow1');
 * @option >> [使用例2 複数設定する場合]
 * @option this.mmcTurnEndAutoCloseWindow('Window_PartyCommand');
 * @option this.mmcTurnEndAutoCloseWindow('Window_ActorCommand');
 * @option this.mmcTurnEndAutoCloseWindow('Window_BattleStatus');
 * @option 
 * @option //アクションターン時に強制的に指定対象を開く[複数設定可]
 * @option this.mmcActionTurnAutoWindow('Window_○○');
 * @option >> [注意] アクティブ設定も対象ウィンドウの設定に基づいて
 * @option >>        設定され、本プラグインによって
 * @option >>        作成されているウィンドウ限定です。
 * @option >>        また戦闘設定各種のウィンドウも
 * @option >>        開きたい場合は指定してください。
 * @option >>        アクションターン終了時に自動的に閉じます。
 * @option >> [使用例1]
 * @option this.mmcActionTurnAutoWindow('Window_NewWindow1');
 * @option >> [使用例2 複数設定する場合]
 * @option this.mmcActionTurnAutoWindow('Window_PartyCommand');
 * @option this.mmcActionTurnAutoWindow('Window_ActorCommand');
 * @option this.mmcActionTurnAutoWindow('Window_BattleStatus');
 * @option 
 * @default ["this.mmcCreateAllWindows();"]
 * @desc Draw系はリスト番号が大きいほど手前に描画されます。
 * 
 * @param sceneShortcutSettings
 * @text ショートカット機能の作成/設定
 * @parent sceneSettings
 * @type struct<SceneShortCutLists>[]
 * @default []
 * @desc シーン中のショートカットキーの作成/設定を行います。
 * 
 * @param useSlideOutWhenChange
 * @text 別シーン移行時スライド
 * @parent sceneSettings
 * @type boolean
 * @on スライドアウトする
 * @off スライドアウトしない
 * @default false
 * @desc ウィンドウ各種に閉じるスライドが設定されている場合にスライド可能なウィンドウをスライドさせシーンを移行します。
 * 
 * @param useSlideOutWhenAbort
 * @text メニュー終了時スライド
 * @parent sceneSettings
 * @type boolean
 * @on スライドアウトする
 * @off スライドアウトしない
 * @default false
 * @desc ウィンドウ各種に閉じるスライドが設定されている場合にスライド可能なウィンドウをスライドさせシーンを終了します。
 * 
 * @param eraseSceneBlur
 * @text シーン背景ぼかしの除去
 * @parent sceneSettings
 * @type boolean
 * @on 除去する
 * @off 除去しない
 * @default false
 * @desc このシーンの背景ぼかしを指定します。
 * 
 * @param sceneBackgroundSettings
 * @text シーン背景
 * @parent sceneSettings
 * @type struct<SceneBackgroundSetups>
 * @default {"usePicture":"false","pictureFile":"","pictureX":"0","pictureY":"0","pictureOpacity":"255","pictureAnchor":"false"}
 * @desc シーン中の背景画像を作成します。※マップと戦闘シーンでは既存の背景が存在するため、無効されます。
 */

//=============================================================================
//  【SceneBackgroundSetups】
//=============================================================================

/*~struct~SceneBackgroundSetups:
 * @param usePicture
 * @text ピクチャーを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ピクチャーを使用するかの指定をします。
 * 
 * @param pictureFile
 * @text ピクチャーのファイル
 * @type file
 * @dir img/m_menu
 * @desc ピクチャーファイルを設定します。
 * 
 * @param pictureX
 * @text ピクチャーのx座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ピクチャーのX座標を指定します。
 * 
 * @param pictureY
 * @text ピクチャーのy座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ピクチャーのY座標を指定します。
 * 
 * @param pictureOpacity
 * @text ピクチャーの不透明度
 * @type number
 * @default 255
 * @desc ピクチャーの不透明度を指定します。
 * 
 * @param pictureAnchor
 * @text アンカーを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc 画像の中心を座標に合わせるかの指定します。しない場合は、画像の左上を座標に合わせます。
 * 
 * @param pictureScrollX
 * @text 横方向スクロールを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc 画像を横方向にスクロールさせます。
 * 
 * @param pictureScrollSpeedX
 * @text 横方向スクロール速度
 * @type string
 * @default 0
 * @desc 横スクロール速度を指定します。-(マイナス)を指定することで逆方向にスクロールします。デフォルト: -0.2
 * 
 * @param pictureScrollY
 * @text 縦方向スクロールを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc 画像を縦方向にスクロールさせます。
 * 
 * @param pictureScrollSpeedY
 * @text 縦方向スクロール速度
 * @type string
 * @default 0
 * @desc 縦スクロール速度を指定します。-(マイナス)を指定することで逆方向にスクロールします。デフォルト: -0.2
 * 
 * @param pictureRescale
 * @text ピクチャーをリスケール
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ピクチャーを画面に収まるようにリスケールします。
 */

//=============================================================================
//  【SceneShortCutLists】
//=============================================================================

/*~struct~SceneShortCutLists:
 * @param keyboardKey
 * @text キーボードキーの設定
 * @type select
 * @option Aキー
 * @value A
 * @option Bキー
 * @value B
 * @option Cキー
 * @value C
 * @option Dキー
 * @value D
 * @option Eキー
 * @value E
 * @option Fキー
 * @value F
 * @option Gキー
 * @value G
 * @option Hキー
 * @value H
 * @option Iキー
 * @value I
 * @option Jキー
 * @value J
 * @option Kキー
 * @value K
 * @option Lキー
 * @value L
 * @option Mキー
 * @value M
 * @option Nキー
 * @value N
 * @option Oキー
 * @value O
 * @option Pキー
 * @value P
 * @option Qキー
 * @value pageup
 * @option Rキー
 * @value R
 * @option Sキー
 * @value S
 * @option Tキー
 * @value T
 * @option Uキー
 * @value U
 * @option Vキー
 * @value V
 * @option Wキー
 * @value pagedown
 * @option Yキー
 * @value Y
 * @option なし
 * @value none
 * @default none
 * @desc メニューシーン中に指定キーボードキーで機能を実行します。
 * 
 * @param gamePadKey
 * @text ゲームパッドキーの設定
 * @type select
 * @option A
 * @value ok
 * @option B
 * @value cancel
 * @option X
 * @value shift
 * @option Y
 * @value menu
 * @option LB
 * @value pageup
 * @option RB
 * @value pagedown
 * @option LT
 * @value lt
 * @option RT
 * @value rt
 * @option back
 * @value back
 * @option start
 * @value start
 * @option L3
 * @value l3
 * @option R3
 * @value r3
 * @option 十字↑
 * @value up
 * @option 十字↓
 * @value down
 * @option 十字←
 * @value left
 * @option 十字→
 * @value right
 * @option なし
 * @value none
 * @default none
 * @desc メニューシーン中に指定ゲームパッドキーで機能を実行します。
 * 
 * @param function
 * @text 機能の作成
 * @type struct<ShortCutFunction>
 * @default {"functionCallType":"callScene","functionCommandTypeName":"","functionCommandEnableSwitch":"0","functionCommandTargetType":"callDirectly","functionTargetWindowName":"none //使用しない","functionCommandEnableExt":"none //使用しない"}
 * @desc 機能の作成を行います。
 */

//=============================================================================
//  【ShortCutFunction】
//=============================================================================

/*~struct~ShortCutFunction:
 * @param functionCommandName
 * @text 機能名
 * @type string
 * @desc エラー時にどの機能かを探しやすくするために用いられます。※使用済みの機能名は使用しないでください。
 *
 * @param functionCallType
 * @text 機能参照方法
 * @type select
 * @option シーンの呼び出し
 * @value callScene
 * @option コモンイベントの起動
 * @value commonEvent
 * @option ウィンドウへ接続
 * @value activateWindow
 * @option 特殊コマンド
 * @value functionCommand
 * @default callScene
 * @desc 機能の参照方法を指定し、該当の機能参照名の記述方法は機能参照名のプルダウンに記載しています。
 * 
 * @param functionCommandTypeName
 * @text 機能参照名
 * @type combo
 * @option -----------[機能参照方法が「シーンの呼び出し」専用]-----------
 * @option Scene_Item //アイテムシーン ※直接呼び出すようにできていますので、機能の選択方法を直接呼び出しに設定してください。
 * @option Scene_Skill //スキルシーン ※アクター情報が必要なため、機能の選択方法を対象選択に設定し、[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Equip //装備シーン ※アクター情報が必要なため、機能の選択方法を対象選択に設定し、[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Status //ステータスシーン ※アクター情報が必要なため、機能の選択方法を対象選択に設定し、[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Options //オプションシーン ※直接呼び出すようにできていますので、機能の選択方法を直接呼び出しに設定してください。
 * @option Scene_Save //セーブシーン ※直接呼び出すようにできていますので、機能の選択方法を直接呼び出しに設定してください。
 * @option Scene_GameEnd //ゲーム終了シーン ※直接呼び出すようにできていますので、機能の選択方法を直接呼び出しに設定してください。
 * @option Scene_QuestMenu //要別途プラグイン「高機能クエストシステム」 クエストメニューシーン ※直接呼び出すようにできていますので、機能の選択方法を直接呼び出しに設定してください。
 * @option 
 * @option [他作者様のプラグインからシーンを探す方法]
 * @option プラグインヘルプに記載されていることもありますが、
 * @option されていない場合は、プラグインの中身を直接開いて探すことになります。
 * @option SceneManager.push(○○○) という記述を探し、○○○ の部分を指定することで、
 * @option 他作者様のプラグインのメニュー等にアクセスできるようになります。
 * @option 
 * @option -----------[機能参照方法が「コモンイベントの起動」専用]-----------
 * @option コモンイベントId を機能参照名に指定することでコモンイベントを起動します。
 * @option 仕様としてマップシーンへ移動しますので、コモンイベント起動後にメインメニューに戻したい場合は、
 * @option 対象のコモンイベントの終りにスクリプトコマンドで SceneManager.push(Scene_Menu) と指定することで、
 * @option メインメニューに戻ることが可能です。
 * @option 
 * @option -----------[機能参照方法が「ウィンドウへ接続」専用]-----------
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @option -----------[機能参照方法が「特殊コマンド」専用]-----------
 * @option //アクター並び替えモード
 * @option :formation 
 * @option ※使用方法※ 機能の選択方法を対象選択にし、[対象選択]選択ウィンドウへ接続にて指定されたウィンドウがアクターデータに限り、並び替えモードを展開させます。
 * @option 
 * @option //常時ダッシュの設定
 * @option :alwaysDash
 * @option 
 * @option //機能記憶の設定
 * @option :commandRemember
 * @option 
 * @option //BGM音量設定
 * @option :bgmVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //BGS音量設定
 * @option :bgsVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //ME音量設定
 * @option :meVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //SE音量設定
 * @option :seVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //スイッチ操作を機能上で行えるようになります。
 * @option :switch Id enableId
 * @option Id     : スイッチId を指定します。
 * @option enable : true:操作可 / false: 操作不可 を指定します。
 * @option 
 * @option //シーン上で作成した操作可能なピクチャー
 * @option :accessMovablePicture picId, enable, show, enableReverse, showReverse
 * @option picId         : シーン上で作成した操作可能なピクチャーの picId を指定。
 * @option enable        : 操作可能条件を true:操作可に変更 / false:操作不可に変更
 * @option show          : 表示可能条件の true:表示に変更 / false:非表示に変更
 * @option enableReverse : 終了時に操作可能条件の設定を true:反転する / false:そのまま
 * @option showReverse   : 終了時に表示可能条件の設定を true:反転する / false:そのまま
 * @option ※1回目で起動、2回目で終了と扱われます。
 * @option 
 * @option //対象機能操作時にスクリプトを実行します。
 * @option :scriptCommand script, enableScript
 * @option script       : 実行するスクリプトを記述します。
 * @option enableScript : true:操作可 / false: 操作不可 か 操作条件のスクリプトを指定します。
 * @option 
 * @option 
 * @option -----------:scriptCommand script, enableScript の使用例-----------
 * @option //スイッチ15番がONの時、OFFに設定する。条件スクリプトに true/false のみを扱うスクリプトに限り、次のように指定すると trueの場合と判定できます。
 * @option :scriptCommand $gameSwitches.setValue(15,false), $gameSwitches.value(15)
 * @option 
 * @option //スイッチ15番がOFFの時、ONに設定する。条件スクリプトの頭に ! をつけると値を反転するという意味になります。この場合、OFFの時と判定。
 * @option :scriptCommand $gameSwitches.setValue(15,true), !$gameSwitches.value(15)
 * @option 
 * @option //変数20番が "明日" の時、"今日" に設定する。
 * @option :scriptCommand $gameVariables.setValue(20,"今日"), $gameVariables.value(20) === "明日"
 * @option 
 * @option //変数20番の値が 20 以下の時、5ずつ増加する。
 * @option :scriptCommand $gameMap._interpreter.operateVariable(20,1,5), $gameVariables.value(20) <= 20
 * @option 
 * @option //変数20番の値が 20 以上の時、5ずつ減算する。
 * @option :scriptCommand $gameMap._interpreter.operateVariable(20,2,5), $gameVariables.value(20) >= 20
 * @option 
 * @option //変数20番の値が 20 未満の時、5を代入する。
 * @option :scriptCommand $gameVariables.setValue(20,5), $gameVariables.value(20) < 20
 * @option 
 * @option //変数20番の値が 20 以外の時、20を代入する。
 * @option :scriptCommand $gameVariables.setValue(20,20), $gameVariables.value(20) !== 20
 * @option 
 * @option //要別途プラグイン「高機能クエストシステム」導入中ですべてのクエストを初期化する
 * @option :scriptCommand Ayatam.QUEST.resetAllQuest(), true
 * @option 
 * @default 
 * @desc 機能参照方法に基づいて機能参照名を指定します。
 * 
 * @param functionCommandEnableSwitch
 * @text 機能の使用スイッチ
 * @type switch
 * @default 0
 * @desc 指定スイッチがonの場合、機能を使用可能にする。なしの場合、常時使用可能。
 * 
 * @param functionCommandTargetType
 * @text 機能の選択方法
 * @type select
 * @option 直接呼び出し
 * @value callDirectly
 * @option 対象選択
 * @value targetSelection
 * @default callDirectly
 * @desc 機能の選択方法を指定します。
 * 
 * @param functionTargetWindowName
 * @text [対象選択]選択時接続ウィンドウ
 * @type combo
 * @option none //使用しない
 * @option 
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus:slideIn // 付属子(ショートカット機能専用) :slideIn (スライドインを実行) :slideOut (スライドアウトを実行) を追加することでスライド状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @option -----------[機能参照方法が「特殊コマンド」専用]-----------
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate //機能参照名が :formation の場合に一番左に指定されているウィンドウを並び替えモード展開の対象にします。
 * @option 
 * @default none //使用しない
 * @desc 機能の選択方法が対象選択時に対象選択を行うウィンドウへ接続します。ウィンドウ名で指定。不要時は、none と記述。
 * 
 * @param functionReturnTargetWindowName
 * @text [対象選択]選択終了時接続ウィンドウ
 * @type combo
 * @option none //使用しない
 * @option 
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus:slideIn // 付属子(ショートカット機能専用) :slideIn (スライドインを実行) :slideOut (スライドアウトを実行) を追加することでスライド状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @default none //使用しない
 * @desc 機能の選択方法が対象選択時に対象選択を行った後にキャンセルが押された際に指定ウィンドウへ接続します。
 * 
 * @param functionCommandEnableExt
 * @text 機能使用特殊条件
 * @type combo
 * @option -----------[スクリプト集]-----------
 * @option none //使用しない
 * @option 
 * @option [目次]
 * @option >> コマンド参照方法が「シーンの呼び出し」専用
 * @option >> コマンド参照方法が「特殊コマンド」専用
 * @option 
 * @option -----------[コマンド参照方法が「シーンの呼び出し」専用]-----------
 * @option this.isLoadEnabled(); //コマンド参照名が Scene_Load の場合にセーブデータが存在するかを判定します。
 * @option this.isSaveEnabled(); //コマンド参照名が Scene_Save の場合にセーブ可能かを判定します。
 * @option this.isGameEndEnabled(); //コマンド参照名が Scene_GameEnd の場合にゲーム終了可能かを判定します。
 * @option $gameQuest.canOpenQuestMenu(); //要別途プラグイン「高機能クエストシステム」 クエストメニュー使用条件
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option this.isFormationEnabled(); //コマンド参照名が :formation の場合に並び替え可能かを判定します。
 * @option 
 * @default none //使用しない
 * @desc スクリプトコマンドによる特別使用可能条件の指定。必要ない場合は、none と記述してください。スイッチの方を優先します。
 */

//=============================================================================
//  【MainMenuCommandLists】
//=============================================================================

/*~struct~MainMenuCommandLists:
 * @param commandName
 * @text コマンド名
 * @type string
 * @desc コマンドの表示名を指定します。例: オプション など。アクターコマンドに限り、全スキルタイプを sType:魔法 のように指定。
 *
 * @param callType
 * @text コマンド参照方法
 * @type select
 * @option シーンの呼び出し
 * @value callScene
 * @option コモンイベントの起動
 * @value commonEvent
 * @option ウィンドウへ接続
 * @value activateWindow
 * @option 特殊コマンド
 * @value functionCommand
 * @default callScene
 * @desc コマンドの参照方法を指定し、該当のコマンド参照名の記述方法はコマンド参照名のプルダウンに記載しています。
 * 
 * @param commandTypeName
 * @text コマンド参照名
 * @type combo
 * @option -----------[スクリプト集]-----------
 * @option [目次]
 * @option >> コマンド参照方法が「シーンの呼び出し」専用
 * @option >> コマンド参照方法が「コモンイベントの起動」専用
 * @option >> コマンド参照方法が「ウィンドウへ接続」専用
 * @option >> コマンド参照方法が「特殊コマンド」専用
 * @option >> [*] ニューゲームを開始 :commandNewGame
 * @option >> [*] 指定アクターの最強装備 :equipOptimize
 * @option >> [*] 指定アクターの装備をすべて外す :equipAllOff
 * @option >> [*] アクター並び替えモード :formation
 * @option >> [*] 常時ダッシュの設定 :alwaysDash
 * @option >> [*] コマンド記憶の設定 :commandRemember
 * @option >> [*] BGM音量設定 :bgmVolume
 * @option >> [*] BGS音量設定 :bgsVolume
 * @option >> [*] SE音量設定 :seVolume
 * @option >> [*] コマンド上で変数値を表示 :variable
 * @option >> [*] スイッチ操作 :switch
 * @option >> [*] スクリプトを実行 :scriptCommand
 * @option >> コマンド参照方法が「特殊コマンド」戦闘シーン Scene_Battle 専用コマンド
 * @option 
 * @option -----------[コマンド参照方法が「シーンの呼び出し」専用]-----------
 * @option Scene_Item //アイテムシーン ※直接呼び出すようにできていますので、コマンドの選択方法を直接呼び出しに設定してください。
 * @option Scene_Skill //スキルシーン ※アクター情報が必要なため、コマンドの選択方法を対象選択に設定し、
 * @option >>          //[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。
 * @option >>          //直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Equip //装備シーン ※アクター情報が必要なため、コマンドの選択方法を対象選択に設定し、
 * @option >>          //[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。
 * @option >>          //直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Status //ステータスシーン ※アクター情報が必要なため、コマンドの選択方法を対象選択に設定し、
 * @option >>           //[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。
 * @option >>           //直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Options //オプションシーン ※直接呼び出すようにできていますので、
 * @option >>            //コマンドの選択方法を直接呼び出しに設定してください。
 * @option Scene_Load //ロードシーン ※直接呼び出すようにできていますので、
 * @option >>         //コマンドの選択方法を直接呼び出しに設定してください。
 * @option Scene_Save //セーブシーン ※直接呼び出すようにできていますので、
 * @option >>         //コマンドの選択方法を直接呼び出しに設定してください。
 * @option Scene_GameEnd //ゲーム終了シーン ※直接呼び出すようにできていますので、
 * @option >>            //コマンドの選択方法を直接呼び出しに設定してください。
 * @option Scene_QuestMenu //要別途プラグイン「高機能クエストシステム」 クエストメニューシーン
 * @option >>              //※直接呼び出すようにできていますので、コマンドの選択方法を直接呼び出しに設定してください。
 * @option 
 * @option >> ※シーンカスタマイズで作成されたシーンも同様に
 * @option >>   Scene_○○ と指定します。
 * @option 
 * @option [他作者様のプラグインからシーンを探す方法]
 * @option プラグインヘルプに記載されていることもありますが、
 * @option されていない場合は、プラグインの中身を直接開いて探すことになります。
 * @option SceneManager.push(○○○) という記述を探し、○○○ の部分を指定することで、
 * @option 他作者様のプラグインのメニュー等にアクセスできるようになります。
 * @option 
 * @option -----------[コマンド参照方法が「コモンイベントの起動」専用]-----------
 * @option コモンイベントId をコマンド参照名に指定することでコモンイベントを起動します。
 * @option 仕様としてマップシーンへ移動しますので、コモンイベント起動後にメインメニューに戻したい場合は、
 * @option 対象のコモンイベントの終りにスクリプトコマンドで SceneManager.push(Scene_Menu) と指定することで、
 * @option メインメニューに戻ることが可能です。
 * @option 
 * @option -----------[コマンド参照方法が「ウィンドウへ接続」専用]-----------
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:activateNoSelect // 操作対象にはするが項目を選択しない
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option //ニューゲームを開始
 * @option :commandNewGame
 * @option 
 * @option //指定アクターの最強装備
 * @option :equipOptimize
 * @option >> ※アクター共有で指定されたアクターが対象になります。
 * @option 
 * @option //指定アクターの装備をすべて外す
 * @option :equipAllOff
 * @option >> ※アクター共有で指定されたアクターが対象になります。
 * @option 
 * @option //アクター並び替えモード
 * @option :formation
 * @option >> ※使用方法※ コマンドの選択方法を対象選択にし、[対象選択]選択時接続ウィンドウにて指定されたウィンドウの参照データが
 * @option >> 付加効果無しの $gameParty.members() に限り、並び替えモードを展開させます。
 * @option 
 * @option //常時ダッシュの設定
 * @option :alwaysDash
 * @option 
 * @option //コマンド記憶の設定
 * @option :commandRemember
 * @option 
 * @option //BGM音量設定
 * @option :bgmVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //BGS音量設定
 * @option :bgsVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //ME音量設定 
 * @option :meVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //SE音量設定
 * @option :seVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //コマンド上で変数値を表示
 * @option :variable Id asLabel
 * @option Id      : 変数Id を指定します。
 * @option asLabel : true:コマンド名として表示 / false: コマンド内容として表示 を指定します。
 * @option ※変数値を表示するだけでなにも起きません。
 * @option 
 * @option //スイッチ操作をコマンド上で行えるようになります。
 * @option :switch Id enable
 * @option Id     : スイッチId を指定します。
 * @option enable : true:操作可 / false: 操作不可 を指定します。
 * @option 
 * @option //対象コマンド操作時にスクリプトを実行します。
 * @option :scriptCommand script, enableScript
 * @option script       : 実行するスクリプトを記述します。
 * @option enableScript : true:操作可 / false: 操作不可 か 操作条件のスクリプトを指定します。
 * @option 
 * @option -----------:scriptCommand script, enableScript の使用例-----------
 * @option //スイッチ15番がONの時、OFFに設定する。条件スクリプトに true/false のみを扱うスクリプトに限り、次のように指定すると trueの場合と判定できます。
 * @option :scriptCommand $gameSwitches.setValue(15,false), $gameSwitches.value(15)
 * @option 
 * @option //スイッチ15番がOFFの時、ONに設定する。条件スクリプトの頭に ! をつけると値を反転するという意味になります。この場合、OFFの時と判定。
 * @option :scriptCommand $gameSwitches.setValue(15,true), !$gameSwitches.value(15)
 * @option 
 * @option //変数20番が "明日" の時、"今日" に設定する。
 * @option :scriptCommand $gameVariables.setValue(20,"今日"), $gameVariables.value(20) === "明日"
 * @option 
 * @option //変数20番の値が 20 以下の時、5ずつ増加する。
 * @option :scriptCommand $gameMap._interpreter.operateVariable(20,1,5), $gameVariables.value(20) <= 20
 * @option 
 * @option //変数20番の値が 20 以上の時、5ずつ減算する。
 * @option :scriptCommand $gameMap._interpreter.operateVariable(20,2,5), $gameVariables.value(20) >= 20
 * @option 
 * @option //変数20番の値が 20 未満の時、5を代入する。
 * @option :scriptCommand $gameVariables.setValue(20,5), $gameVariables.value(20) < 20
 * @option 
 * @option //変数20番の値が 20 以外の時、20を代入する。
 * @option :scriptCommand $gameVariables.setValue(20,20), $gameVariables.value(20) !== 20
 * @option 
 * @option //要別途プラグイン「高機能クエストシステム」導入中ですべてのクエストを初期化する
 * @option :scriptCommand Ayatam.QUEST.resetAllQuest(), true
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」戦闘シーン Scene_Battle 専用コマンド]-----------
 * @option //パーティコマンド「戦う」のコマンド動作の作成。
 * @option :battleCommand startFight
 * @option 
 * @option //パーティコマンド「逃げる」のコマンド動作の作成。
 * @option :battleCommand escapeBattle
 * @option 
 * @option //アクターコマンド「攻撃」のコマンド動作の作成。
 * @option :battleCommand commandAttack
 * @option >> 通常攻撃の処理です。
 * @option 
 * @option //アクターコマンド「スキル」のコマンド動作の作成。
 * @option :battleCommand commandSkill
 * @option 
 * @option //アクターコマンド「防御」のコマンド動作の作成。
 * @option :battleCommand commandGuard
 * @option 
 * @option //アクターコマンド「アイテム」のコマンド動作の作成。
 * @option :battleCommand commandItem
 * @option   
 * @option 
 * @default 
 * @desc コマンド参照方法に基づいてコマンド参照名を指定します。
 * 
 * @param commandShowSwitch
 * @text コマンド表示スイッチ
 * @type switch
 * @default 0
 * @desc 指定スイッチがonの場合、メニューに表示されます。なしの場合、常時表示。
 * 
 * @param commandEnableSwitch
 * @text コマンド使用スイッチ
 * @type switch
 * @default 0
 * @desc 指定スイッチがonの場合、コマンドを使用可能にする。なしの場合、常時使用可能。
 * 
 * @param commandTargetType
 * @text コマンドの選択方法
 * @type select
 * @option 直接呼び出し
 * @value callDirectly
 * @option 対象選択
 * @value targetSelection
 * @default callDirectly
 * @desc コマンドの選択方法を指定します。
 * 
 * @param targetWindowName
 * @text [対象選択]選択時接続ウィンドウ
 * @type combo
 * @option none //使用しない
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate //コマンド参照名が :formation の場合に一番左に指定されているウィンドウを並び替えモード展開の対象にします。
 * @option 
 * @default none //使用しない
 * @desc コマンドの選択方法が対象選択時に対象選択を行うウィンドウへ接続します。ウィンドウ名で指定。不要時は、none と記述。
 * 
 * @param commandEnableExt
 * @text コマンド使用特殊条件
 * @type combo
 * @option -----------[スクリプト集]-----------
 * @option none //使用しない
 * @option 
 * @option [目次]
 * @option >> コマンド参照方法が「シーンの呼び出し」専用
 * @option >> コマンド参照方法が「特殊コマンド」専用
 * @option >> コマンド参照方法が「特殊コマンド」戦闘シーン Scene_Battle 専用コマンド
 * @option 
 * @option -----------[コマンド参照方法が「シーンの呼び出し」専用]-----------
 * @option this.isLoadEnabled(); //コマンド参照名が Scene_Load の場合にセーブデータが存在するかを判定します。
 * @option this.isSaveEnabled(); //コマンド参照名が Scene_Save の場合にセーブ可能かを判定します。
 * @option this.isGameEndEnabled(); //コマンド参照名が Scene_GameEnd の場合にゲーム終了可能かを判定します。
 * @option $gameQuest.canOpenQuestMenu(); //要別途プラグイン「高機能クエストシステム」 クエストメニュー使用条件
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option this.isFormationEnabled(); //コマンド参照名が :formation の場合に並び替え可能かを判定します。
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」戦闘シーン Scene_Battle 専用コマンド]-----------
 * @option this.mmcCanAttack(); //コマンド参照名が :battleCommand commandAttack の場合に攻撃可能かを判定します。
 * @option this.mmcCanGuard(); //コマンド参照名が :battleCommand commandGuard の場合に防御可能かを判定します。
 * @option 
 * @default none //使用しない
 * @desc スクリプトコマンドによる特別使用可能条件の指定。必要ない場合は、none と記述してください。スイッチの方を優先します。
 * 
 * @param commandHelpText
 * @text コマンドヘルプ
 * @type string
 * @default 
 * @desc ヘルプウィンドウ接続時に限り使用可能。※制御文字も扱えます。エディタ上と同じように \v[n] と指定してください。
 */

//=============================================================================
//  【DesignWindowInfo】
//=============================================================================

/*~struct~DesignWindowInfo:
 * @param windowInfo
 * @text 基本設定
 * 
 * @param helpWindowInfo
 * @text ヘルプウィンドウ接続設定
 * 
 * @param commandSetup
 * @text [種類]コマンドウィンドウの設定
 * 
 * @param standardSetup
 * @text [種類]データウィンドウの設定
 * 
 * @param cursorSetup
 * @text カーソル/ボタン挙動の設定
 * 
 * @param windowSetup
 * @text ウィンドウの設定
 * 
 * @param windowBackgroundSetup
 * @text ウィンドウ背景の設定
 * 
 * @param windowName
 * @text ウィンドウ名
 * @parent windowInfo
 * @type string
 * @default Window_NewWindowName
 * @desc ウィンドウ名を指定します。命名には、Window_○○という法則に従ってください。例: Window_ActorStatus
 * 
 * @param windowType
 * @text ウィンドウの種類
 * @parent windowInfo
 * @type select
 * @option コマンド
 * @value command
 * @option データ
 * @value standard
 * @default standard
 * @desc 種類を選択形式のコマンドウィンドウか自由に情報を表示させるデータウィンドウから指定します。
 * 
 * @param windowBeginBehavior
 * @text ウィンドウの起動挙動
 * @parent windowInfo
 * @type select
 * @option 常に展開
 * @value openFromBegin
 * @option 開始非表示
 * @value openWhenSelected
 * @option 常時非表示
 * @value allWaysClosed
 * @default openFromBegin
 * @desc 起動挙動を常に展開(表示)させておくかコマンドによる実行時に展開(表示)させるかを指定します。※スライド等にも影響します。
 * 
 * @param windowCloseBehavior
 * @text ウィンドウの終了挙動
 * @parent windowInfo
 * @type select
 * @option なにもしない
 * @value none
 * @option 非表示
 * @value closeWindow
 * @default none
 * @desc 他ウィンドウからのアクセス後の終了挙動を非表示にするかなにもさせないかを指定します。※スライド等にも影響します。
 * 
 * @param windowBeginActivate
 * @text ウィンドウの初期状態
 * @parent windowInfo
 * @type select
 * @option 初期アクティブ
 * @value activateFromBegin
 * @option 初期非アクティブ
 * @value activateWhenSelected
 * @option 常時非アクティブ
 * @value allWaysDeactivated
 * @default activateWhenSelected
 * @desc 初期状態を指定。アクティブの挙動は操作を許可するウィンドウのことになります。
 * 
 * @param windowUpdateBehavior
 * @text ウィンドウの更新挙動
 * @parent windowInfo
 * @type boolean
 * @on 常に更新
 * @off 更新が必要な時のみ更新
 * @default false
 * @desc 常に更新を多用すると重くなりますので、時間などの本当に常に更新が必要なウィンドウ以外は必要な時限定にしましょう。
 * 
 * @param windowCancelBehavior
 * @text ウィンドウのキャンセル挙動
 * @parent windowInfo
 * @type combo
 * @option none //なにもしない
 * @option memoryReturn //アクセス元に戻る
 * @option closeScene //本シーンの終了
 * @default none //なにもしない
 * @desc キャンセル挙動を指定。ウィンドウ名を指定すると対象ウィンドウに移動します。
 * 
 * @param permissionMoveCursor
 * @text 操作方向の制限
 * @parent windowInfo
 * @type select
 * @option 左右方向のみ
 * @value leftRight
 * @option 上下方向のみ
 * @value upDown
 * @option 全四方向許可
 * @value allDir
 * @option デフォルト
 * @value default
 * @default default
 * @desc ウィンドウがアクセスされた際、操作する方向を指定します。
 * 
 * @param windowHighLight
 * @text 選択時ハイライト
 * @parent windowInfo
 * @type boolean
 * @on 有効化する
 * @off 無効化する
 * @default true
 * @desc 対象コマンド選択時にウィンドウ側の選択ハイライト効果を有効/無効を指定します。
 * 
 * @param showArrow
 * @text 矢印の表示/非表示
 * @parent windowInfo
 * @type boolean
 * @on 表示する
 * @off 表示しない
 * @default true
 * @desc ウィンドウがアクセスされた際、ページめくりが可能な時、矢印を表示/非表示かを指定します。
 * 
 * @param helpWindowName
 * @text ヘルプウィンドウ名
 * @parent helpWindowInfo
 * @type string
 * @default none
 * @desc 作成されたヘルプウィンドウ名を指定します。使用しない場合は、none と指定してください。
 * 
 * @param commandOrder
 * @text コマンド順の設定
 * @parent commandSetup
 * @type string[]
 * @default []
 * @desc コマンド作成のコマンド名で順番を指定。アクターコマンドに限り、全スキルタイプの指定は、sType:魔法 のように指定します。
 *
 * @param commands
 * @text コマンド作成
 * @parent commandSetup
 * @type struct<MainMenuCommandLists>[]
 * @default []
 * @desc コマンドの作成を行います。
 *
 * @param commandDesignType
 * @text コマンドのデザイン方式
 * @parent commandSetup
 * @type select
 * @option リスト型
 * @value listType
 * @option 自由型
 * @value freeType
 * @default listType
 * @desc コマンドの配置位置をリスト型にするか自由配置型にするかを指定します。
 * 
 * @param caseCommandCol
 * @text [リスト型専用]列の最大数
 * @parent commandSetup
 * @type number
 * @default 1
 * @desc 列の最大数。この数を超えた場合、次の行に描画します。
 * 
 * @param commandListDesign
 * @text 各コマンドのデザイン設定
 * @parent commandSetup
 * @type struct<DesignCommandListType>[]
 * @default []
 * @desc コマンドの配置・デザインなどの設定を行います。アクターコマンドに限り、「sType:魔法」の「sType:」は不要。魔法と指定。
 * 
 * @param commandHighLight
 * @text [画像]選択時ハイライト
 * @parent commandSetup
 * @type boolean
 * @on 有効化する
 * @off 無効化する
 * @default false
 * @desc 対象のコマンド選択時にコマンド背景画像に対してハイライト効果を有効/無効を指定します。未選択コマンドは半透明状態になります。
 * 
 * @param standardTargetData
 * @text 参照するデータ
 * @parent standardSetup
 * @type combo[]
 * @option -----------[スクリプト集]-----------
 * @option [目次]
 * @option >> ゲームデータコマンド
 * @option >> ゲームデータコマンド: Scene_Battle専用のコマンド
 * @option >> 特殊コマンド集
 * @option >> [*] ログモード :logMode
 * @option >> [*] ヘルプモード :helpMode
 * @option >> [*] 選択可能なアクター装備リスト :actorEquips
 * @option >> [*] コマンドウィンドウからデータを受け取るモード :commandRecieve
 * @option >> [*] 特別メモ欄指定収集モード :functionNote
 * @option >> [*] ピクチャーリストモード :customPictureList
 * @option 
 * @option -----------[ゲームデータコマンド]-----------
 * @option $gameParty.members()[順Id]; // [自由型]パーティメンバー内の順Idの位置にいるメンバーを指定 順Idは, 0 から先頭..1..2..3 になります。
 * @option $gameActors.actor(アクターId); // [自由型]アクターを直接指定します。
 * @option $gameParty.members(); // [リスト型]全パーティメンバー
 * @option $gameParty.battleMembers(); // [リスト型]戦闘メンバーのみ
 * @option $gameParty.menuActor(); // ウィンドウの選択情報の共有にて アクター情報共有 で共有されたアクターを取得します。
 * @option 
 * @option -----------[ゲームデータコマンド: Scene_Battle専用のコマンド]-----------
 * @option $gameTroop.aliveMembers(); // [リスト型]生存中の敵リスト
 * @option 
 * @option -----------[特殊コマンド集]-----------
 * @option // ログモード
 * @option :logMode
 * @option >> ログデータを扱いたい時に使用します。
 * @option 
 * @option // ヘルプモード
 * @option :helpMode
 * @option >> ヘルプウィンドウモードになります。
 * @option >> 接続設定されているコマンドのヘルプ情報
 * @option >> またはスキル/アイテムの説明を自動で認識し表示させることができます。
 * @option 
 * @option // 選択可能なアクター装備リスト
 * @option :actorEquips data
 * @option >> data に使用できるリストは以下になります。
 * @option >> $gameParty.menuActor() アクター情報共有時に共有されたアクターを取得
 * @option >> $gameActors.actor(アクターId) アクターを指定して装備情報を描画します。
 * @option >> [使用例]
 * @option :actorEquips $gameParty.menuActor()
 * @option 
 * @option // コマンドウィンドウからデータを受け取るモード
 * @option :commandRecieve action
 * @option >> action リストは以下になります。
 * @option >>   アクタースキルデータの受信待ち: actorSkill
 * @option >>   アクター装備データの受信待ち: actorEquip
 * @option >> [使用例]
 * @option :commandRecieve actorSkill
 * @option 
 * @option // 特別メモ欄指定収集モード
 * @option :functionNote currentData, noteTag
 * @option >> currentData : 収集対象を指定します。収集可能なデータは下記になります。
 * @option >> noteTag     : 収集用のタグ 使用しない場合は、false と指定してください。
 * @option >> [currentDataの収集可能なデータ]
 * @option >>   仲間メンバー : $gameParty.members()
 * @option >>   戦闘メンバー : $gameParty.battleMembers()
 * @option >>   すべての所持アイテム : $gameParty.allItems()
 * @option >>   すべての所持アイテムの中からカテゴリーで絞ります : $gameParty.allItems():Category
 * @option >>     Category は以下のように置き換えます。
 * @option >>     アイテム : $gameParty.allItems():Item
 * @option >>     武器 : $gameParty.allItems():Weapon
 * @option >>     防具 : $gameParty.allItems():Armor
 * @option >>     大事なもの : $gameParty.allItems():KeyItem
 * @option >>     カテゴリー新規作成 : $gameParty.allItems():newCategory
 * @option >>       対象のアイテム/武器/防具にデフォルトで存在しない Magic(魔法) という
 * @option >>       カテゴリーで収集したい場合、対象のメモ欄に newCategory に Magic を指定し、
 * @option >>       下記のように記述します。
 * @option >>         <mmc itemCategory>
 * @option >>         Magic
 * @option >>         </mmc itemCategory>
 * @option >>       また複数指定することが可能ですので、
 * @option >>         <mmc itemCategory>
 * @option >>         Magic
 * @option >>         formula
 * @option >>         </mmc itemCategory>
 * @option >>       と指定することで、同時に他のカテゴリーとしても
 * @option >>       収集することができます。
 * @option >> 【noteTag メモ欄収集リストの使用方法】
 * @option >>   収集したい対象データのメモ欄に noteTag を party1 で収集したい場合
 * @option >>     <mmc customNote>
 * @option >>     party1
 * @option >>     </mmc customNote>
 * @option >>   と指定されている対象のみ収集できます。
 * @option >>   また複数指定することが可能ですので、
 * @option >>     <mmc customNote>
 * @option >>     party1
 * @option >>     party2
 * @option >>     mustMember
 * @option >>     </mmc customNote>
 * @option >>   と指定することで、他のリストにも同時に
 * @option >>   データを収集することが可能です。
 * @option >> 【指定例1】所持アイテムの中から新カテゴリー Magic(魔法) に属するアイテムで formula(レシピ) というリストを作成する場合
 * @option :functionNote $gameParty.allItems():Magic, formula
 * @option >> 【指定例2】所持アイテムの中からアイテムに属するアイテムで heals(回復系) というリストを作成する場合
 * @option :functionNote $gameParty.allItems():Item, heals
 * @option >> 【指定例3】所持アイテム全体から mustItem(必須アイテム) というリストを作成する場合
 * @option :functionNote $gameParty.allItems(), mustItem
 * @option >> 【指定例4】パーティメンバーの party1 とメモ欄指定されているメンバーだけのリストを作成する場合
 * @option :functionNote $gameParty.members(), party1
 * @option 
 * @option // [リスト型]ピクチャーをリストとして扱うピクチャーリストモード
 * @option :customPictureList [["pic"]], vId
 * @option >> pic : ピクチャー名を指定します。
 * @option >> vId : リストを切り替えるために使用する変数Idを指定します。
 * @option >> 指定した変数の値は必ず、数値にしてください。0 が先頭リスト 1..2..3..とリストを変更できます。
 * @option >> [使用方法] 複数のリストを指定する方法
 * @option :customPictureList [["pic1","pic2","pic3"],["pic4","pic5"],["pic6"]], 2
 * @option >> 上記のように ,(コンマ)で区切ることでリストを追加することができ、
 * @option >> リストの中も同様に ,(コンマ)で区切ることで画像を追加することができます。
 * @option >> 変数の値は、このリストのみ変更しますのでリストIdと呼びます。
 * @option >> 【例】
 * @option >> 変数Id:2 の値が 0 の場合、["pic1","pic2","pic3"] 選択され、
 * @option >> 変数Id:2 の値が 1 の場合、["pic4","pic5"] 選択され、
 * @option >> 変数Id:2 の値が 2 の場合、["pic6"] 選択されます。
 * @option >> ※未設定のリストIdは指定しないでください。
 * @option >> img/m_menu/ 内に設定したピクチャーをすべて導入してください。
 * @option 
 * @default []
 * @desc ページ毎の描画に使用する参照先データを指定します。コマンド用の並び替えは、$gameParty.○○ が参照先でないと機能しません。
 *
 * @param windowDesignType
 * @text データのデザイン方式
 * @parent standardSetup
 * @type select
 * @option リスト型
 * @value listType
 * @option 自由型
 * @value freeType
 * @default listType
 * @desc データの配置位置をリスト型配置か自由配置型にするかを指定します。
 * 
 * @param caseStandardCol
 * @text [リスト型専用]横列に表示するデータ数
 * @parent standardSetup
 * @type combo
 * @option $gameParty.size(); // 仲間の人数分描画
 * @option $gameParty.battleMembers().length; // 戦闘人数分のみ
 * @default 1
 * @desc 1ページ内の横列に表示するデータ数(スクリプト可)を指定します。一つずつ表示したい場合は、縦列データ数と共に 1 と指定。
 * 
 * @param caseStandardRow
 * @text [リスト型専用]縦列に表示するデータ数
 * @parent standardSetup
 * @type combo
 * @option $gameParty.size(); // 仲間の人数分描画
 * @option $gameParty.battleMembers().length; // 戦闘人数分のみ
 * @default 4
 * @desc 1ページ内の縦列に表示するデータ数(スクリプト可)を指定します。一つずつ表示したい場合は、横列データ数と共に 1 と指定。横列データ数の影響を受けます。
 * 
 * @param drawPageList
 * @text 描画するデータリスト
 * @parent standardSetup
 * @type struct<MainMenuDrawList>[]
 * @default []
 * @desc ページ毎に描画するデータを指定します。1ページだけの場合、ページ機能は無効化されます。
 * 
 * @param infoSharing
 * @text 選択情報の共有
 * @parent standardSetup
 * @type select
 * @option アクター情報を共有
 * @value shareActor
 * @option カスタム情報を共有
 * @value shareCustomInfo
 * @option 選択情報の共有はしない
 * @value ignoreSharing
 * @default ignoreSharing
 * @desc データ選択された情報を他シーンへ共有する方法を選択します。カスタム情報は上級者向けの設定です。
 * 
 * @param windowSlideSettings
 * @text データスライド設定
 * @parent standardSetup
 * @type struct<WindowSlideSetups>
 * @default {"useSlide":"false","openWindowSlide":"false","closeWindowSlide":"false","windowSlideX":"0","windowSlideY":"0","windowSlideSpeedX":"0","windowSlideSpeedY":"0","useOpenSlideDataDelay":"false","openSlideDataDelay":"0","useCloseSlideDataDelay":"false","closeSlideDataDelay":"0","dataOpenSlide":"false","dataOpenSlideDelay":"0","dataCloseSlide":"false","dataCloseSlideDelay":"0","dataSlideX":"0","dataSlideY":"0","dataSlideSpeedX":"0","dataSlideSpeedY":"0"}
 * @desc コマンド用のスライド設定を行います。
 * 
 * @param commandCursorDown
 * @text カーソルキー下の挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc カーソルキー下の挙動を指定します。
 * 
 * @param commandCursorUp
 * @text カーソルキー上の挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc カーソルキー上の挙動を指定します。
 * 
 * @param commandCursorRight
 * @text カーソルキー右の挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc カーソルキー右の挙動を指定します。
 * 
 * @param commandCursorLeft
 * @text カーソルキー左の挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc カーソルキー左の挙動を指定します。
 * 
 * @param commandPageUp
 * @text Q/PageUp/LTの挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc Q/PageUp/LTの挙動を指定します。
 * 
 * @param commandPageDown
 * @text E/PageDown/RTの挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc E/PageDown/RTの挙動を指定します。
 * 
 * @param commandOk
 * @text 決定キーの挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc 決定キーの挙動を指定します。
 * 
 * @param commandCancel
 * @text キャンセルキーの挙動
 * @parent cursorSetup
 * @type struct<MainMenuCommandCursorLists>
 * @default {"cursorAction":"default","callType":"callScene","commandTypeName":"[]","commandEnableSwitch":"0","commandTargetType":"callDirectly","targetWindowName":"none //使用しない","commandEnableExt":"none //使用しない"}
 * @desc キャンセルキーの挙動を指定します。
 * 
 * @param windowX
 * @text ウィンドウx座標
 * @parent windowSetup
 * @type combo
 * @option Graphics.boxWidth - 240 //Graphics.boxWidth 画面全体の横幅を取得できます。
 * @default 0 
 * @desc ウィンドウのx座標を指定します。
 * 
 * @param windowY
 * @text ウィンドウy座標
 * @parent windowSetup
 * @type combo
 * @option Graphics.boxHeight //Graphics.boxHeight 画面全体の縦幅を取得できます。
 * @option 
 * @option //指定行数の高さを取得します。1行は 72 です。
 * @option this.fittingHeight(height)
 * @option >> height : 指定行数の高さを取得します。
 * @option >> [使用例] 3行分の高さを取得する場合
 * @option this.fittingHeight(3)
 * @option 
 * @default 0
 * @desc ウィンドウのy座標を指定します。
 * 
 * @param windowW
 * @text ウィンドウの横幅
 * @parent windowSetup
 * @type combo
 * @option Graphics.boxWidth - 240 //Graphics.boxWidth 画面全体の横幅を取得できます。
 * @default 0 
 * @desc ウィンドウの横幅を指定します。
 * 
 * @param windowH
 * @text ウィンドウの縦幅
 * @parent windowSetup
 * @type combo
 * @option Graphics.boxHeight //Graphics.boxHeight 画面全体の縦幅を取得できます。
 * @option 
 * @option //指定行数の高さを取得します。
 * @option this.fittingHeight(height)
 * @option >> height : 指定行数の高さを取得します。
 * @option >> [使用例] 3行分の高さを取得する場合
 * @option this.fittingHeight(3)
 * @option 
 * @default 0
 * @desc ウィンドウの縦幅を指定します。
 * 
 * @param windowOpacity
 * @text ウィンドウの外枠不透明度
 * @parent windowSetup
 * @type number
 * @min 0
 * @max 255
 * @default 255
 * @desc ウィンドウの外枠の不透明度を指定します。0:255 デフォルトは、255 です。
 * 
 * @param windowBackOpacity
 * @text ウィンドウの内枠不透明度
 * @parent windowSetup
 * @type number
 * @min 0
 * @max 255
 * @default 192
 * @desc ウィンドウの内枠の不透明度を指定します。0:255 デフォルトは、192 です。
 * 
 * @param windowBackground
 * @text ウィンドウ背景
 * @parent windowBackgroundSetup
 * @type struct<WindowBackgroundSetups>
 * @default {"usePicture":"false","pictureFile":"","pictureX":"0","pictureY":"0","pictureOpacity":"255","pictureAnchor":"false"}
 * @desc ウィンドウ用の背景を指定します。
 */

/*~struct~MainMenuDrawList:
 * @param standardDrawList
 * @text ページデータリスト
 * @parent standardSetup
 * @type combo[]
 * @option -----------[描画スクリプト集]-----------
 * @option [目次]
 * @option >> 参照するデータに関係なく使用可能なスクリプト
 * @option >> 参照するデータ: スキルデータ関連専用
 * @option >> 参照するデータ: アイテムデータ関連専用
 * @option >> 参照するデータ: ログデータ関連専用
 * @option >> 参照するデータ: ヘルプデータ関連専用
 * @option >> 参照するデータ: $gameParty.○○ または $gameActors.○○ 専用
 * @option >>                [*] 要別途:Sp貯蓄式スキルMV
 * @option >>                [*] 要別途:エロRPG制作キットMV
 * @option >> 参考するデータ: :actorEquips 専用
 * @option >> 参照するデータ: $gameTroop.○○ 専用
 * @option >> 参照するデータ: customPictureList [["pic"]], vId 専用
 * @option 
 * @option -----------[参照するデータに関係なく使用可能なスクリプト]-----------
 * @option //自由テキストを描画 ※制御文字使用不可
 * @option this.mmcDrawText(index,text,x,y,color,fontSize,algin,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> text       : テキストを ""(ダブルクォート)で囲んで指定
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> color      : カラーコードを ''(シングルクォート)で囲んでラインの色を指定。デフォルトは '#ffffff' と指定。
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> algin      : 文字整列方法を ''(シングルクォート)で囲んで指定 左寄せ:'left' 中央寄せ:'center' 右寄せ:'right'
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //自由テキストExを描画 ※制御文字使用可
 * @option this.mmcDrawTextEx(index,text,x,y,align,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> text       : テキストを ""(ダブルクォート)で囲んで指定
 * @option >> ※制御文字の指定方法が少し異なります。通常 \v[n] で変数を描画できますが、\\v[n] のように \ を2回繰り返してください。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> align      : 文字寄せを ''(シングルクォート)で囲んで指定。 右寄せ:'right' 中央寄せ:'center' 左寄せ:'left'
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アイコンを描画
 * @option this.mmcDrawIcon(index,iconIndex,x,y,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> iconIndex  : アイコンindexを指定。 表示しない場合は、0 を指定
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //変数の値を描画
 * @option this.mmcDrawVariables(index,vId,x,y,valueSize,valueColor,align,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> vId        : 変数Idを指定
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> valueSize  : 変数値の文字サイズを指定。 デフォルトは 28 と指定
 * @option >> valueColor : 変数値のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#ffffff' と指定。
 * @option >> align      : 文字寄せを ''(シングルクォート)で囲んで指定。 右寄せ:'right' 中央寄せ:'center' 左寄せ:'left'
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //プレイ時間を描画
 * @option this.mmcDrawPlaytime(index,drawPattern,x,y,color,fontSize,algin,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> drawPattern : 時間表記方法を true: 01:12:45 / false: 01時間12分45秒
 * @option >> x           : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y           : y座標の調整値 指定しない場合は、0 を指定
 * @option >> color       : カラーコードを ''(シングルクォート)で囲んでラインの色を指定。デフォルトは '#ffffff' と指定。
 * @option >> fontSize    : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> algin       : 文字整列方法を ''(シングルクォート)で囲んで指定 左寄せ:'left' 中央寄せ:'center' 右寄せ:'right'
 * @option >> showScript  : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //項目用ラインを描画
 * @option this.mmcDrawItemLine(index,x,y,w,color,op,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅を指定 指定しない場合は、0 を指定
 * @option >> color      : カラーコードを ''(シングルクォート)で囲んでラインの色を指定。デフォルトは '#84aaff' と指定。
 * @option >> op         : 不透明度を指定。デフォルトは 255 と指定。0:255
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //項目用の背景を描画
 * @option this.mmcDrawItemBackground(index,x,y,w,h,color,op,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅を指定 指定しない場合は、0 を指定
 * @option >> h          : 縦幅を指定 指定しない場合は、0 を指定
 * @option >> color      : カラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#000000' と指定。
 * @option >> op         : 不透明度を指定。デフォルトは 167 と指定。0:255
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //対象選択時のハイライト効果
 * @option this.mmcDrawSelectBackground(index,x,y,w,h);
 * @option index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> 選択状態を受け付けた時に自動で表示されます。
 * @option 
 * @option //ピクチャーを描画
 * @option this.mmcDrawPicture(index,picName,x,y,w,h,op,anchor,showScript);
 * @option >> [リスト型時] index は変更しないでください。
 * @option >> [自由型時] index をIdで管理することができ、複数のピクチャーを扱うことができます。 idは 0...1...2...3... と指定してください。
 * @option >> picName    : 画像名を "" で指定します。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h          : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op         : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor     : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >> img/m_menu/ 内の picName で対象の画像を読み込みます。
 * @option 
 * @option -----------[参照するデータ: スキルデータ関連専用]-----------
 * @option //スキル名を描画
 * @option this.mmcDrawSkillName(index,x,y,fontSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //スキルコストを描画
 * @option this.mmcDrawSkillCost(index,x,y,fontSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ: アイテムデータ関連専用]-----------
 * @option //アイテム名を描画
 * @option this.mmcDrawItemName(index,x,y,fontSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アイテム所持数を描画
 * @option this.mmcDrawItemAmount(index,x,y,fontSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ: ログデータ関連専用]-----------
 * @option //ログテキストを描画
 * @option this.mmcDrawLogText(index,x,y,useBack,backX,backY,backW,backH,backColor,backOp,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> useBack    : 文字背景を true:使用する / false:使用しない
 * @option >> backX      : 文字背景のx座標を文字x座標からの調整するx座標
 * @option >>              指定しない場合は、0
 * @option >> backY      : 文字背景のy座標を文字y座標からの調整するy座標
 * @option >>              指定しない場合は、-1.5
 * @option >> backW      : 文字背景横幅を指定 指定しない場合は、0
 * @option >> backH      : 文字背景縦幅を指定 指定しない場合は、35
 * @option >> backColor  : 文字背景のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#000000' と指定。
 * @option >> backOp     : 文字背景の不透明度を指定。デフォルトは 64 と指定。0:255
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ: ヘルプデータ関連専用]-----------
 * @option //対象のヘルプ情報を描画
 * @option this.mmcDrawHelpText(index,x,y,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ: $gameParty.○○ または $gameActors.○○ 専用]-----------
 * @option //アクター歩行グラを描画
 * @option this.mmcDrawActorCharacter(index,x,y,battle,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> battle     : バトルメンバーと待機メンバーの区別機能を true:使用する / false:使用しない
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >> 対象アクターのメモ欄に 下記のスクリプト を記載すると
 * @option >> 対象アクターの歩行グラを任意に変更できます。
 * @option >>   <mmc cWinChara>
 * @option >>   win: chara, index
 * @option >>   </mmc cWinChara>
 * @option >>     win   : この変更を適応するウィンドウ名を指定します。
 * @option >>     chara : 歩行グラフィック名を指定します。
 * @option >>     index : 使用する歩行グラフィックのインデックス番号を指定します。
 * @option >> [使用例]
 * @option >>   <mmc cWinChara>
 * @option >>   Window_mmcMenuStatus: Actor1, 1
 * @option >>   Window_NewWindow: Monster, 1
 * @option >>   </mmc cWinChara>
 * @option 
 * @option //アクター顔グラを描画
 * @option this.mmcDrawActorFace(index,x,y,w,h,battle,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h          : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> battle     : バトルメンバーと待機メンバーの区別機能を true:使用する / false:使用しない
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクター名を描画
 * @option this.mmcDrawActorName(index,x,y,fontSize);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターの二つ名を描画
 * @option this.mmcDrawActorNickname(index,x,y,fontSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターレベルを描画
 * @option this.mmcDrawActorLevel(index,x,y,lvlX,lvlY,lvlLabelSize,lvlNumSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x            : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y            : y座標の調整値 指定しない場合は、0 を指定
 * @option >> lvlX         : レベル数字のx座標の調整値 デフォルトは 84 と指定
 * @option >> lvlY         : レベル数字のy座標の調整値 デフォルトは 0 と指定
 * @option >> lvlLabelSize : レベル文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> lvlNumSize   : レベル数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> showScript   : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのステートを描画
 * @option this.mmcDrawActorStates(index,x,y,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターの職業を描画
 * @option this.mmcDrawActorClass(index,x,y,fontSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのHP(数字)を描画
 * @option this.mmcDrawActorHpText(index,showMax,x,y,hpNumX,slashX,maxHpNumX,hpLabelSize,hpNumSize,slashSize,maxHpNumSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> showMax      : 最大HPを 表示:true 非表示:false
 * @option >> x            : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y            : y座標の調整値 指定しない場合は、0 を指定
 * @option >> hpNumX       : HP数字x座標の調整値 指定しない場合は、0 を指定
 * @option >> slashX       : /文字のx座標の調整値 指定しない場合は、0 を指定
 * @option >> maxHpNumX    : 最大HP数字x座標の調整値 指定しない場合は、0 を指定
 * @option >> hpLabelSize  : HP文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> hpNumSize    : HP数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> slashSize    : /文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> maxHpNumSize : 最大HP数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> showScript   : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのHP(ゲージ)を描画
 * @option this.mmcDrawActorHpGauge(index,x,y,w,h,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : ゲージの横幅を指定 デフォルトは 186 と指定
 * @option >> h          : ゲージの縦幅を指定 デフォルトは 6 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのMP(数字)を描画
 * @option this.mmcDrawActorMpText(index,showMax,x,y,mpNumX,slashX,maxMpNumX,mpLabelSize,mpNumSize,slashSize,maxMpNumSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> showMax      : 最大MPを 表示:true 非表示:false
 * @option >> x            : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y            : y座標の調整値 指定しない場合は、0 を指定
 * @option >> mpNumX       : MP数字x座標の調整値 指定しない場合は、0 を指定
 * @option >> slashX       : /文字のx座標の調整値 指定しない場合は、0 を指定
 * @option >> maxMpNumX    : 最大MP数字x座標の調整値 指定しない場合は、0 を指定
 * @option >> mpLabelSize  : MP文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> mpNumSize    : MP数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> slashSize    : /文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> maxMpNumSize : 最大MP数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> showScript   : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのMP(ゲージ)を描画
 * @option this.mmcDrawActorMpGauge(index,x,y,w,h,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : ゲージの横幅を指定 デフォルトは 186 と指定
 * @option >> h          : ゲージの縦幅を指定 デフォルトは 6 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのTP(数字)を描画
 * @option this.mmcDrawActorTpText(index,x,y,tpNumX,tpLabelSize,tpNumSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x           : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y           : y座標の調整値 指定しない場合は、0 を指定
 * @option >> tpNumX      : HP数字x座標の調整値 指定しない場合は、0 を指定
 * @option >> tpLabelSize : HP文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> tpNumSize   : HP数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> showScript  : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのTP(ゲージ)を描画
 * @option this.mmcDrawActorTpGauge(index,x,y,w,h,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : ゲージの横幅を指定 デフォルトは 186 と指定
 * @option >> h          : ゲージの縦幅を指定 デフォルトは 6 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのEXP(数字)を描画
 * @option this.mmcDrawActorExpText(index,x,y,showTo,showNe,toAddWord,neAddWord,toLaX,toLaY,toNumX,toNumY,neLaX,neLaY,neNumX,neNumY,toLaSize,neLaSize,toNumSize,neNumSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> showTo     : 現在の経験値ラベルを true:表示 / false:非表示
 * @option >> showNe     : 次の経験値ラベルを true:表示 / false:非表示
 * @option >> toAddWord  : 現在の経験値数字の後に追加文字を ""(ダブルクォート) で囲んで指定 デフォルトは "" を指定
 * @option >> neAddWord  : 次の経験値数字の後に追加文字を ""(ダブルクォート) で囲んで指定 デフォルトは "" を指定
 * @option >> toLaX      : 現在の経験値ラベルx座標の調整値 指定しない場合は、0 を指定
 * @option >> toLaY      : 現在の経験値ラベルy座標の調整値 指定しない場合は、0 を指定
 * @option >> toNumX     : 現在の経験値数字x座標の調整値 指定しない場合は、40 を指定
 * @option >> toNumY     : 現在の経験値数字y座標の調整値 指定しない場合は、0 を指定
 * @option >> neLaX      : 次の経験値ラベルx座標の調整値 指定しない場合は、0 を指定
 * @option >> neLaY      : 次の経験値ラベルy座標の調整値 指定しない場合は、0 を指定
 * @option >> neNumX     : 次の経験値数字x座標の調整値 指定しない場合は、40 を指定
 * @option >> neNumY     : 次の経験値数字y座標の調整値 指定しない場合は、0 を指定
 * @option >> toLaSize   : 現在の経験値ラベル文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> neLaSize   : 現在の経験値数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> toNumSize  : 次の経験値ラベル文字のサイズを指定。 デフォルトは 28 と指定
 * @option >> neNumSize  : 次の経験値数字のサイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターのEXP(ゲージ)を描画
 * @option this.mmcDrawActorExpGauge(index,x,y,color1,color2,w,h,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> color1     : グラデ1のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#00a040' と指定。
 * @option >> color2     : グラデ2のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#00e060' と指定。
 * @option >> w          : ゲージの横幅を指定 デフォルトは 186 と指定
 * @option >> h          : ゲージの縦幅を指定 デフォルトは 6 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクター簡易ステータスを描画
 * @option this.mmcDrawActorSimpleStatus(index,x,y,w,h,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h          : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターの基本能力値(弱体有効度値と共通)のアイコンを登録
 * @option this.mmcSetActorParamIcons([0,1,2,3,4,5,6,7]);
 * @option >> アイコンindex を対象ステータスに登録します。
 * @option >> 表示させない場合は、0 を指定。
 * @option >> 0:最大HP
 * @option >> 1:最大MP
 * @option >> 2:攻撃力
 * @option >> 3:防御力
 * @option >> 4:魔法力
 * @option >> 5:魔法防御力
 * @option >> 6:敏捷性
 * @option >> 7:運
 * @option >> ※この登録は基本能力値を描画するスクリプトより上に配置してください。
 * @option >> [使用例] 
 * @option this.mmcSetActorParamIcons([84,67,77,81,101,139,82,313,71]);
 * @option 
 * @option //アクターの基本能力値を描画
 * @option this.mmcDrawActorParam(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> paramId         : 描画するパラメータのIdを下記から選択してください 
 * @option >>                   0:最大HP
 * @option >>                   1:最大MP
 * @option >>                   2:攻撃力
 * @option >>                   3:防御力
 * @option >>                   4:魔法力
 * @option >>                   5:魔法防御力
 * @option >>                   6:敏捷性
 * @option >>                   7:運
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   左から順に連続描画します。
 * @option >> showLabel       : 対象パラメータのラベルを true:表示 / false:非表示
 * @option >> useIcon         : 登録された基本能力値のアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> equipChangeMode : 装備変更時の比較モードを true:使用する / false:使用しない
 * @option >> arrow           : 装備変更時の比較モードを使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※装備比較データを受け取った際に、描画させるかを指定できるように
 * @option >>                     装備ステータス専用に this.getCompareEquipter() を用意しました。
 * @option >>                     showScript であれば、他の描画スクリプトにも使用できます。
 * @option >>                     ➡装備変更時にステータス比較データを受け取った際、true になり、
 * @option >>                       受け取っていない場合は、false を返します。
 * @option >>                       !this.getCompareEquipter() と記述すると結果が反転し、
 * @option >>                       true が false に false が true の結果を返します。
 * @option >>                       下記使用例をご参考ください。
 * @option >> [使用例] 連続描画で基本能力値すべてを描画する際、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorParam(index,[0,1,2,3,4,5,6,7],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 連続描画で基本能力値の攻撃力と魔法力のみ描画し、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorParam(index,[2,4],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 基本能力値の最大HPのみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、非表示にする
 * @option this.mmcDrawActorParam(index,0,true,false,0,42,0,-40,0,16,16,true,"➡",!this.getCompareEquipter());
 * @option >> [使用例] 基本能力値の最大MPのみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、表示にする
 * @option this.mmcDrawActorParam(index,1,true,false,0,42,0,-40,0,16,16,true,"➡",this.getCompareEquipter());
 * @option 
 * @option //アクターの追加能力値のアイコンを登録
 * @option this.mmcSetActorXParamIcons([0,1,2,3,4,5,6,7,8,9]);
 * @option >> アイコンindex を対象ステータスに登録します。
 * @option >> 表示させない場合は、0 を指定。
 * @option >> 0:命中率
 * @option >> 1:回避率
 * @option >> 2:会心率
 * @option >> 3:会心回避率
 * @option >> 4:魔法回避率
 * @option >> 5:魔法反射率
 * @option >> 6:反撃率
 * @option >> 7:HP再生率
 * @option >> 8:MP再生率
 * @option >> 9:TP再生率
 * @option >> ※この登録は追加能力値を描画するスクリプトより上に配置してください。
 * @option >> [使用例] 
 * @option this.mmcSetActorXParamIcons([84,67,77,81,101,139,82,313,71,313]);
 * @option 
 * @option //アクターの追加能力値を描画
 * @option this.mmcDrawActorXParam(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> paramId         : 描画するパラメータのIdを下記から選択してください 
 * @option >>                   0:命中率
 * @option >>                   1:回避率
 * @option >>                   2:会心率
 * @option >>                   3:会心回避率
 * @option >>                   4:魔法回避率
 * @option >>                   5:魔法反射率
 * @option >>                   6:反撃率
 * @option >>                   7:HP再生率
 * @option >>                   8:MP再生率
 * @option >>                   9:TP再生率
 * @option >>                   また [0,1,2,3,4,5,6,7,8,9] のように指定すると、
 * @option >>                   左から順に連続描画します。
 * @option >> showLabel       : 対象パラメータのラベルを true:表示 / false:非表示
 * @option >> useIcon         : 登録された追加能力値のアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> equipChangeMode : 装備変更時の比較モードを true:使用する / false:使用しない
 * @option >> arrow           : 装備変更時の比較モードを使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※装備比較データを受け取った際に、描画させるかを指定できるように
 * @option >>                     装備ステータス専用に this.getCompareEquipter() を用意しました。
 * @option >>                     showScript であれば、他の描画スクリプトにも使用できます。
 * @option >>                     ➡装備変更時にステータス比較データを受け取った際、true になり、
 * @option >>                       受け取っていない場合は、false を返します。
 * @option >>                       !this.getCompareEquipter() と記述すると結果が反転し、
 * @option >>                       true が false に false が true の結果を返します。
 * @option >>                       下記使用例をご参考ください。
 * @option >> [使用例] 連続描画で追加能力値すべてを描画する際、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorXParam(index,[0,1,2,3,4,5,6,7,8,9],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 連続描画で追加能力値の会心率と魔法回避率のみ描画し、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorXParam(index,[2,4],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 追加能力値の命中率のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、非表示にする
 * @option this.mmcDrawActorXParam(index,0,true,false,0,42,0,-40,0,16,16,true,"➡",!this.getCompareEquipter());
 * @option >> [使用例] 追加能力値の回避率のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、表示にする
 * @option this.mmcDrawActorXParam(index,1,true,false,0,42,0,-40,0,16,16,true,"➡",this.getCompareEquipter());
 * @option 
 * @option //アクターの特殊能力値のアイコンを登録
 * @option this.mmcSetActorSParamIcons([0,1,2,3,4,5,6,7,8,9]);
 * @option >> アイコンindex を対象ステータスに登録します。
 * @option >> 表示させない場合は、0 を指定。
 * @option >> 0:狙われ率
 * @option >> 1:防御効果率
 * @option >> 2:回復効果率
 * @option >> 3:薬の知識
 * @option >> 4:MP消費率
 * @option >> 5:TPチャージ率
 * @option >> 6:物理ダメージ率
 * @option >> 7:魔法ダメージ率
 * @option >> 8:床ダメージ率
 * @option >> 9:経験値獲得率
 * @option >> ※この登録は特殊能力値を描画するスクリプトより上に配置してください。
 * @option >> [使用例] 
 * @option this.mmcSetActorSParamIcons([84,67,77,81,101,139,82,313,71,313,71]);
 * @option 
 * @option //アクターの特殊能力値を描画
 * @option this.mmcDrawActorSParam(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> paramId         : 描画するパラメータのIdを下記から選択してください 
 * @option >>                   0:狙われ率
 * @option >>                   1:防御効果率
 * @option >>                   2:回復効果率
 * @option >>                   3:薬の知識
 * @option >>                   4:MP消費率
 * @option >>                   5:TPチャージ率
 * @option >>                   6:物理ダメージ率
 * @option >>                   7:魔法ダメージ率
 * @option >>                   8:床ダメージ率
 * @option >>                   9:経験値獲得率
 * @option >>                   また [0,1,2,3,4,5,6,7,8,9] のように指定すると、
 * @option >>                   左から順に連続描画します。
 * @option >> showLabel       : 対象パラメータのラベルを true:表示 / false:非表示
 * @option >> useIcon         : 登録された特殊能力値のアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> equipChangeMode : 装備変更時の比較モードを true:使用する / false:使用しない
 * @option >> arrow           : 装備変更時の比較モードを使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※装備比較データを受け取った際に、描画させるかを指定できるように
 * @option >>                     装備ステータス専用に this.getCompareEquipter() を用意しました。
 * @option >>                     showScript であれば、他の描画スクリプトにも使用できます。
 * @option >>                     ➡装備変更時にステータス比較データを受け取った際、true になり、
 * @option >>                       受け取っていない場合は、false を返します。
 * @option >>                       !this.getCompareEquipter() と記述すると結果が反転し、
 * @option >>                       true が false に false が true の結果を返します。
 * @option >>                       下記使用例をご参考ください。
 * @option >> [使用例] 連続描画で特殊能力値すべてを描画する際、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorSParam(index,[0,1,2,3,4,5,6,7,8,9],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 連続描画で特殊能力値の回復効果率とMP消費率のみ描画し、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorSParam(index,[2,4],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 特殊能力値の狙われ率のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、非表示にする
 * @option this.mmcDrawActorSParam(index,0,true,false,0,42,0,-40,0,16,16,true,"➡",!this.getCompareEquipter());
 * @option >> [使用例] 特殊能力値の防御効果率のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、表示にする
 * @option this.mmcDrawActorSParam(index,1,true,false,0,42,0,-40,0,16,16,true,"➡",this.getCompareEquipter());
 * @option 
 * @option //アクターの属性有効値のアイコンを登録
 * @option this.mmcSetActorEParamIcons([0,1,2,3,4,5,6,7,8...]);
 * @option >> アイコンindex を対象ステータスに登録します。
 * @option >> 表示させない場合は、0 を指定。
 * @option >> 0:物理
 * @option >> 1:炎
 * @option >> 2:氷
 * @option >> 3:雷
 * @option >> 4:水
 * @option >> 5:土
 * @option >> 6:風
 * @option >> 7:光
 * @option >> 8:闇
 * @option >> ※この設定はデフォルトでの設定です。
 * @option >>   データベースのタイプタブにある属性リストを上から順に
 * @option >>   0..1..2..3... と Id が割り振られております。
 * @option >> ※この登録は属性有効値を描画するスクリプトより上に配置してください。
 * @option >> [使用例] 
 * @option this.mmcSetActorEParamIcons([84,67,77,81,101,139,82,313]);
 * @option 
 * @option //アクターの属性有効値を描画
 * @option this.mmcDrawActorEParam(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> paramId         : 描画するパラメータのIdを下記から選択してください 
 * @option >>                   0:物理
 * @option >>                   1:炎
 * @option >>                   2:氷
 * @option >>                   3:雷
 * @option >>                   4:水
 * @option >>                   5:土
 * @option >>                   6:風
 * @option >>                   7:光
 * @option >>                   8:闇
 * @option >>                   ※この設定はデフォルトでの設定です。
 * @option >>                     データベースのタイプタブにある属性リストを上から順に
 * @option >>                     0..1..2..3... と Id が割り振られております。
 * @option >>                   また [0,1,2,3,4,5,6,7,8] のように指定すると、
 * @option >>                   左から順に連続描画します。
 * @option >> showLabel       : 対象パラメータの属性名ラベルを true:表示 / false:非表示
 * @option >> useIcon         : 登録された属性有効値のアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> equipChangeMode : 装備変更時の比較モードを true:使用する / false:使用しない
 * @option >> arrow           : 装備変更時の比較モードを使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※装備比較データを受け取った際に、描画させるかを指定できるように
 * @option >>                     装備ステータス専用に this.getCompareEquipter() を用意しました。
 * @option >>                     showScript であれば、他の描画スクリプトにも使用できます。
 * @option >>                     ➡装備変更時にステータス比較データを受け取った際、true になり、
 * @option >>                       受け取っていない場合は、false を返します。
 * @option >>                       !this.getCompareEquipter() と記述すると結果が反転し、
 * @option >>                       true が false に false が true の結果を返します。
 * @option >>                       下記使用例をご参考ください。
 * @option >> [使用例] 連続描画で属性有効値すべてを描画する際、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorEParam(index,[0,1,2,3,4,5,6,7,8],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 連続描画で属性有効値の氷属性と水属性のみ描画し、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorEParam(index,[2,4],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 属性有効値の物理属性のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、非表示にする
 * @option this.mmcDrawActorEParam(index,0,true,false,0,42,0,-40,0,16,16,true,"➡",!this.getCompareEquipter());
 * @option >> [使用例] 属性有効値の炎属性のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、表示にする
 * @option this.mmcDrawActorEParam(index,1,true,false,0,42,0,-40,0,16,16,true,"➡",this.getCompareEquipter());
 * @option 
 * @option //アクターのステート有効度を描画
 * @option this.mmcDrawActorSrParam(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> paramId         : 描画するパラメータのIdを下記から選択してください 
 * @option >>                   1:戦闘不能
 * @option >>                   2:防御
 * @option >>                   3:不死身
 * @option >>                   4:毒
 * @option >>                   5:暗闇
 * @option >>                   6:沈黙
 * @option >>                   7:激昂
 * @option >>                   8:混乱
 * @option >>                   9:魅了
 * @option >>                   10:睡眠
 * @option >>                   ※この設定はデフォルトでの設定です。
 * @option >>                     データベースのステートタブにあるステートリストの
 * @option >>                     ステートId で指定します。0 はありません。
 * @option >>                   また [1,2,3,4,5,6,7,8,9,10] のように指定すると、
 * @option >>                   左から順に連続描画します。
 * @option >> showLabel       : 対象パラメータの属性名ラベルを true:表示 / false:非表示
 * @option >> useIcon         : ステートのアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> equipChangeMode : 装備変更時の比較モードを true:使用する / false:使用しない
 * @option >> arrow           : 装備変更時の比較モードを使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※装備比較データを受け取った際に、描画させるかを指定できるように
 * @option >>                     装備ステータス専用に this.getCompareEquipter() を用意しました。
 * @option >>                     showScript であれば、他の描画スクリプトにも使用できます。
 * @option >>                     ➡装備変更時にステータス比較データを受け取った際、true になり、
 * @option >>                       受け取っていない場合は、false を返します。
 * @option >>                       !this.getCompareEquipter() と記述すると結果が反転し、
 * @option >>                       true が false に false が true の結果を返します。
 * @option >>                       下記使用例をご参考ください。
 * @option >> [使用例] 連続描画でステート有効度すべてを描画する際、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorSrParam(index,[1,2,3,4,5,6,7,8,9,10],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 連続描画でステート有効度の防御と毒のみ描画し、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorSrParam(index,[2,4],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] ステート有効度の戦闘不能のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、非表示にする
 * @option this.mmcDrawActorSrParam(index,1,true,false,0,42,0,-40,0,16,16,true,"➡",!this.getCompareEquipter());
 * @option >> [使用例] ステート有効度の防御のみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、表示にする
 * @option this.mmcDrawActorSrParam(index,2,true,false,0,42,0,-40,0,16,16,true,"➡",this.getCompareEquipter());
 * @option 
 * @option //アクターの弱体有効度値を描画
 * @option this.mmcDrawActorDebuffParam(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> paramId         : 描画するパラメータのIdを下記から選択してください 
 * @option >>                   0:最大HP 弱体有効度
 * @option >>                   1:最大MP 弱体有効度
 * @option >>                   2:攻撃力 弱体有効度
 * @option >>                   3:防御力 弱体有効度
 * @option >>                   4:魔法力 弱体有効度
 * @option >>                   5:魔法防御力 弱体有効度
 * @option >>                   6:敏捷性 弱体有効度
 * @option >>                   7:運 弱体有効度
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   左から順に連続描画します。
 * @option >> showLabel       : 対象パラメータのラベルを true:表示 / false:非表示
 * @option >> useIcon         : 登録された弱体有効度値のアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> equipChangeMode : 装備変更時の比較モードを true:使用する / false:使用しない
 * @option >> arrow           : 装備変更時の比較モードを使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※装備比較データを受け取った際に、描画させるかを指定できるように
 * @option >>                     装備ステータス専用に this.getCompareEquipter() を用意しました。
 * @option >>                     showScript であれば、他の描画スクリプトにも使用できます。
 * @option >>                     ➡装備変更時にステータス比較データを受け取った際、true になり、
 * @option >>                       受け取っていない場合は、false を返します。
 * @option >>                       !this.getCompareEquipter() と記述すると結果が反転し、
 * @option >>                       true が false に false が true の結果を返します。
 * @option >>                       下記使用例をご参考ください。
 * @option >> [使用例] 連続描画で弱体有効度値すべてを描画する際、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorParam(index,[0,1,2,3,4,5,6,7],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 連続描画で弱体有効度値の攻撃力と魔法力のみ描画し、
 * @option >>          且つ、アイコンを表示する際
 * @option this.mmcDrawActorParam(index,[2,4],true,true,0,42,36,-40,0,16,16,true,"➡",true);
 * @option >> [使用例] 弱体有効度値の最大HPのみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、非表示にする
 * @option this.mmcDrawActorParam(index,0,true,false,0,42,0,-40,0,16,16,true,"➡",!this.getCompareEquipter());
 * @option >> [使用例] 弱体有効度値の最大MPのみ描画し、且つ、アイコンを表示せず、
 * @option >>          装備ステータス用比較データを受け取った際、表示にする
 * @option this.mmcDrawActorParam(index,1,true,false,0,42,0,-40,0,16,16,true,"➡",this.getCompareEquipter());
 * @option 
 * @option //アクター装備比較時、指定された変更があるステータスを収集し描画
 * @option this.mmcDrawActorChangedEquipStatus(index,[[param],[xparam],[sparam],[eparam],[srparam],[debuffParam]],showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,arrow,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> param           : 基本能力値区分の収集設定
 * @option >>                   [id] と指定します。
 * @option >>                   .:idリスト:.
 * @option >>                     0:最大HP
 * @option >>                     1:最大MP
 * @option >>                     2:攻撃力
 * @option >>                     3:防御力
 * @option >>                     4:魔法力
 * @option >>                     5:魔法防御力
 * @option >>                     6:敏捷性
 * @option >>                     7:運
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   収集能力値を追加します。
 * @option >>                   'all' と指定すると収集可能な該当のすべての能力値から収集します。
 * @option >> xparam           : 追加能力値区分の収集設定
 * @option >>                   [id] と指定します。
 * @option >>                   .:idリスト:.
 * @option >>                     0:命中率
 * @option >>                     1:回避率
 * @option >>                     2:会心率
 * @option >>                     3:会心回避率
 * @option >>                     4:魔法回避率
 * @option >>                     5:魔法反射率
 * @option >>                     6:反撃率
 * @option >>                     7:HP再生率
 * @option >>                     8:MP再生率
 * @option >>                     9:TP再生率
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   収集能力値を追加します。
 * @option >>                   'all' と指定すると収集可能な該当のすべての能力値から収集します。
 * @option >> sparam           : 特殊能力値区分の収集設定
 * @option >>                   [id] と指定します。
 * @option >>                   .:idリスト:.
 * @option >>                     0:狙われ率
 * @option >>                     1:防御効果率
 * @option >>                     2:回復効果率
 * @option >>                     3:薬の知識
 * @option >>                     4:MP消費率
 * @option >>                     5:TPチャージ率
 * @option >>                     6:物理ダメージ率
 * @option >>                     7:魔法ダメージ率
 * @option >>                     8:床ダメージ率
 * @option >>                     9:経験値獲得率
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   収集能力値を追加します。
 * @option >>                   'all' と指定すると収集可能な該当のすべての能力値から収集します。
 * @option >> eparam           : 属性有効値区分の収集設定
 * @option >>                   [id] と指定します。
 * @option >>                   .:idリスト:.
 * @option >>                     0:物理
 * @option >>                     1:炎
 * @option >>                     2:氷
 * @option >>                     3:雷
 * @option >>                     4:水
 * @option >>                     5:土
 * @option >>                     6:風
 * @option >>                     7:光
 * @option >>                     8:闇
 * @option >>                     ※この設定はデフォルトでの設定です。
 * @option >>                       データベースのタイプタブにある属性リストを上から順に
 * @option >>                       0..1..2..3... と Id が割り振られております。
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   収集能力値を追加します。
 * @option >>                   'all' と指定すると収集可能な該当のすべての能力値から収集します。
 * @option >> srparam          : ステート有効度区分の収集設定
 * @option >>                   [id] と指定します。
 * @option >>                   .:idリスト:.
 * @option >>                     1:戦闘不能
 * @option >>                     2:防御
 * @option >>                     3:不死身
 * @option >>                     4:毒
 * @option >>                     5:暗闇
 * @option >>                     6:沈黙
 * @option >>                     7:激昂
 * @option >>                     8:混乱
 * @option >>                     9:魅了
 * @option >>                     10:睡眠
 * @option >>                     ※この設定はデフォルトでの設定です。
 * @option >>                       データベースのステートタブにあるステートリストの
 * @option >>                       ステートId で指定します。0 はありません。
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   収集能力値を追加します。
 * @option >>                   'all' と指定すると収集可能な該当の能力値から収集します。
 * @option >> debuffParam      : 弱体有効度区分の収集設定
 * @option >>                   [id] と指定します。
 * @option >>                   .:idリスト:.
 * @option >>                     0:最大HP 弱体有効度
 * @option >>                     1:最大MP 弱体有効度
 * @option >>                     2:攻撃力 弱体有効度
 * @option >>                     3:防御力 弱体有効度
 * @option >>                     4:魔法力 弱体有効度
 * @option >>                     5:魔法防御力 弱体有効度
 * @option >>                     6:敏捷性 弱体有効度
 * @option >>                     7:運 弱体有効度
 * @option >>                   また [0,1,2,3,4,5,6,7] のように指定すると、
 * @option >>                   収集能力値を追加します。
 * @option >>                   'all' と指定すると収集可能な該当のすべての能力値から収集します。
 * @option >> showLabel       : 対象パラメータのラベルを true:表示 / false:非表示
 * @option >> useIcon         : 登録された各種能力値のアイコンを true:表示 / false:表示しない。
 * @option >> x               : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y               : y座標の調整値 指定しない場合は、0 を指定
 * @option >> h               : 連続描画指定した際に次の行への縦幅を指定します。
 * @option >>                   アイコンを使用する場合は、アイコンの高さが36なので、
 * @option >>                   これ以上で設定すると程よいです。
 * @option >>                   連続描画を指定しない場合は、0と指定してください。
 * @option >> iconX           : パラメータラベルからアイコンのx座標の調整値 指定しない場合は、0 と指定
 * @option >> paramX          : パラメータラベルから能力値のx座標の調整値
 * @option >>                   アイコンを表示する際は、iconX + paramX という計算を行います。
 * @option >>                   指定しない場合は、0 と指定
 * @option >> LabelSize       : 対象パラメータのラベルの文字サイズを指定。 デフォルトは 28 と指定
 * @option >> paramSize       : 能力値の文字サイズを指定。 矢印と変更値の文字サイズにも共通 デフォルトは 28 と指定
 * @option >> arrow           : 装備変更時の比較時に使用する際、変化の印として使用する矢印
 * @option >>                   デフォルトは "→" と指定
 * @option >> showScript      : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >>                   ※このスクリプトコマンドは、比較データを受け取るまでは
 * @option >>                     描画されません。
 * @option >> [使用例] すべての変更されるステータス値を表示し
 * @option >>          且つ、それぞれにアイコンを表示する際
 * @option this.mmcDrawActorChangedEquipStatus(index,['all','all','all','all','all','all'],true,true,0,42,36,-40,0,16,16,"➡",true);
 * @option >> [使用例] 弱体有効度値の攻撃力と魔法力のみ描画し、
 * @option >>          且つ、それぞれにアイコンを表示する際
 * @option this.mmcDrawActorChangedEquipStatus(index,[[],[],[],[],[],[2,4]],true,true,0,42,36,-40,0,16,16,"➡",true);
 * @option >> [使用例] 弱体有効度値の最大HPのみ描画し、且つ、アイコンを表示しない
 * @option this.mmcDrawActorChangedEquipStatus(index,[[],[],[],[],[],[0]],true,false,0,42,36,-40,0,16,16,"➡",true);
 * @option 
 * @option //アクターの装備品を描画
 * @option this.mmcDrawActorEquip(index,slotId,emptyName,showLabel,showIcon,x,y,equipNameX,LabelSize,nameSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> slotId     : 描画する装備スロットId
 * @option >> emptyName  : 未装備時に代わりに表示する文字 指定しない場合は、"" と指定
 * @option >> showLabel  : スロット名を true:表示 / false:非表示
 * @option >> showIcon   : 装備品のアイコンを true:表示 / false:非表示
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> equipNameX : 装備中の装備品名のx座標の調整値 デフォルトは 138 と指定
 * @option >> LabelSize  : スロット名のサイズを指定。 デフォルトは 28 と指定
 * @option >> nameSize   : 装備中の装備品名のサイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アクターバストアップイラストを描画
 * @option this.mmcDrawBustIllust(index,picName,useHpRate,x,y,w,h,op,anchor,battle,showScript,showBustSize);
 * @option >> [リスト型時] index は変更しないでください。
 * @option >> [自由型時] index をIdで管理することができ、複数のアクターバストアップイラストを扱うことができます。 idは 0...1...2...3... と指定してください。
 * @option >> picName      : 画像名を "" で指定します。
 * @option >> useHpRate    : HP割合差分を true:有効 / false:無効
 * @option >> x            : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y            : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w            : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h            : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op           : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor       : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> battle       : バトルメンバーと待機メンバーの区別機能を true:使用する / false:使用しない
 * @option >> showScript   : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >> showBustSize : コンソールにバストアップイラストのぴったり縦横幅を true:計算して表示する / false:なにもしない
 * @option >> ※showBustSize は、負荷すこしかかるため、確認し終えたら、false に切り替えてください。
 * @option >> img/m_menu/ 内の picName + アクターID で対象の画像を読み込みます。
 * @option >> HP割合差分を使用する場合は、 下記の画像を img/m_menu/ 内に準備してください。
 * @option >>   HPが100%の時 picName + アクターID _100
 * @option >>   HPが50%の時 picName + アクターID _50
 * @option >>   HPが25%の時 picName + アクターID _20
 * @option >>   HPが0%の時 picName + アクターID _0
 * @option 
 * @option -----------[要別途:Sp貯蓄式スキルMV]-----------
 * @option -----------[参照するデータ: $gameParty.○○ または $gameActors.○○ 専用]-----------
 * @option //アクターのSP(数字)を描画
 * @option this.mmcDrawActorSp(index,x,y,spNumX,spSize,spNumSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> spNumX     : SP数字のx座標の調整値 デフォルトは 186 と指定
 * @option >> spSize     : SP文字サイズを指定。 デフォルトは 28 と指定
 * @option >> spNumSize  : SP文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[要別途:エロRPG制作キットMV]-----------
 * @option -----------[参照するデータ: $gameParty.○○ または $gameActors.○○ 専用]-----------
 * @option //アクター専用変数を描画
 * @option this.mmcDrawActorVariables(index,vId,showLabel,x,y,lX,lY,vX,vY,labelSize,labelColor,valueSize,valueColor,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> vId        : 作成された変数Idを指定 ※作成されていない場合、描画しません。
 * @option >> showLabel  : 変数名を true:表示 / false:非表示
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> lX         : 変数名のx座標の調整値 指定しない場合は、0 を指定
 * @option >> lY         : 変数名のy座標の調整値 指定しない場合は、0 を指定
 * @option >> vX         : 変数値のx座標の調整値 指定しない場合は、0 を指定
 * @option >> vY         : 変数値のy座標の調整値 指定しない場合は、0 を指定
 * @option >> labelSize  : 変数名の文字サイズを指定。 デフォルトは 28 と指定
 * @option >> labelColor : 変数名のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#84aaff' と指定。
 * @option >> valueSize  : 変数値の文字サイズを指定。 デフォルトは 28 と指定
 * @option >> valueColor : 変数値のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#ffffff' と指定。
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アニメーションアクターを描画
 * @option this.mmcDrawAegActor(index,poseId,playMode,playSpeed,customStartFrame,customEndFrame,mirror,x,y,w,h,op,battle,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> poseId           : エロRPG制作キットMVにて作成したポーズフォルダのIdを指定
 * @option >> playMode         : 再生モードを ''(シングルクォート)で指定 'loop' : ループ再生 'once' : 片道再生 'stop' : 停止
 * @option >> playSpeed        : 再生速度をエロRPG制作キットMV指定の数値で指定 デフォルトは、1 を指定
 * @option >> customStartFrame : アニメーション開始フレーム番号を指定 'continue' と指定すると読み込まれた最初のフレームが指定されます
 * @option >> customEndFrame   : アニメーション終了フレーム番号を指定 'end' と指定すると読み込まれた最後のフレームが指定されます
 * @option >> mirror           : 画像を true:反転 / false:反転しない
 * @option >> x                : 画像のx座標の調整値 指定しない場合は、0 を指定
 * @option >> y                : 画像のy座標の調整値 指定しない場合は、0 を指定
 * @option >> w                : 画像横幅の倍率を指定 デフォルトは、100 を指定
 * @option >> h                : 画像縦幅の倍率を指定 デフォルトは、100 を指定
 * @option >> op               : 画像の不透明度を指定 デフォルトは、255 を指定
 * @option >> battle           : バトルメンバーと待機メンバーの区別機能を true:使用する / false:使用しない
 * @option >> showScript       : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ: :actorEquips 専用]-----------
 * @option //対象アクターの装備情報を描画
 * @option this.mmcDrawEquipSlots(index,emptyName,showLabel,showIcon,x,y,equipNameX,LabelSize,nameSize,showScript);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> emptyName  : 装備なしの状態の表記を指定 デフォルトは、"---" と指定
 * @option >> showLabel  : スロット名を true:表示する / false:表示しない
 * @option >> showIcon   : 装備品のアイコンを true:表示する / false:表示しない
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> equipNameX : 装備品名の表示x座標をスロット名から調整します。-(マイナス)指定可。
 * @option >> LabelSize  : スロット名の文字サイズを指定。デフォルトは 28 と指定
 * @option >> nameSize   : 装備品名の文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ: $gameTroop.○○ 専用]-----------
 * @option //敵名を描画
 * @option this.mmcDrawEnemyName(index,x,y,fontSize);
 * @option >> index は変更しないでください。※自由型でもそのまま扱えます。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option -----------[参照するデータ :customPictureList [["pic"]], vId 専用]-----------
 * @option //[リスト型専用]ピクチャーリストを描画
 * @option this.mmcDrawPictureList(index,x,y,w,h,op,anchor,showScript);
 * @option >> index は変更しないでください。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h          : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op         : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor     : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //[自由型専用]ピクチャーリストを描画
 * @option this.mmcDrawPictureListFree(picId,x,y,w,h,op,anchor,showScript);
 * @option >> picId      : リスト内のピクチャーを左から 0...1...2... と指定します。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h          : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op         : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor     : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @default []
 * @desc リスト番号が大きいほど手前に描画されます。
 */

//=============================================================================
//  【MainMenuCommandCursorLists】
//=============================================================================

/*~struct~MainMenuCommandCursorLists:
 * @param cursorAction
 * @text カーソル動作
 * @type select
 * @option デフォルト
 * @value default
 * @option カーソルアクション
 * @value cursorAction
 * @option 操作無効
 * @value none
 * @default default
 * @desc カーソル動作を指定します。デフォルトは通常通りのカーソル動作を行います。
 *
 * @param callType
 * @text カーソル参照方法
 * @type select
 * @option シーンの呼び出し
 * @value callScene
 * @option コモンイベントの起動
 * @value commonEvent
 * @option ウィンドウへ接続
 * @value activateWindow
 * @option 特殊コマンド
 * @value functionCommand
 * @default callScene
 * @desc カーソルの参照方法を指定し、該当のカーソル参照名の記述方法はカーソル参照名のプルダウンに記載しています。
 * 
 * @param commandTypeName
 * @text カーソル参照名
 * @type combo[]
 * @option -----------[スクリプト集]-----------
 * @option [目次]
 * @option >> カーソル参照方法が「シーンの呼び出し」専用
 * @option >> コマンド参照方法が「コモンイベントの起動」専用
 * @option >> コマンド参照方法が「コモンイベントの起動」専用
 * @option >> コマンド参照方法が「ウィンドウへ接続」専用
 * @option >> コマンド参照方法が「特殊コマンド」専用
 * @option >> [*] アクター戻り :previousActor
 * @option >> [*] アクター送り :nextActor
 * @option >> [*] アクター並び替えモード :formation
 * @option >> [*] 指定ウィンドウのx座標を変更 :windowSetX
 * @option >> [*] 指定ウィンドウのy座標を変更 :windowSetY
 * @option >> [*] 指定ウィンドウの横幅を変更 :windowSetWidth
 * @option >> [*] 指定ウィンドウの縦幅を変更 :windowSetHeight
 * @option >> [*] 指定ウィンドウのページを変更 :windowSetPage
 * @option >> [*] 指定ウィンドウの一番上の列に表示項目の座標を変更 :windowSetTopRow
 * @option >> [*] 決定/キャンセルキー限定でハンドラーの呼び出し :callHandler
 * @option >> [*] 常時ダッシュの設定 :alwaysDash
 * @option >> [*] コマンド記憶の設定 :commandRemember
 * @option >> [*] BGM音量設定 :bgmVolume
 * @option >> [*] BGS音量設定 :bgsVolume
 * @option >> [*] SE音量設定 :seVolume
 * @option >> [*] コマンド上で変数値を表示 :variable
 * @option >> [*] スイッチ操作 :switch
 * @option >> [*] スクリプトを実行 :scriptCommand
 * @option 
 * @option -----------[カーソル参照方法が「シーンの呼び出し」専用]-----------
 * @option Scene_Item //アイテムシーン ※直接呼び出すようにできていますので、カーソルの選択方法を直接呼び出しに設定してください。
 * @option Scene_Skill //スキルシーン ※アクター情報が必要なため、カーソルの選択方法を対象選択に設定し、[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Equip //装備シーン ※アクター情報が必要なため、カーソルの選択方法を対象選択に設定し、[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Status //ステータスシーン ※アクター情報が必要なため、カーソルの選択方法を対象選択に設定し、[対象選択]選択ウィンドウへ接続にてアクターデータのウィンドウへ接続してください。直接呼び出しに設定した場合、先頭のアクターが採用されます。
 * @option Scene_Options //オプションシーン ※直接呼び出すようにできていますので、カーソルの選択方法を直接呼び出しに設定してください。
 * @option Scene_Load //ロードシーン ※直接呼び出すようにできていますので、コマンドの選択方法を直接呼び出しに設定してください。
 * @option Scene_Save //セーブシーン ※直接呼び出すようにできていますので、機能の選択方法を直接呼び出しに設定してください。
 * @option Scene_GameEnd //ゲーム終了シーン ※直接呼び出すようにできていますので、カーソルの選択方法を直接呼び出しに設定してください。
 * @option Scene_QuestMenu //要別途プラグイン「高機能クエストシステム」 クエストメニューシーン ※直接呼び出すようにできていますので、カーソルの選択方法を直接呼び出しに設定してください。
 * @option 
 * @option [他作者様のプラグインからシーンを探す方法]
 * @option プラグインヘルプに記載されていることもありますが、
 * @option されていない場合は、プラグインの中身を直接開いて探すことになります。
 * @option SceneManager.push(○○○) という記述を探し、○○○ の部分を指定することで、
 * @option 他作者様のプラグインのメニュー等にアクセスできるようになります。
 * @option 
 * @option -----------[コマンド参照方法が「コモンイベントの起動」専用]-----------
 * @option コモンイベントId をコマンド参照名に指定することでコモンイベントを起動します。
 * @option 仕様としてマップシーンへ移動しますので、コモンイベント起動後にメインメニューに戻したい場合は、
 * @option 対象のコモンイベントの終りにスクリプトコマンドで SceneManager.push(Scene_Menu) と指定することで、
 * @option メインメニューに戻ることが可能です。
 * @option 
 * @option -----------[コマンド参照方法が「ウィンドウへ接続」専用]-----------
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option //アクター戻り
 * @option :previousActor
 * @option ※アクター共有情報のアクターを共有されたアクターから一つ前のパーティーアクターに切り替える。
 * @option 
 * @option //アクター送り
 * @option :nextActor
 * @option ※アクター共有情報のアクターを共有されたアクターから一つ後ろのパーティーアクターに切り替える。
 * @option 
 * @option //アクター並び替えモード
 * @option :formation
 * @option ※使用方法※ コマンドの選択方法を対象選択にし、[対象選択]選択ウィンドウへ接続にて指定されたウィンドウがアクターデータに限り、並び替えモードを展開させます。
 * @option 
 * @option //指定ウィンドウのx座標を変更する
 * @option :windowSetX targetWindow changeX
 * @option >> targetWindow : x座標を変更したいウィンドウ名 Window_○○ を指定します。
 * @option >> changeX      : x座標を指定します。また元のy座標に戻す場合は、'default' と指定。
 * @option >>                ※計算式も使用可能ですが式中は半角スペース禁止
 * @option >> <使用上の注意>
 * @option >> ウィンドウのx座標は、項目描画などの座標計算の影響を受けると、
 * @option >> リセットされますので必ず、下の方に設定してください。
 * @option >> [使用例] Window_NewWindow の x座標 を 50 にする場合
 * @option :windowSetX Window_NewWindow 50
 * @option >> [使用例] Window_NewWindow の x座標 を 元のx座標 に戻す場合
 * @option :windowSetX Window_NewWindow 'defualt'
 * @option 
 * @option //指定ウィンドウのy座標を変更する
 * @option :windowSetY targetWindow changeY
 * @option >> targetWindow : y座標を変更したいウィンドウ名 Window_○○ を指定します。
 * @option >> changeY      : y座標を指定します。また元のy座標に戻す場合は、'default' と指定。
 * @option >>                ※計算式も使用可能ですが式中は半角スペース禁止
 * @option >> <使用上の注意>
 * @option >> ウィンドウのy座標は、項目描画などの座標計算の影響を受けると、
 * @option >> リセットされますので必ず、下の方に設定してください。
 * @option >> [使用例] Window_NewWindow の y座標 を 50 にする場合
 * @option :windowSetY Window_NewWindow 50
 * @option >> [使用例] Window_NewWindow の y座標 を 元のx座標 に戻す場合
 * @option :windowSetY Window_NewWindow 'defualt'
 * @option 
 * @option //指定ウィンドウの横幅を変更する
 * @option :windowSetWidth targetWindow changeW
 * @option >> targetWindow : 横幅を変更したいウィンドウ名 Window_○○ を指定します。
 * @option >> changeW      : 横幅を指定します。また元の横幅に戻す場合は、'default' と指定。
 * @option >>                ※計算式も使用可能ですが式中は半角スペース禁止
 * @option >> <使用上の注意>
 * @option >> ウィンドウの横幅は、項目描画などの座標計算に使用されますので、
 * @option >> 必ず、上の方に設定してください。
 * @option >> [使用例] Window_NewWindow の 横幅 を 50 にする場合
 * @option :windowSetWidth Window_NewWindow 25+25
 * @option >> [使用例] Window_NewWindow の 横幅 を 元の横幅 に戻す場合
 * @option :windowSetWidth Window_NewWindow 'defualt'
 * @option 
 * @option //指定ウィンドウの縦幅を変更する
 * @option :windowSetHeight targetWindow changeH
 * @option >> targetWindow : 縦幅を変更したいウィンドウ名 Window_○○ を指定します。
 * @option >> changeH      : 縦幅を指定します。また元の縦幅に戻す場合は、'default' と指定。
 * @option >>                ※計算式も使用可能ですが式中は半角スペース禁止
 * @option >> <使用上の注意>
 * @option >> ウィンドウの縦幅は、項目描画などの座標計算に使用されますので、
 * @option >> 必ず、上の方に設定してください。
 * @option >> [使用例] Window_NewWindow の 縦幅 を 50 にする場合
 * @option :windowSetHeight Window_NewWindow 100-50
 * @option >> [使用例] Window_NewWindow の 縦幅 を 元の縦幅 に戻す場合
 * @option :windowSetHeight Window_NewWindow 'defualt'
 * @option 
 * @option //指定ウィンドウのページを変更する
 * @option :windowSetPage targetWindow page
 * @option >> targetWindow : ページを変更したいウィンドウ名 Window_○○ を指定します。
 * @option >> page         : ページを指定します。0 から始まりますので、
 * @option >>                1ページ目は、0 、2ページ目は、1 と続きます。
 * @option >> [使用例] Window_NewWindow の ページ を 3ページ目 にする場合
 * @option :windowSetPage Window_NewWindow 3
 * @option 
 * @option //指定ウィンドウの一番上の列に表示項目の座標を変更する
 * @option :windowSetTopRow targetWindow fromWindow function
 * @option >> targetWindow : 表示項目の座標を変更したいウィンドウ名 Window_○○ を指定します。
 * @option >> fromWindow   : 受け取りたい情報のウィンドウ名 Window_○○ を指定します。
 * @option >>              : 表示項目を変更したウィンドウの表示項目座標を
 * @option >>                元に戻す場合は、none と指定します。
 * @option >> function     : 受け取る情報の指定をします。
 * @option >>                index : 受け取りたい情報ウィンドウの項目Id
 * @option >>                default : 表示項目を変更したウィンドウの表示項目座標を
 * @option >>                          元に戻す場合に指定します。
 * @option >> [使用例] Window_NewWindow の 表示項目座標 を 自身の項目 に変更する場合
 * @option :windowSetTopRow Window_NewWindow Window_NewWindow index
 * @option >> [使用例] Window_NewWindow の 表示項目座標 を Window_SubWindow の項目 に変更する場合
 * @option :windowSetTopRow Window_NewWindow Window_SubWindow index
 * @option >> [使用例] Window_NewWindow の 変更した表示項目座標 を元に戻す場合
 * @option :windowSetTopRow Window_NewWindow none default
 * @option 
 * @option //ウィンドウの決定/キャンセルキー限定でハンドラーの呼び出し
 * @option :callHandler
 * @option >> 各ウィンドウ設定のカーソル/ボタン挙動の設定にある
 * @option >> 決定キーとキャンセルキーのカーソル動作を カーソルアクション と指定した際、
 * @option >> デフォルトのハンドラー機能を無効化しております。
 * @option >> そのため、ウィンドウ基本設定にある「ウィンドウのキャンセル挙動」等を
 * @option >> 使用する際は、カーソル参照名リストの一番下に指定してください。
 * @option >> 他のカーソルキーに指定してもなにも起きません。
 * @option 
 * @option //常時ダッシュの設定
 * @option :alwaysDash
 * @option 
 * @option //コマンド記憶の設定
 * @option :commandRemember
 * @option 
 * @option //BGM音量設定
 * @option :bgmVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //BGS音量設定
 * @option :bgsVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //ME音量設定 
 * @option :meVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //SE音量設定
 * @option :seVolume volume
 * @option volume : 音量増加量を数値で指定します。
 * @option 
 * @option //コマンド上で変数値を表示します。
 * @option :variable Id asLabel
 * @option Id      : 変数Id を指定します。
 * @option asLabel : true:コマンド名として表示 / false: コマンド内容として表示 を指定します。
 * @option ※変数値を表示するだけでなにも起きません。
 * @option 
 * @option //スイッチ操作をコマンド上で行えるようになります。
 * @option :switch Id enable
 * @option Id     : スイッチId を指定します。
 * @option enable : true:操作可 / false: 操作不可 を指定します。
 * @option 
 * @option //対象コマンド操作時にスクリプトを実行します。
 * @option :scriptCommand script, enableScript
 * @option script       : 実行するスクリプトを記述します。
 * @option enableScript : true:操作可 / false: 操作不可 か 操作条件のスクリプトを指定します。
 * @option 
 * @option -----------:scriptCommand script, enableScript の使用例-----------
 * @option //スイッチ15番がONの時、OFFに設定する。条件スクリプトに true/false のみを扱うスクリプトに限り、次のように指定すると trueの場合と判定できます。
 * @option :scriptCommand $gameSwitches.setValue(15,false), $gameSwitches.value(15)
 * @option 
 * @option //スイッチ15番がOFFの時、ONに設定する。条件スクリプトの頭に ! をつけると値を反転するという意味になります。この場合、OFFの時と判定。
 * @option :scriptCommand $gameSwitches.setValue(15,true), !$gameSwitches.value(15)
 * @option 
 * @option //変数20番が "明日" の時、"今日" に設定する。
 * @option :scriptCommand $gameVariables.setValue(20,"今日"), $gameVariables.value(20) === "明日"
 * @option 
 * @option //変数20番の値が 20 以下の時、5ずつ増加する。
 * @option :scriptCommand $gameMap._interpreter.operateVariable(20,1,5), $gameVariables.value(20) <= 20
 * @option 
 * @option //変数20番の値が 20 以上の時、5ずつ減算する。
 * @option :scriptCommand $gameMap._interpreter.operateVariable(20,2,5), $gameVariables.value(20) >= 20
 * @option 
 * @option //変数20番の値が 20 未満の時、5を代入する。
 * @option :scriptCommand $gameVariables.setValue(20,5), $gameVariables.value(20) < 20
 * @option 
 * @option //変数20番の値が 20 以外の時、20を代入する。
 * @option :scriptCommand $gameVariables.setValue(20,20), $gameVariables.value(20) !== 20
 * @option 
 * @option //要別途プラグイン「高機能クエストシステム」導入中ですべてのクエストを初期化する
 * @option :scriptCommand Ayatam.QUEST.resetAllQuest(), true
 * @option 
 * @default 
 * @desc カーソル参照方法に基づいてカーソル参照名を指定します。
 * 
 * @param commandEnableSwitch
 * @text カーソル使用スイッチ
 * @type switch
 * @default 0
 * @desc 指定スイッチがonの場合、コマンドを使用可能にする。なしの場合、常時使用可能。
 * 
 * @param commandTargetType
 * @text カーソルの選択方法
 * @type select
 * @option 直接呼び出し
 * @value callDirectly
 * @option 対象選択
 * @value targetSelection
 * @default callDirectly
 * @desc コマンドの選択方法を指定します。
 * 
 * @param targetWindowName
 * @text [対象選択]選択時接続ウィンドウ
 * @type combo
 * @option none //使用しない
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate // , で区切ることで複数指定可
 * @option Window_MmcMenuStatus:deactivate // 付属子 :activate (操作対象) :deactivate (非操作対象) を追加することでアクセス状況の指定可
 * @option Window_MmcMenuStatus // 付属子を指定しない場合は、対象を :activate(操作対象) と判定します。
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option Window_MmcMenuStatus:activate,Window_PlayTime:deactivate //コマンド参照名が :formation の場合に一番左に指定されているウィンドウを並び替えモード展開の対象にします。
 * @option 
 * @default none //使用しない
 * @desc コマンドの選択方法が対象選択時に対象選択を行うウィンドウへ接続します。ウィンドウ名で指定。不要時は、none と記述。
 * 
 * @param commandEnableExt
 * @text カーソル使用特殊条件
 * @type combo
 * @option none //使用しない
 * @option 
 * @option -----------[スクリプト集]-----------
 * @option [目次]
 * @option >> コマンド参照方法が「シーンの呼び出し」専用
 * @option >> コマンド参照方法が「特殊コマンド」専用
 * @option 
 * @option -----------[コマンド参照方法が「シーンの呼び出し」専用]-----------
 * @option this.isSaveEnabled(); //コマンド参照名が Scene_Save の場合にセーブ可能かを判定します。
 * @option this.isGameEndEnabled(); //コマンド参照名が Scene_GameEnd の場合にゲーム終了可能かを判定します。
 * @option $gameQuest.canOpenQuestMenu(); //要別途プラグイン「高機能クエストシステム」 クエストメニュー使用条件
 * @option 
 * @option -----------[コマンド参照方法が「特殊コマンド」専用]-----------
 * @option this.isFormationEnabled(); //コマンド参照名が :formation の場合に並び替え可能かを判定します。
 * @option 
 * @default none //使用しない
 * @desc スクリプトコマンドによる特別使用可能条件の指定。必要ない場合は、none と記述してください。スイッチの方を優先します。
 */

//=============================================================================
//  【WindowSlideSetups】
//=============================================================================

/*~struct~WindowSlideSetups:
 * @param useSlide
 * @text スライド全体の使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc スライド機能を使用するかの指定をします。
 * 
 * @param openWindowSlide
 * @text [ウィンドウ][開]スライド
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを開く時のスライドを使用するかの指定をします。
 * 
 * @param closeWindowSlide
 * @text [ウィンドウ][閉]スライド
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを閉じる時のスライドを使用するかの指定をします。
 * 
 * @param windowSlideX
 * @text [ウィンドウ]スライド元x座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ウィンドウを開く時のスライド元x座標を指定します。x座標からの調整値です。- で左方向へ、+ で右方向へ調整。
 * 
 * @param windowSlideY
 * @text [ウィンドウ]スライド元y座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ウィンドウを開く時のスライド元y座標を指定します。y座標からの調整値です。- で上方向へ、+ で下方向へ調整。
 * 
 * @param windowSlideSpeedX
 * @text [ウィンドウ]スライド先x方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを開く時のスライド先x方向に向けてのスライド速度を指定します。閉じる際にも使用されます。
 * 
 * @param windowSlideSpeedY
 * @text [ウィンドウ]スライド先y方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを開く時のスライド先y方向に向けてのスライド速度を指定します。閉じる際にも使用されます。
 * 
 * @param useOpenDataSlide
 * @text [データ][開]スライドを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを開く時のデータのスライドを使用するかの指定をします。
 * 
 * @param useOpenSlideDataDelay
 * @text [データ全体][開]スライド遅延時間を使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを開く時のデータ全体のスライドを使用するかの指定をします。
 * 
 * @param openSlideDataDelay
 * @text [データ全体][開]スライド遅延時間
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを開く時のデータ全体のスライド開始時間を指定します。
 * 
 * @param dataOpenSlide
 * @text [データ毎][開]スライド遅延時間を使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを開く時のデータ毎スライドを使用するかの指定をします。
 * 
 * @param dataOpenSlideDelay
 * @text [データ毎][開]スライド遅延時間
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを開く時のデータ毎スライド開始時間を指定します。
 * 
 * @param useCloseDataSlide
 * @text [データ][閉]スライドを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを閉じる時のデータのスライドを使用するかの指定をします。
 * 
 * @param useCloseSlideDataDelay
 * @text [データ全体][閉]スライド遅延時間を使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを閉じる時のデータ全体のスライドを使用するかの指定をします。
 * 
 * @param closeSlideDataDelay
 * @text [データ全体][閉]スライド遅延時間
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを閉じる時のデータ全体のスライド開始時間を指定します。
 * 
 * @param dataCloseSlide
 * @text [データ毎][閉]スライド遅延時間を使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ウィンドウを閉じる時のデータ毎スライドを使用するかの指定をします。
 * 
 * @param dataCloseSlideDelay
 * @text [データ毎][閉]スライド遅延時間
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを閉じる時のデータ毎スライド開始時間を指定します。
 * 
 * @param dataSlideX
 * @text [データ]スライド元x座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ウィンドウを開く時のデータスライド元x座標を指定します。x座標からの調整値です。- で左方向へ、+ で右方向へ調整。
 * 
 * @param dataSlideY
 * @text [データ]スライド元y座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ウィンドウを開く時のデータスライド元y座標を指定します。y座標からの調整値です。- で上方向へ、+ で下方向へ調整。
 * 
 * @param dataSlideSpeedX
 * @text [データ]スライド先x方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを開く時のデータスライド先x方向に向けてのスライド速度を指定します。閉じる際にも使用されます。
 * 
 * @param dataSlideSpeedY
 * @text [データ]スライド先y方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc ウィンドウを開く時のデータスライド先y方向に向けてのスライド速度を指定します。閉じる際にも使用されます。
 */

//=============================================================================
//  【DesignCommandListType】
//=============================================================================

/*~struct~DesignCommandListType:
 * @param targetName
 * @text 連携名
 * @type string
 * @desc このデザインを適応するコマンド名。例: アイテムコマンドの場合、アイテム と記述します。
 * 
 * @param commandDrawList
 * @text 描画するデータリスト
 * @type combo[]
 * @option -----------[描画スクリプト集]-----------
 * @option 
 * @option //コマンド情報のコマンド名を描画
 * @option this.mmcDrawCommandName(showName,x,y,fontSize,showScript);
 * @option >> showName   : コマンド名を true:表示 / false:非表示
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //自由テキストを描画 ※制御文字使用不可
 * @option this.mmcDrawText(id,text,x,y,color,fontSize,algin,showScript);
 * @option >> id         : id を指定して複数のテキストを管理することが可能です。デフォルトは、0 です。
 * @option >> text       : テキストを ""(ダブルクォート)で囲んで指定
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> color      : カラーコードを ''(シングルクォート)で囲んでラインの色を指定。デフォルトは '#ffffff' と指定。
 * @option >> fontSize   : 文字サイズを指定。 デフォルトは 28 と指定
 * @option >> algin      : 文字整列方法を ''(シングルクォート)で囲んで指定 左寄せ:'left' 中央寄せ:'center' 右寄せ:'right'
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //アイコンを描画
 * @option this.mmcDrawIcon(id,iconIndex,x,y,showScript);
 * @option >> id         : id を指定して複数のアイコンを管理することが可能です。デフォルトは、0 です。
 * @option >> iconIndex  : アイコンindexを指定。 表示しない場合は、0 を指定
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //歩行グラを描画
 * @option this.mmcDrawCharacter(id,characterName,characterIndex,x,y,showScript);
 * @option >> id             : id を指定して複数のアイコンを管理することが可能です。デフォルトは、0 です。
 * @option >> characterName  : 歩行グラ名を ""(ダブルクォート)で囲んで指定
 * @option >> characterIndex : 歩行グラindexを指定します。 
 * @option >> x              : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y              : y座標の調整値 指定しない場合は、0 を指定
 * @option >> showScript     : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //変数の値を描画
 * @option >> this.mmcDrawVariables(id,vId,x,y,valueSize,valueColor,align,showScript);
 * @option >> id         : id を指定して複数の変数を管理することが可能です。デフォルトは、0 です。
 * @option >> vId        : 変数Idを指定
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> valueSize  : 変数値の文字サイズを指定。 デフォルトは 28 と指定
 * @option >> valueColor : 変数値のカラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#ffffff' と指定。
 * @option >> align      : 文字寄せを ''(シングルクォート)で囲んで指定。 右寄せ:'right' 中央寄せ:'center' 左寄せ:'left'
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //項目用ラインを描画
 * @option this.mmcDrawItemLine(id,x,y,w,color,op,showScript);
 * @option >> id         : id を指定して複数の項目ラインを管理することが可能です。デフォルトは、0 です。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅を指定 指定しない場合は、0 を指定
 * @option >> color      : カラーコードを ''(シングルクォート)で囲んでラインの色を指定。デフォルトは '#84aaff' と指定。
 * @option >> op         : 不透明度を指定。デフォルトは 255 と指定。0:255
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //項目用の背景を描画
 * @option this.mmcDrawItemBackground(id,x,y,w,h,color,op,showScript);
 * @option >> id         : id を指定して複数の項目用背景を管理することが可能です。デフォルトは、0 です。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅を指定 指定しない場合は、0 を指定
 * @option >> h          : 縦幅を指定 指定しない場合は、0 を指定
 * @option >> color      : カラーコードを ''(シングルクォート)で囲んで背景の色を指定。デフォルトは '#000000' と指定。
 * @option >> op         : 不透明度を指定。デフォルトは 167 と指定。0:255
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option 
 * @option //ピクチャーを描画
 * @option this.mmcDrawPicture(id,picName,x,y,w,h,op,anchor,showScript);
 * @option >> id         : id を指定して複数のピクチャーを管理することが可能です。デフォルトは、0 です。
 * @option >> picName    : 画像名を "" で指定します。
 * @option >> x          : x座標の調整値 指定しない場合は、0 を指定
 * @option >> y          : y座標の調整値 指定しない場合は、0 を指定
 * @option >> w          : 横幅の調整値 指定しない場合は、0 を指定
 * @option >> h          : 縦幅の調整値 指定しない場合は、0 を指定
 * @option >> op         : 画像の不透明度 0:255 デフォルトは 255 と指定
 * @option >> anchor     : 画像の中心を true:画像中央に / false:画像の左上に
 * @option >> showScript : スクリプトを用いて表示条件を指定します。例 $gameSwitches.value(15) と指定すると スイッチId:15番がONの時のみになります。デフォルトは true と指定。
 * @option >> img/m_menu/ 内の picName で対象の画像を読み込みます。
 * @option 
 * @default []
 * @desc リスト番号が大きいほど手前に描画されます。
 * @desc コマンド名の表示の設定を行います。
 *
 * @param ajustX
 * @text x座標の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc x座標の調整値。 -(マイナス)の指定可。
 *
 * @param ajustY
 * @text y座標の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc y座標の調整値。 -(マイナス)の指定可。
 *
 * @param ajustW
 * @text 横幅の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc コマンドの横幅の調整値。 -(マイナス)の指定可。
 *
 * @param ajustH
 * @text 縦幅の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc コマンドの横幅の調整値。 -(マイナス)の指定可。
 *
 * @param touchW
 * @text クリック/タッチ判定の横幅
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc コマンドのクリック/タッチ判定を行う横幅。0 はコマンドの左端です。
 * 
 * @param touchH
 * @text クリック/タッチ判定の縦幅
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc コマンドのクリック/タッチ判定を行う縦幅。0 はコマンドの上端です。
 * 
 * @param touchProcess
 * @text クリック/タッチ判定の挙動
 * @type select
 * @option 1度目選択状態・2度目実行
 * @value default
 * @option 1度目から実行
 * @value touchOnce
 * @default default
 * @desc コマンドをクリック/タッチした際の挙動。
 * 
 * @param touchPreview
 * @text クリック/タッチ範囲のプレビュー
 * @type boolean
 * @on プレビュー表示する
 * @off プレビュー表示しない
 * @default false
 * @desc クリック/タッチ範囲をプレビュー表示/非表示かを指定します。
 *
 * @param align
 * @text 整列位置
 * @type select
 * @option 左整列
 * @value left
 * @option 中央整列
 * @value center
 * @option 右整列
 * @value right
 * @default left
 * @desc コマンドの整列位置を指定します。
 * 
 * @param cBackground
 * @text コマンド背景
 * @type struct<CommandBackgroundSetups>
 * @default {"usePicture":"false","standbyPictureFile":"","selectedPictureFile":"","pictureX":"0","pictureY":"0","pictureOpacity":"255","pictureAnchor":"false"}
 * @desc コマンド用の背景を指定します。
 * 
 * @param slideSettings
 * @text スライド設定
 * @type struct<CommandSlideSetups>
 * @default {"useSlide":"false","startUpSlide":"false","startUpSlideX":"0","startUpSlideY":"0","startUpSlideSpeedX":"0","startUpSlideSpeedY":"0","selectedSlide":"false","selectedSlideX":"0","selectedSlideY":"0","selectedSlideSpeedX":"0","selectedSlideSpeedY":"0"}
 * @desc コマンド用のスライド設定を行います。
 */

//=============================================================================
//  【CommandSlideSetups】
//=============================================================================

/*~struct~CommandSlideSetups:
 * @param useSlide
 * @text スライド全体の使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc スライド機能を使用するかの指定をします。
 * 
 * @param startUpSlide
 * @text [開]スライド
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc アクセスが発生した時のスライドを使用するかの指定をします。
 * 
 * @param startUpSlideX
 * @text [開]スライド元x座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc アクセスが発生した時のスライド元x座標を指定します。選択待機x座標からの調整値です。- で左方向へ、+ で右方向へ調整。
 * 
 * @param startUpSlideY
 * @text [開]スライド元y座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc アクセスが発生した時のスライド元y座標を指定します。選択待機y座標からの調整値です。- で上方向へ、+ で下方向へ調整。
 * 
 * @param startUpSlideSpeedX
 * @text [開]スライド先x方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc アクセスが発生した時のスライド先x方向に向けてのスライド速度を指定します。
 * 
 * @param startUpSlideSpeedY
 * @text [開]スライド先y方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc アクセスが発生した時のスライド先y方向に向けてのスライド速度を指定します。
 * 
 * @param selectedSlide
 * @text [選択中]スライド
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc コマンドが選択された時のスライドを使用するかの指定をします。
 * 
 * @param selectedSlideX
 * @text [選択中]スライド先x座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc コマンドが選択された時のスライド先x座標を指定します。選択待機x座標からの調整値です。- で左方向へ、+ で右方向へ調整。
 * 
 * @param selectedSlideY
 * @text [選択中]スライド先y座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc コマンドが選択された時のスライド先y座標を指定します。選択待機y座標からの調整値です。- で上方向へ、+ で下方向へ調整。
 * 
 * @param selectedSlideSpeedX
 * @text [選択中]スライド先x方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc コマンドが選択された時のスライド先x方向に向けてのスライド速度を指定します。選択待機に戻る際にも使用されます。
 * 
 * @param selectedSlideSpeedY
 * @text [選択中]スライド先y方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc コマンドが選択された時のスライド先y方向に向けてのスライド速度を指定します。選択待機に戻る際にも使用されます。
 * 
 * @param closeUpSlide
 * @text [閉]スライド
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc アクセスが終了した時のスライドを使用するかの指定をします。
 * 
 * @param closeUpSlideX
 * @text [閉]スライド元x座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc アクセスが終了した時のスライド元x座標を指定します。選択待機x座標からの調整値です。- で左方向へ、+ で右方向へ調整。
 * 
 * @param closeUpSlideY
 * @text [閉]スライド元y座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc アクセスが終了した時のスライド元y座標を指定します。選択待機y座標からの調整値です。- で上方向へ、+ で下方向へ調整。
 * 
 * @param closeUpSlideSpeedX
 * @text [閉]スライド先x方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc アクセスが終了した時のスライド先x方向に向けてのスライド速度を指定します。
 * 
 * @param closeUpSlideSpeedY
 * @text [閉]スライド先y方向の速度
 * @type number
 * @min 0
 * @default 0
 * @desc アクセスが終了した時のスライド先y方向に向けてのスライド速度を指定します。
 */

//=============================================================================
//  【WindowBackgroundSetups】
//=============================================================================

/*~struct~WindowBackgroundSetups:
 * @param usePicture
 * @text ピクチャーを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ピクチャーを使用するかの指定をします。
 * 
 * @param pictureFile
 * @text ピクチャーのファイル
 * @type file
 * @dir img/m_menu
 * @desc ピクチャーファイルを設定します。
 * 
 * @param pictureX
 * @text ピクチャーのx座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ピクチャーのX座標を指定します。
 * 
 * @param pictureY
 * @text ピクチャーのy座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ピクチャーのY座標を指定します。
 * 
 * @param pictureOpacity
 * @text ピクチャーの不透明度
 * @type number
 * @default 255
 * @desc ピクチャーの不透明度を指定します。
 * 
 * @param pictureAnchor
 * @text アンカーを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc 画像の中心を座標に合わせるかの指定します。しない場合は、画像の左上を座標に合わせます。
 */

//=============================================================================
//  【CommandBackgroundSetups】
//=============================================================================

/*~struct~CommandBackgroundSetups:
 * @param usePicture
 * @text ピクチャーを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc ピクチャーを使用するかの指定をします。
 * 
 * @param standbyPictureFile
 * @text [待機中]ピクチャーのファイル
 * @type file
 * @dir img/m_menu
 * @desc 選択待機中のピクチャーファイルを設定します。※背景画像を指定する際はこちらは必須。
 * 
 * @param selectedPictureFile
 * @text [選択中]ピクチャーのファイル
 * @type file
 * @dir img/m_menu
 * @desc 選択中のピクチャーファイルを設定します。※背景画像を指定しない場合は、待機画像が使用されます。
 * 
 * @param pictureX
 * @text ピクチャーのx座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ピクチャーのX座標を指定します。
 * 
 * @param pictureY
 * @text ピクチャーのy座標
 * @type number
 * @min -999999999999999
 * @default 0
 * @desc ピクチャーのY座標を指定します。
 * 
 * @param pictureOpacity
 * @text ピクチャーの不透明度
 * @type number
 * @default 255
 * @desc ピクチャーの不透明度を指定します。
 * 
 * @param pictureAnchor
 * @text アンカーを使用
 * @type boolean
 * @on 使用する
 * @off 使用しない
 * @default false
 * @desc 画像の中心を座標に合わせるかの指定します。しない場合は、画像の左上を座標に合わせます。
 */

//=============================================================================
//  【CommandIconSetup】
//=============================================================================

/*~struct~CommandIconSetup:
 * @param useIcon
 * @text アイコンの有無
 * @type boolean
 * @on アイコンを表示する
 * @off アイコンを表示しない
 * @default false
 * @desc アイコンを表示する/しないの指定をしてください。
 * 
 * @param iconIndex
 * @text アイコン
 * @type number
 * @default 0
 * @desc 表示するアイコンindex番号を指定してください。アイコンリスト:テキストタブの入力欄で右クリメニューから開く。
 * 
 * @param iconAjustX
 * @text アイコンx座標の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc x座標の調整値。 -(マイナス)の指定可。
 * 
 * @param iconAjustY
 * @text アイコンy座標の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc y座標の調整値。 -(マイナス)の指定可。
 */

//=============================================================================
//  【CommandNameSetup】
//=============================================================================

/*~struct~CommandNameSetup:
 * @param useCommandName
 * @text コマンド名の有無
 * @type boolean
 * @on コマンド名を表示する
 * @off コマンド名を表示しない
 * @default true
 * @desc コマンド名を表示する/しないの指定をしてください。
 * 
 * @param commandNameAjustX
 * @text コマンド名x座標の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc x座標の調整値。 -(マイナス)の指定可。
 * 
 * @param commandNameAjustY
 * @text コマンド名y座標の調整値
 * @type number
 * @min -99999999999999999999999999999999
 * @default 0
 * @desc y座標の調整値。 -(マイナス)の指定可。
 */

//=============================================================================
//  【MainMenuTermLists】
//=============================================================================

/*~struct~MainMenuTermLists:
 * @param itemTerms
 * @text アイテムの項目集
 * 
 * @param equipTerms
 * @text 装備品の項目集
 * 
 * @param itemEquipCommonTerms
 * @text アイテム/装備品の共通項目集
 * 
 * @param itemScopeTermName
 * @text 効果範囲名
 * @parent itemTerms
 * @type string
 * @default "効果範囲"
 * @desc アイテムで指定された範囲の項目名。
 * 
 * @param itemScopeTypeName
 * @text 各効果範囲項目名
 * @parent itemTerms
 * @type string[]
 * @default ["なし","敵単体","敵全体","敵1体ランダム","敵2体ランダム","敵3体ランダム","敵4体ランダム","味方単体","味方全体","味方単体(戦闘不能)","味方全体(戦闘不能)","使用者"]
 * @desc 各範囲名。順番に なし,敵単,敵全,敵1体ラン,敵2体ラン,敵3体ラン,敵4体ラン,味方単,味方全,味方単(戦不),味方全(戦不),使用者
 * 
 * @param itemTypeTermName
 * @text アイテムタイプ名
 * @parent itemTerms
 * @type string
 * @default "アイテムタイプ"
 * @desc アイテムで指定されたアイテムタイプの項目名。
 * 
 * @param itemTypeName
 * @text 各アイテムタイプ項目名
 * @parent itemTerms
 * @type string[]
 * @default ["通常アイテム","大事なもの","隠しアイテムA","隠しアイテムB"]
 * @desc 各アイテムタイプ項目名。順番に 通常アイテム,大事なもの,隠しアイテムA,隠しアイテムB
 * 
 * @param consumeTermName
 * @text 消耗項目名
 * @parent itemTerms
 * @type string
 * @default "消耗"
 * @desc アイテムで指定された消耗の項目名。
 * 
 * @param consumeTypeName
 * @text 各消耗項目名
 * @parent itemTerms
 * @type string[]
 * @default ["する","しない"]
 * @desc 各消耗項目名。順番に 消耗する,消耗しない
 * 
 * @param useAvailableTermName
 * @text 使用可能項目名
 * @parent itemTerms
 * @type string
 * @default "使用可能時"
 * @desc アイテムで指定された使用可能時の項目名。
 * 
 * @param useAvailableTypeName
 * @text 各使用可能項目名
 * @parent itemTerms
 * @type string[]
 * @default ["常時","バトルのみ","メニューのみ","使用不可"]
 * @desc 各使用可能項目名。順番に 常時,バトル画面,メニュー画面,使用不可
 * 
 * @param repeatTermName
 * @text 連続回数項目名
 * @parent itemTerms
 * @type string
 * @default "連続回数"
 * @desc アイテムで指定された連続回数の項目名。
 * 
 * @param tpGainTermName
 * @text 得TP項目名
 * @parent itemTerms
 * @type string
 * @default "得TP"
 * @desc アイテムで指定された得TPの項目名。
 * 
 * @param damageTypeTermName
 * @text ダメージタイプ項目名
 * @parent itemTerms
 * @type string
 * @default "効果タイプ"
 * @desc アイテムで指定されたダメージタイプの項目名。
 * 
 * @param damageTypeName
 * @text 各ダメージタイプ名
 * @parent itemTerms
 * @type string[]
 * @default ["なし","HPダメージ","MPダメージ","HP回復","MP回復","HP吸収","MP吸収"]
 * @desc 各ダメージタイプ名。順番に なし,HPダメージ,MPダメージ,HP回復,MP回復,HP吸収,MP吸収
 * 
 * @param useEffectTermName
 * @text 使用効果項目名
 * @parent itemTerms
 * @type string
 * @default "使用効果"
 * @desc アイテムで指定された使用効果の項目名。
 * 
 * @param useEffectTypeName
 * @text 各使用効果名
 * @parent itemTerms
 * @type string[]
 * @default ["HP回復","MP回復","TP増加","ステート付与","ステート解除","強化","弱体","強化解除","弱体解除","特殊効果","成長","スキル習得"]
 * @desc 各効果名。順番に HP回復,MP回復,TP増加,ステート付与,ステート解除,強化,弱体,強化解除,弱体解除,特殊効果,成長,スキル習得
 * 
 * @param equipTypeName
 * @text 装備タイプ名
 * @parent equipTerms
 * @type string
 * @default "装備タイプ"
 * @desc 装備品の基本設定で指定された装備タイプの項目名。
 * 
 * @param weaponTypeName
 * @text 武器タイプ名
 * @parent equipTerms
 * @type string
 * @default "武器タイプ"
 * @desc 装備品の基本設定で指定された武器タイプの項目名。
 * 
 * @param armorTypeName
 * @text 防具タイプ名
 * @parent equipTerms
 * @type string
 * @default "防具タイプ"
 * @desc 装備品の基本設定で指定された防具タイプの項目名。
 * 
 * @param elementName
 * @text 属性有効度名
 * @parent equipTerms
 * @type string
 * @default "(t)属性"
 * @desc 装備品の特徴で指定された属性有効度の項目名。(t)はデータベース上のタイプタブにある属性名が代入されます。
 * 
 * @param stateRateName
 * @text ステート有効度名
 * @parent equipTerms
 * @type string
 * @default "(t)付与率"
 * @desc 装備品の特徴で指定されたステート有効度の項目名。(t)はデータベース上のステート名が代入されます。
 * 
 * @param debuffRateName
 * @text 弱体有効度名
 * @parent equipTerms
 * @type string
 * @default "(t)弱体率"
 * @desc 装備品の特徴で指定された弱体有効度の項目名。(t)は弱体対象のステータス名(攻撃力/防御力など)が代入されます。
 * 
 * @param additionalParamTermName
 * @text 追加能力項目名
 * @parent equipTerms
 * @type string
 * @default "追加能力"
 * @desc 装備の特徴で指定された追加能力値の項目名。
 * 
 * @param additionalParamName
 * @text 各追加能力名
 * @parent equipTerms
 * @type string[]
 * @default ["命中率","回避率","会心率","会心回避率","魔法回避率","魔法反射率","反撃率","HP再生率","MP再生率","TP再生率"]
 * @desc 各追加能力名。順番に 命中率,回避率,会心率,会心回避率,魔法回避率,魔法反射率,反撃率,HP再生率,MP再生率,TP再生率
 * 
 * @param specialParamTermName
 * @text 特殊能力項目名
 * @parent equipTerms
 * @type string
 * @default "特殊能力"
 * @desc 装備の特徴で指定された特殊能力値の項目名。
 * 
 * @param specialParamName
 * @text 各特殊能力名
 * @parent equipTerms
 * @type string[]
 * @default []
 * @desc 各特殊能力名。順番に 狙われ率,防御率,回復率,薬の知識,MP消費率,TPチャージ率,物理ダメ率,魔法ダメ率,床ダメ率,経験値獲得率
 * 
 * @param priceTermName
 * @text 値段名
 * @parent itemEquipCommonTerms
 * @type string
 * @default "値段"
 * @desc アイテム/装備で指定された価格の項目名。
 */


//=============================================================================
//
// - プラグイン本体 - ここから下は変更禁止 -
//
//=============================================================================

//=============================================================================
// プラグイン 初期化
//=============================================================================

//プラグイン名の登録
var AyatamSceneCustom = document.currentScript.src.match(/^.*\/(.+)\.js$/)[1];

//プラグインパラメータを登録
Ayatam.SCENECUSTOM.Parameters = PluginManager.parameters(AyatamSceneCustom);
//プラグインパラメータの文字列を配列に変換
Ayatam.SCENECUSTOM.Parameters = JSON.parse(JSON.stringify(Ayatam.SCENECUSTOM.Parameters,(key,value)=>{
    try{return JSON.parse(value);} catch (e) {}
    return value;
    }
));
//デザイン設定のショートカット
Ayatam.SCENECUSTOM.DesignSettings = Ayatam.SCENECUSTOM.Parameters;

//=============================================================================
// ImageManager - シーンカスタマイズMV専用画像フォルダ
//=============================================================================

ImageManager.loadMmc = function(filename, hue) {
    return this.loadBitmap('img/m_menu/', filename, hue, true);
};

//--------------------------------------------------------------------------
// ● キーマッピングへ登録
//--------------------------------------------------------------------------
Ayatam.SCENECUSTOM.setupKeyMappings = function() {
    if(this.setupCustomScene) return;
    this.setupCustomScene = true;
    this.eraseCommentCommands();
    this.setupGamePadKeyMappings();
    this.setupKeyBoradKeyMappings();
};
//--------------------------------------------------------------------------
// ● キーマッピングへ登録
//--------------------------------------------------------------------------
Ayatam.SCENECUSTOM.eraseCommentCommands = function() {
    if(Ayatam.SCENECUSTOM.DesignSettings.sceneCreations.length <= 0) return;
    Ayatam.SCENECUSTOM.DesignSettings.sceneCreations.forEach(customScene => {
        if(customScene) {
            var shortcuts = customScene.sceneShortcutSettings;
            if(shortcuts.length <= 0) return;
            shortcuts.forEach(shortcut => {
                if(shortcut) {
                    shortcut.function.functionCommandTypeName = ""+shortcut.function.functionCommandTypeName+"";
                    if(shortcut.function.functionCommandTypeName.includes('//')) {
                        var erase = shortcut.function.functionCommandTypeName.split('//')[0];
                        shortcut.function.functionCommandTypeName = erase.trim();
                    }else{
                        shortcut.function.functionCommandTypeName = shortcut.function.functionCommandTypeName.trim();
                    };
                    if(shortcut.function.functionTargetWindowName.includes('//')) {
                        var erase = shortcut.function.functionTargetWindowName.split('//')[0];
                        shortcut.function.functionTargetWindowName = erase.trim();
                    }else{
                        shortcut.function.functionTargetWindowName = shortcut.function.functionTargetWindowName.trim();
                    };
                    if(shortcut.function.functionReturnTargetWindowName.includes('//')) {
                        var erase = shortcut.function.functionReturnTargetWindowName.split('//')[0];
                        shortcut.function.functionReturnTargetWindowName = erase.trim();
                    }else{
                        shortcut.function.functionReturnTargetWindowName = shortcut.function.functionReturnTargetWindowName.trim();
                    };
                    if(shortcut.function.functionCommandEnableExt.includes('//')) {
                        var erase = shortcut.function.functionCommandEnableExt.split('//')[0];
                        shortcut.function.functionCommandEnableExt = erase.trim();
                    }else{
                        shortcut.function.functionCommandEnableExt = shortcut.function.functionCommandEnableExt.trim();
                    };
                };
            });
        };
    });
};
//--------------------------------------------------------------------------
// ● ゲームパッドキーマッピングへ登録
//--------------------------------------------------------------------------
Ayatam.SCENECUSTOM.setupGamePadKeyMappings = function() {
    if(Ayatam.SCENECUSTOM.DesignSettings.sceneCreations.length <= 0) return;
    var createLength = Ayatam.SCENECUSTOM.DesignSettings.sceneCreations.length;
    var content = Ayatam.SCENECUSTOM.DesignSettings.sceneCreations;
    for(var i = 0; i < createLength; ++i) {
        if(content[i]) {
            var shortcuts = content[i].sceneShortcutSettings;
            if(shortcuts.length > 0) {
                for(var c = 0; c < shortcuts.length; ++c) {
                    if(shortcuts[c]) {
                        if(shortcuts[c].gamePadKey !== 'none') {
                            var key = shortcuts[c].gamePadKey;
                            var keyResult = this.setAndGetGamePadReservedKey(key);
                            if(keyResult !== undefined) Ayatam.SCENECUSTOM.DesignSettings.sceneCreations[i].sceneShortcutSettings[c].gamePadKey = keyResult;
                        };
                    };
                };
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● キーボードキーマッピングへ登録
//--------------------------------------------------------------------------
Ayatam.SCENECUSTOM.setupKeyBoradKeyMappings = function() {
    if(Ayatam.SCENECUSTOM.DesignSettings.sceneCreations.length <= 0) return;
    var createLength = Ayatam.SCENECUSTOM.DesignSettings.sceneCreations.length;
    var content = Ayatam.SCENECUSTOM.DesignSettings.sceneCreations;
    for(var i = 0; i < createLength; ++i) {
        if(content[i]) {
            var shortcuts = content[i].sceneShortcutSettings;
            if(shortcuts.length > 0) {
                for(var c = 0; c < shortcuts.length; ++c) {
                    if(shortcuts[c]) {
                        if(shortcuts[c].keyboardKey !== 'none') {
                            var key = shortcuts[c].keyboardKey;
                            var keyResult = this.setAndGetKeyBoardKeyReservedKey(key);
                            if(keyResult !== undefined) Ayatam.SCENECUSTOM.DesignSettings.sceneCreations[i].sceneShortcutSettings[c].keyboardKey = keyResult;
                        };
                    };
                };
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● ゲームパッドキーマッピング情報を比較して必要なら返す
//--------------------------------------------------------------------------
Ayatam.SCENECUSTOM.setAndGetGamePadReservedKey = function(key) {
    var result = undefined;
    switch (key){
        case 'ok':
            if(Input.gamepadMapper[0] === undefined) {
                Input.gamepadMapper[0] = key;
            }else{
                result = Input.gamepadMapper[0];
            };
            break;
        case 'cancel':
            if(Input.gamepadMapper[1] === undefined) {
                Input.gamepadMapper[1] = key;
            }else{
                result = Input.gamepadMapper[1];
            }; 
            break;
        case 'shift':
            if(Input.gamepadMapper[2] === undefined) {
                Input.gamepadMapper[2] = key;
            }else{
                result = Input.gamepadMapper[2];
            };
            break;
        case 'menu':
            if(Input.gamepadMapper[3] === undefined) {
                Input.gamepadMapper[3] = key;
            }else{
                result = Input.gamepadMapper[3];
            };
            break;
        case 'pageup':
            if(Input.gamepadMapper[4] === undefined) {
                Input.gamepadMapper[4] = key;
            }else{
                result = Input.gamepadMapper[4];
            };
            break;
        case 'pagedown':
            if(Input.gamepadMapper[5] === undefined) {
                Input.gamepadMapper[5] = key;
            }else{
                result = Input.gamepadMapper[5];
            };
            break;
        case 'lt':
            if(Input.gamepadMapper[6] === undefined) {
                Input.gamepadMapper[6] = key;
            }else{
                result = Input.gamepadMapper[6];
            };
            break;
        case 'rt':
            if(Input.gamepadMapper[7] === undefined) {
                Input.gamepadMapper[7] = key;
            }else{
                result = Input.gamepadMapper[7];
            };
            break;
        case 'back':
            if(Input.gamepadMapper[8] === undefined) {
                Input.gamepadMapper[8] = key;
            }else{
                result = Input.gamepadMapper[8];
            };
            break;
        case 'start':
            if(Input.gamepadMapper[9] === undefined) {
                Input.gamepadMapper[9] = key;
            }else{
                result = Input.gamepadMapper[9];
            };
            break;
        case 'l3':
            if(Input.gamepadMapper[10] === undefined) {
                Input.gamepadMapper[10] = key;
            }else{
                result = Input.gamepadMapper[10];
            };
            break;
        case 'r3':
            if(Input.gamepadMapper[11] === undefined) {
                Input.gamepadMapper[11] = key;
            }else{
                result = Input.gamepadMapper[11];
            };
            break;
        case 'up':
            if(Input.gamepadMapper[12] === undefined) {
                Input.gamepadMapper[12] = key;
            }else{
                result = Input.gamepadMapper[12];
            };
            break;
        case 'down':
            if(Input.gamepadMapper[13] === undefined) {
                Input.gamepadMapper[13] = key;
            }else{
                result = Input.gamepadMapper[13];
            };
            break;
        case 'left':
            if(Input.gamepadMapper[14] === undefined) {
                Input.gamepadMapper[14] = key;
            }else{
                result = Input.gamepadMapper[14];
            };
            break;
        case 'right':
            if(Input.gamepadMapper[15] === undefined) {
                Input.gamepadMapper[15] = key;
            }else{
                result = Input.gamepadMapper[15];
            };
            break;
    }
    return result;
};
//--------------------------------------------------------------------------
// ● キーボードキーマッピング情報を比較して必要なら返す
//--------------------------------------------------------------------------
Ayatam.SCENECUSTOM.setAndGetKeyBoardKeyReservedKey = function(key) {
    var result = undefined;
    switch (key){
        case 'A':
            if(Input.keyMapper[65] === undefined) {
                Input.keyMapper[65] = key;
            }else{
                result = Input.keyMapper[65];
            };
            break;
        case 'B':
            if(Input.keyMapper[66] === undefined) {
                Input.keyMapper[66] = key;
            }else{
                result = Input.keyMapper[66];
            };
            break;
        case 'C':
            if(Input.keyMapper[67] === undefined) {
                Input.keyMapper[67] = key;
            }else{
                result = Input.keyMapper[67];
            };
            break;
        case 'D':
            if(Input.keyMapper[68] === undefined) {
                Input.keyMapper[68] = key;
            }else{
                result = Input.keyMapper[68];
            };
            break;
        case 'E':
            if(Input.keyMapper[69] === undefined) {
                Input.keyMapper[69] = key;
            }else{
                result = Input.keyMapper[69];
            };
            break;
        case 'F':
            if(Input.keyMapper[70] === undefined) {
                Input.keyMapper[70] = key;
            }else{
                result = Input.keyMapper[70];
            };
            break;
        case 'G':
            if(Input.keyMapper[71] === undefined) {
                Input.keyMapper[71] = key;
            }else{
                result = Input.keyMapper[71];
            };
            break;
        case 'H':
            if(Input.keyMapper[72] === undefined) {
                Input.keyMapper[72] = key;
            }else{
                result = Input.keyMapper[72];
            };
            break;
        case 'I':
            if(Input.keyMapper[73] === undefined) {
                Input.keyMapper[73] = key;
            }else{
                result = Input.keyMapper[73];
            };
            break;
        case 'J':
            if(Input.keyMapper[74] === undefined) {
                Input.keyMapper[74] = key;
            }else{
                result = Input.keyMapper[74];
            };
            break;
        case 'K':
            if(Input.keyMapper[75] === undefined) {
                Input.keyMapper[75] = key;
            }else{
                result = Input.keyMapper[75];
            };
            break;
        case 'L':
            if(Input.keyMapper[76] === undefined) {
                Input.keyMapper[76] = key;
            }else{
                result = Input.keyMapper[76];
            };
            break;
        case 'M':
            if(Input.keyMapper[77] === undefined) {
                Input.keyMapper[77] = key;
            }else{
                result = Input.keyMapper[77];
            };
            break;
        case 'N':
            if(Input.keyMapper[78] === undefined) {
                Input.keyMapper[78] = key;
            }else{
                result = Input.keyMapper[78];
            };
            break;
        case 'O':
            if(Input.keyMapper[79] === undefined) {
                Input.keyMapper[79] = key;
            }else{
                result = Input.keyMapper[79];
            };
            break;
        case 'P':
            if(Input.keyMapper[80] === undefined) {
                Input.keyMapper[80] = key;
            }else{
                result = Input.keyMapper[80];
            };
            break;
        case 'pageup'://Q
            if(Input.keyMapper[81] === undefined) {
                Input.keyMapper[81] = key;
            }else{
                result = Input.keyMapper[81];
            };
            break;
        case 'R':
            if(Input.keyMapper[82] === undefined) {
                Input.keyMapper[82] = key;
            }else{
                result = Input.keyMapper[82];
            };
            break;
        case 'S':
            if(Input.keyMapper[83] === undefined) {
                Input.keyMapper[83] = key;
            }else{
                result = Input.keyMapper[83];
            };
            break;
        case 'T':
            if(Input.keyMapper[84] === undefined) {
                Input.keyMapper[84] = key;
            }else{
                result = Input.keyMapper[84];
            };
            break;
        case 'U':
            if(Input.keyMapper[85] === undefined) {
                Input.keyMapper[85] = key;
            }else{
                result = Input.keyMapper[85];
            };
            break;
        case 'V':
            if(Input.keyMapper[86] === undefined) {
                Input.keyMapper[86] = key;
            }else{
                result = Input.keyMapper[86];
            };
            break;
        case 'pagedown'://W
            if(Input.keyMapper[87] === undefined) {
                Input.keyMapper[87] = key;
            }else{
                result = Input.keyMapper[87];
            };
            break;
        case 'Y':
            if(Input.keyMapper[89] === undefined) {
                Input.keyMapper[89] = key;
            }else{
                result = Input.keyMapper[89];
            };
            break;
    }
    return result;
};
//--------------------------------------------------------------------------
// ● ログウィンドウにテキストを送信する[制御文字使用可能] ※調整中 作業位置
//--------------------------------------------------------------------------
// Ayatam.SCENECUSTOM.sendLogText = function(window,text) {
//     if(SceneManager._scene.mmcGetCustomWindow(window) === undefined) return;
//     SceneManager._scene.mmcGetCustomWindow(window).addText(text);
// };

//=============================================================================
// Game_Temp - シーンカスタマイズMVのセットアップ
//=============================================================================

var _AyatamSceneCustom_Game_Temp_prototype_initialize = Game_Temp.prototype.initialize;
Game_Temp.prototype.initialize = function() {
    _AyatamSceneCustom_Game_Temp_prototype_initialize.call(this);
    this.setupMmc();
};

Game_Temp.prototype.setupMmc = function() {
    this._mmcIndexHandler = new Map;
};

Game_Temp.prototype.mmcSaveIndex = function(name,index) {
    this._mmcIndexHandler.set(name,index);
};

Game_Temp.prototype.mmcGetIndex = function(name) {
    return this._mmcIndexHandler.get(name);
};

//=============================================================================
// Sprite_MmcSprite - 特殊用の画像
//=============================================================================

function Sprite_MmcSprite() {
    this.initialize.apply(this, arguments);
};

Sprite_MmcSprite.prototype = Object.create(Sprite.prototype);
Sprite_MmcSprite.prototype.constructor = Sprite_MmcSprite;

Sprite_MmcSprite.prototype.initialize = function(bitmap) {
    Sprite.prototype.initialize.call(this);
    this.initActor();
    this.initSlide();
    this.initRotation();
    this.initParticle();
    this.bitmap = bitmap;
};

Sprite_MmcSprite.prototype.initSlide = function() {
    this._openSlide = false;
    this._openSlideExecuted = false;
    this._closeSlide = false;
    this._closeSlideExecuted = false;
    this._returnSlide = false;
    this._slide_x = this.x;
    this._slide_y = this.y;
    this._slideSpeed_x = 0;
    this._slideSpeed_y = 0;
    this._xSliding = false;
    this._ySliding = false;
};

Sprite_MmcSprite.prototype.initRotation = function() {
    this._rotationLoop = false;
    this._rotationSpeed = 0;
};

Sprite_MmcSprite.prototype.initParticle = function() {
    this._particles = [];
    this._particleMode = false;
    this._particleRepeat = false;
    this._particleRotation = false;
    this._particleAnchor = false;
    this._particleScaleRandom = false;
    this._particleScaleRandomExecuted = false;
    this._particleScale = 0;
    this._particleSpeedX = 0;
    this._particleSpeedY = 0;
    this._particleSwingX = 0;
    this._particleSwingY = 0;
    this._particleRotationSpeed = 0;
    this._particleAmount = 0;
};

Sprite_MmcSprite.prototype.initActor = function() {
    this._isActor = false;
    this._actorPicName = "";
    this._useHpRate = false;
    this._currentActor = undefined;
    this._currentActorPicture = [];
    this._oldActorRate = 0;
};

Sprite_MmcSprite.prototype.setActor = function(picName,actor,useHpRate) {
    this._actorPicName = picName;
    this._currentActor = actor;
    this._useHpRate = useHpRate;
    this._oldActorRate = this._currentActor.hpRate();
    if(useHpRate) {
        var pictureDir = this._actorPicName + this._currentActor.actorId() + "_0";
        this._currentActorPicture[0] = ImageManager.loadMmc(pictureDir);
        var pictureDir = this._actorPicName + this._currentActor.actorId() + "_25";
        this._currentActorPicture[1] = ImageManager.loadMmc(pictureDir);
        var pictureDir = this._actorPicName + this._currentActor.actorId() + "_50";
        this._currentActorPicture[2] = ImageManager.loadMmc(pictureDir);
        var pictureDir = this._actorPicName + this._currentActor.actorId() + "_100";
        this._currentActorPicture[3] = ImageManager.loadMmc(pictureDir);
        if(this._currentActor.hpRate() <= 0.1) {
            if(this._currentActor._hp <= 1) {
                this.bitmap = this._currentActorPicture[0];
            }else{
                this.bitmap = this._currentActorPicture[1];
            };
        }else if(this._currentActor.hpRate() <= 0.25) {
            this.bitmap = this._currentActorPicture[1];
        }else if(this._currentActor.hpRate() <= 0.5) {
            this.bitmap = this._currentActorPicture[2];
        }else if(this._currentActor.hpRate() <= 1.0) {
            this.bitmap = this._currentActorPicture[3];
        };
    }else{
        var pictureDir = this._actorPicName + this._currentActor.actorId()
        this.bitmap = ImageManager.loadMmc(pictureDir);
    };
    this._isActor = true;
};

Sprite_MmcSprite.prototype.setParticle = function(pMode,pRepeat,pRotation,pRandomScale,rScale,dSpeedX,dSpeedY,sX,sY,rSpeed,anchor,amount,blendMode) {
    this._particleMode = pMode;
    this._particleRepeat = pRepeat;
    this._particleRotation = pRotation;
    this._particleScaleRandom = pRandomScale;
    this._particleScale = rScale;
    this._particleSpeedX = dSpeedX;
    this._particleSpeedY = dSpeedY;
    this._particleSwingX = sX;
    this._particleSwingY = sY;
    this._particleRotationSpeed = rSpeed;
    this._particleAnchor = anchor;
    this._particleAmount = amount;
    this._particleBlendMode = blendMode;
};

Sprite_MmcSprite.prototype.createParticles = function() {
    for(var index = 0; index < this._particleAmount; ++index) {
        this._particles[index] = new Sprite();
        this._particles[index].bitmap = this.bitmap;
        if(this._particleSpeedX > 0) {
            this._particles[index].x = -(Graphics.boxWidth / 3) + Math.randomInt(Graphics.boxWidth);
        }else if(this._particleSpeedX < 0) {
            this._particles[index].x = (Graphics.boxWidth / 3) + Math.randomInt(Graphics.boxWidth);
        }else{
            this._particles[index].x = Math.randomInt(Graphics.boxWidth);
        };
        if(this._particleSpeedY < 0) {
            this._particles[index].y = (Graphics.boxHeight / 3) + Math.randomInt(Graphics.boxHeight);
        }else if(this._particleSpeedY > 0) {
            this._particles[index].y = -(Graphics.boxHeight / 3) + Math.randomInt(Graphics.boxHeight);
        }else{
            this._particles[index].y = Math.randomInt(Graphics.boxHeight);
        };
        this._particles[index].opacity = 0;
        if(this._particleAnchor) {
            this._particles[index].anchor.x = 0.5;
            this._particles[index].anchor.y = 0.5;
        };
        this._particles[index].blendMode = this._particleBlendMode;
        this.addChild(this._particles[index]);
    };
    if(this._particles.length > 0) this.bitmap = null;
};

Sprite_MmcSprite.prototype.mmcRotation = function(enable,speed) {
    this._rotationLoop = enable;
    this._rotationSpeed = speed;
};

Sprite_MmcSprite.prototype.slide = function(x,y,xSpeed,ySpeed,functionScript = "") {
    if(x !== undefined) this._slide_x = x;
    if(y !== undefined) this._slide_y = y;
    if(x !== undefined) this._slideSpeed_x = xSpeed;
    if(y !== undefined) this._slideSpeed_y = ySpeed;
    if(this._slideSpeed_x > 0) this._xSliding = true;
    if(this._slideSpeed_y > 0) this._ySliding = true;
    if(functionScript.includes('open')) this._openSlide = this._openSlideExecuted ? false : true;
    if(functionScript.includes('close')) this._closeSlide = this._closeSlideExecuted ? false : true;
    if(functionScript.includes('return')) this._returnSlide = true;
};

Sprite_MmcSprite.prototype.updateSlide = function() {
    if(this._xSliding) {
        if(this.x >= this._slide_x) {
            this.x -= this._slideSpeed_x;
            if(this.x <= this._slide_x) {
                this.x = this._slide_x;
                this._slideSpeed_x = 0;
                this._xSliding = false;
            };
        }else if(this.x <= this._slide_x) {
            this.x += this._slideSpeed_x;
            if(this.x >= this._slide_x) {
                this.x = this._slide_x;
                this._slideSpeed_x = 0;
                this._xSliding = false;
            };
        };
    };
    if(this._ySliding) {
        if(this.y >= this._slide_y) {
            this.y -= this._slideSpeed_y;
            if(this.y <= this._slide_y) {
                this.y = this._slide_y;
                this._slideSpeed_y = 0;
                this._ySliding = false;
            };
        }else if(this.y <= this._slide_y) {
            this.y += this._slideSpeed_y;
            if(this.y >= this._slide_y) {
                this.y = this._slide_y;
                this._slideSpeed_y = 0;
                this._ySliding = false;
            };
        };
    };
    if(!this._xSliding && !this._ySliding) {
        if(this._openSlide) {
            this._closeSlideExecuted = false;
            this._openSlideExecuted = true;
            this._openSlide = false;
        };
        if(this._closeSlide) {
            this._openSlideExecuted = false;
            this._closeSlideExecuted = true;
            this._closeSlide = false;
        };
        if(this._returnSlide) this._returnSlide = false;
    };
};

Sprite_MmcSprite.prototype.isSlideMovementLock = function() {
    return this._openSlide || this._closeSlide || this._returnSlide;
};

Sprite_MmcSprite.prototype.updateRotation = function() {
    if(!this._rotationLoop) return;
    this.rotation += this._rotationSpeed;
};

Sprite_MmcSprite.prototype.updateParticales = function() {
    if(!this._particleMode) return;
    if(this._particleAmount <= 0) return;
    if(this._particles.length <= 0) this.createParticles();
    for(var index = 0; index < this._particles.length; ++index) {
        if(this._particles[index] !== undefined) {
            if(this._particleSpeedX !== 0) {
                if(this._particleSwingX > 0) {
                    this._particles[index].x += ((Math.random() * 2) + this._particleSwingX) * this._particleSpeedX;
                }else{
                    this._particles[index].x += this._particleSpeedX;
                };
            };
            if(this._particleSpeedY !== 0) {
                if(this._particleSwingY > 0) {
                    this._particles[index].y += ((Math.random() * 2) + this._particleSwingY) * this._particleSpeedY;
                }else{
                    this._particles[index].y += this._particleSpeedY;
                };
            };
            this._particles[index].opacity += 4;
            if(this._particleRotation) this._particles[index].rotation += this._particleRotationSpeed;
            if(this._particleRepeat) this.repeatParticle(index);
        };
    };
};

Sprite_MmcSprite.prototype.repeatParticle = function(index) {
    if(this._particleSpeedX > 0) {
        if(this._particles[index].x > Graphics.boxWidth + this._particles[index].width * 2) {
            this._particles[index].opacity = 0;
            this._particles[index].x = -(Graphics.boxWidth / 3) + Math.randomInt(Graphics.boxWidth);
            this._particleScaleRandomExecuted = false;
        };
    };
    if(this._particleSpeedX < 0) {
        if(this._particles[index].x < -this._particles[index].width * 2) {
            this._particles[index].opacity = 0;
            this._particles[index].x = (Graphics.boxWidth / 3) + Math.randomInt(Graphics.boxWidth);
            this._particleScaleRandomExecuted = false;
        };
    };
    if(this._particleSpeedY < 0) {
        if(this._particles[index].y < -this._particles[index].height *2) {
            this._particles[index].opacity = 0;
            this._particles[index].y = (Graphics.boxHeight / 3) + Math.randomInt(Graphics.boxHeight);
            this._particleScaleRandomExecuted = false;
        };
    }else if(this._particleSpeedY > 0) {
        if(this._particles[index].y > Graphics.boxHeight + this._particles[index].height * 2) {
            this._particles[index].opacity = 0;
            this._particles[index].y = -(Graphics.boxHeight / 3) + Math.randomInt(Graphics.boxHeight);
            this._particleScaleRandomExecuted = false;
        };
    };
    if(this._particleScaleRandom) {
        if(!this._particleScaleRandomExecuted) {
            var organize = (Math.random() * this._particleScale);
            this._particles[index].scale = new PIXI.Point(0.5 + organize,0.5 + organize);
            this._particleScaleRandomExecuted = true;
        };
    };
};

Sprite_MmcSprite.prototype.updateActor = function() {
    if(!this._isActor) return;
    if(!this._useHpRate) return;
    if(this._oldActorRate !== this._currentActor.hpRate()) {
        if(this._currentActor.hpRate() <= 0.1) {
            if(this._currentActor._hp <= 1) {
                this.bitmap = this._currentActorPicture[0];
            }else{
                this.bitmap = this._currentActorPicture[1];
            };
        }else if(this._currentActor.hpRate() <= 0.25) {
            this.bitmap = this._currentActorPicture[1];
        }else if(this._currentActor.hpRate() <= 0.5) {
            this.bitmap = this._currentActorPicture[2];
        }else if(this._currentActor.hpRate() <= 1.0) {
            this.bitmap = this._currentActorPicture[3];
        };
        this._oldActorRate = this._currentActor.hpRate()
    };
};

Sprite_MmcSprite.prototype.update = function() {
    Sprite.prototype.update.call(this);
    this.updateActor();
    this.updateSlide();
    this.updateRotation();
    this.updateParticales();
};

//=============================================================================
// Sprite_MmcTilingSprite - 特殊用の画像
//=============================================================================

function Sprite_MmcTilingSprite() {
    this.initialize.apply(this,arguments);
};

Sprite_MmcTilingSprite.prototype = Object.create(TilingSprite.prototype);
Sprite_MmcTilingSprite.prototype.constructor = Sprite_MmcTilingSprite;

Sprite_MmcTilingSprite.prototype.initialize = function() {
    TilingSprite.prototype.initialize.call(this);
    this.initScroll();
};
//--------------------------------------------------------------------------
// ● スクロールのセットアップ
//--------------------------------------------------------------------------
Sprite_MmcTilingSprite.prototype.initScroll = function() {
    this._scrollX = false;
    this._scrollY = false;
    this._scrollXSpeed = 0;
    this._scrollYSpeed = 0;
};
//--------------------------------------------------------------------------
// ● スクロールの受付
//--------------------------------------------------------------------------
Sprite_MmcTilingSprite.prototype.setupScroll = function(scrollX,scrollY,speedX,speedY) {
    this._scrollX = scrollX;
    this._scrollY = scrollY;
    this._scrollXSpeed = speedX;
    this._scrollYSpeed = speedY;
};
//--------------------------------------------------------------------------
// ● 更新
//--------------------------------------------------------------------------
Sprite_MmcTilingSprite.prototype.update = function() {
	TilingSprite.prototype.update.call(this);
    this.updateScroll();
};
//--------------------------------------------------------------------------
// ● スクロールの更新
//--------------------------------------------------------------------------
Sprite_MmcTilingSprite.prototype.updateScroll = function() {
    if(this.bitmap) {
        if(this._scrollX) {
            this.origin.x += this._scrollXSpeed * 4;
            if(this.origin.x < -this.bitmap.width) {
                this.origin.x += this.bitmap.width;
            }else if(this.origin.x > this.bitmap.width) {
                this.origin.x -= this.bitmap.width;
            };
        };
        if(this._scrollY) {
            this.origin.y += this._scrollYSpeed * 4;
            if(this.origin.y < -this.bitmap.height) {
                this.origin.y += this.bitmap.height;
            }else if(this.origin.y > this.bitmap.height) {
                this.origin.y -= this.bitmap.height;
            };
        };
    };
};

//=============================================================================
// Sprite_mmcMenuButtons - メニュー用ボタン画像
//=============================================================================

function Sprite_mmcMenuButtons() {
    this.initialize.apply(this,arguments);
};

Sprite_mmcMenuButtons.prototype = Object.create(Sprite.prototype);
Sprite_mmcMenuButtons.prototype.constructor = Sprite_mmcMenuButtons;

//--------------------------------------------------------------------------
// ● オブジェクト初期化
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.initialize = function(index,command,designs,window,scrollX,scrollY) {
    Sprite.prototype.initialize.call(this);
    this._selfIndex = index;
    this._currentIndex = -1;
    this._scrollX = scrollX;
    this._scrollY = scrollY;
    this._isAccessing = false;
    this._openStartSlide = false;
    this._executeOpenStartSlide = false;
    this._openTimer = 0;
    this._openTimerMax = 20;
    this._startOpenTimer = false;
    this._closeing = false;
    this._closeSliding = false;
    this._closeSlidingExecuted = false;
    this.windowSetup(window);
    this.commandSetup(command);
    this.findDesign(designs);
    this.findCurrentCommand(this._windowSetup.commands);
    this.buttonSetup();
    this.clearSlide();
    this.refresh();
};
//--------------------------------------------------------------------------
// ● 自身のデザインのセットアップ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.findDesign = function(designs) {
    if(designs === undefined) {
        this._design = undefined;
        return;
    };
    if(designs.length <= 0) {
        this._design = undefined;
        return;
    };
    designs.forEach(design => {
        if(design) {
            if(this.commandName() === design.targetName) {
                this._design = design;
            };
        };
    });
};
//--------------------------------------------------------------------------
// ● 自身のデザインのセットアップ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.findCurrentCommand = function(commands) {
    commands.forEach(cmd => {
        if(cmd) {
            if(cmd.commandName.includes('sType:')) {
                if(cmd.commandName.includes(this.commandName())) {
                    this._cmdInfo = cmd;
                };
            }else{
                if(this.commandName() === cmd.commandName) {
                    this._cmdInfo = cmd;
                };
            };
        };
    });
};
//--------------------------------------------------------------------------
// ● ボタン効果のセットアップ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.buttonSetup = function() {
    this._touching = false;
    if(this._design) {
        var w = this._design.touchW;
        var h = this._design.touchH;
        this._coldFrame = new Rectangle(this.x, this.y, w, h);
        this._hotFrame = new Rectangle(this.x, this.y, w, h);
        if(this._design.touchPreview) {
            this.mmcDrawItemBackground('touchPreview',this.x,this.y,w,h,'#a4ffe0',192,true);
        };
    }else{
        this._coldFrame = new Rectangle(this.x, this.y, eval(window.windowW), eval(window.windowH));
        this._hotFrame = new Rectangle(this.x, this.y, eval(window.windowW), eval(window.windowH));
    };
};
//--------------------------------------------------------------------------
// ● 継承元ウィンドウのセットアップ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.windowSetup = function(window) {
    this._windowSetup = window;
    windowName = window.windowName;
    if(windowName.includes('//')) {
        var windowSplit = windowName.split('//');
        windowName = windowSplit[0];
    };
    windowName = windowName.trim();
    this._parentWindow = windowName;
    this._isListType = window.commandDesignType === "listType" ? true : false;
    this._isFreeType = window.commandDesignType === "freeType" ? true : false;
    try {
        this._commandWidth = eval(window.windowW);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + windowName + '</b></font> のウィンドウの設定\nウィンドウの横幅にて\n「<font color="red"><b> ' + window.windowW + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er106smb)', error);
        SceneManager.stop();
    };
    try {
        this._commandHeight = eval(window.windowH);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + windowName + '</b></font> のウィンドウの設定\nウィンドウの横幅にて\n「<font color="red"><b> ' + window.windowH + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er106smb)', error);
        SceneManager.stop();
    };
    this._isHighLightMode = window.commandHighLight;
    this._maxCols = window.caseCommandCol;
};
//--------------------------------------------------------------------------
// ● コマンドのセットアップ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.commandSetup = function(command) {
    this._command = command;
    this._design = undefined;
    this.z = 5;
    this.opacity = 255;
};
//--------------------------------------------------------------------------
// ● コマンド情報の取得
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.setCommandInfo = function(command) {
    if(this._command === command) return;
    this._command = command;
};
//--------------------------------------------------------------------------
// ● コマンド情報の取得
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.getCommandHelp = function() {
    return this._cmdInfo.commandHelpText;
};
//--------------------------------------------------------------------------
// ● 親ウィンドウからのアクセス状況
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.setAccessInfo = function(access) {
    if(this._isAccessing === access) return;
    this._isAccessing = access;
    this.refresh();
};
//--------------------------------------------------------------------------
// ● スライドのセットアップ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.slideSetup = function() {
    if(this._design === undefined) {
        this.setupPos();
        return;
    };
    if(!this.mmcOutSideSlideApproched) {
        if(!this._design.slideSettings.useSlide) {
            this.setupPos();
            return;
        };
    };
    if(!this._closeing) {
        if(this._executeOpenStartSlide) {
            if(!this._commandStartSlide) {
                if(this._design.slideSettings.startUpSlide) {
                    var xSpeed = this._design.slideSettings.startUpSlideSpeedX;
                    var ySpeed = this._design.slideSettings.startUpSlideSpeedY;
                    this.slide(this.standbyPosX(),this.standbyPosY(),xSpeed,ySpeed);
                };
                this._commandStartSlide = true;
            };
            if(this._design.slideSettings.selectedSlide) {
                if(this._selfIndex === this._currentIndex) {
                    var slideToX = this.standbyPosX() + this._design.slideSettings.selectedSlideX;
                    var slideToY = this.standbyPosY() + this._design.slideSettings.selectedSlideY;
                    var xSpeed = this._design.slideSettings.selectedSlideSpeedX;
                    var ySpeed = this._design.slideSettings.selectedSlideSpeedY;
                    this.slide(slideToX,slideToY,xSpeed,ySpeed);
                }else{
                    var xSpeed = this._design.slideSettings.selectedSlideSpeedX;
                    var ySpeed = this._design.slideSettings.selectedSlideSpeedY;
                    this.slide(this.standbyPosX(),this.standbyPosY(),xSpeed,ySpeed);
                };
            };
            if(!this._commandSlidingX && !this._commandSlidingY) {
                if(this._selfIndex !== this._currentIndex) {
                    this.setupPos();
                };
            };
        }else{
            if(this._design.slideSettings.startUpSlide) {
                this.x = this.standbyPosX() + this._design.slideSettings.startUpSlideX;
                this.y = this.standbyPosY() + this._design.slideSettings.startUpSlideY;
            }else{
                this.setupPos();
            };
        };
    }else{
        if(!this._closeSlidingExecuted) {
            if(this._design.slideSettings.closeUpSlide) {
                var slideToX = this.standbyPosX() + this._design.slideSettings.closeUpSlideX
                var slideToY = this.standbyPosY() + this._design.slideSettings.closeUpSlideY;
                if(this.x !== slideToX || this.y !== slideToY) {
                    var xSpeed = this._design.slideSettings.closeUpSlideSpeedX;
                    var ySpeed = this._design.slideSettings.closeUpSlideSpeedY;
                    this._closeSliding = true;
                    this.slide(slideToX,slideToY,xSpeed,ySpeed);
                }else{//一度も開かれなかった場合
                    this._commandStartSlide = false;
                    this._closeSliding = false;
                    this._closeing = false;
                };
            }else{
                this._closeing = false;
            };
            this._closeSlidingExecuted = true;
        };
    };
};
//--------------------------------------------------------------------------
// ● 開始スライドの実行
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.startCommandOpenSlide = function() {
    if(this._openStartSlide) return;
    this._openTimer = 0;
    this._closeSlidingExecuted = false;
    this._closeSliding = false;
    this._openStartSlide = true;
    this._startOpenTimer = true;
};
//--------------------------------------------------------------------------
// ● 開始スライドの実行までのタイマー
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.startCommandOpenTimer = function() {
    if(!this._startOpenTimer) return;
    this._openTimer++;
    if(this._openTimer >= this._openTimerMax) {
        this._executeOpenStartSlide = true;
        this._openTimer = this._openTimerMax;
        this._startOpenTimer = false;
        this.refresh();
    };
};
//--------------------------------------------------------------------------
// ● 終了スライドの実行
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.startCommandCloseSlides = function() {
    if(this._closeSliding) return;
    this._executeOpenStartSlide = false;
    this._openStartSlide = false;
    this._commandStartSlide = false;
    this._closeing = true;
    this.refresh();
};
//--------------------------------------------------------------------------
// ● 終了スライドの実行中か
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.isCloseSliding = function() {
    return this._closeSliding || this._commandSlidingX || this._commandSlidingY
};
//--------------------------------------------------------------------------
// ● 自身の設定情報を検索
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.findSelfInfo = function() {
    var result = undefined;
    this._windowSetup.commands.forEach(command => {
        if(command) {
            if(command.commandName === this.commandName()) {
                result = command;
            };
        };
    });
    return result;
};
//--------------------------------------------------------------------------
// ● 背景画像の作成
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.createBackground = function() {
    if(this._design === undefined) return;
    if(!this._design.cBackground.usePicture) return;
    if(this._design.cBackground.standbyPictureFile === "") return;
    if(this._mmcBackground === undefined) {
        var width = Graphics.width;
        var height = Graphics.height;
        this._mmcBackground = new Sprite(new Bitmap(width,height));
        this._mmcBackground.bitmap = ImageManager.loadMmc(this._design.cBackground.standbyPictureFile);
        this._mmcBackground.x = this._design.cBackground.pictureX;
        this._mmcBackground.y = this._design.cBackground.pictureY;
        if(this._design.cBackground.pictureAnchor) {
            this._mmcBackground.anchor.x = 0.5;
            this._mmcBackground.anchor.y = 0.5;
        };
        this._mmcBackground.opacity = this._design.cBackground.pictureOpacity;
        this.addChild(this._mmcBackground);
    };
    if(this._design.cBackground.selectedPictureFile === "") return;
    if(this._selfIndex === this._currentIndex) {
        this._mmcBackground.bitmap = ImageManager.loadMmc(this._design.cBackground.selectedPictureFile);
    }else{
        this._mmcBackground.bitmap = ImageManager.loadMmc(this._design.cBackground.standbyPictureFile);
    };
};
//--------------------------------------------------------------------------
// ● アイコンの作成
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawIcon = function(id = 0,iconIndex = 0,x = 0,y = 0,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawIcon()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._icon === undefined) {
            this._icon = [];
        }else{
            if(this._icon[id] !== undefined) this.removeChild(this._icon[id]);
        }; 
        var pw = Window_Base._iconWidth;
        var ph = Window_Base._iconHeight;
        var sx = iconIndex % 16 * pw;
        var sy = Math.floor(iconIndex / 16) * ph;
        this._icon[id] = new Sprite(new Bitmap(pw,ph));
        this.changePaintOpacity(this._icon[id].bitmap,this.isEnabled());
        var bitmap = ImageManager.loadSystem('IconSet');
        this._icon[id].bitmap.blt(bitmap, sx, sy, pw, ph, 0, 0);
        this._icon[id].x = x;
        this._icon[id].y = y;
        this.addChild(this._icon[id]);
    };
};
//--------------------------------------------------------------------------
// ● テキストの描画
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawText = function(id,text,x,y,color,fontSize,algin,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawText()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._textFree === undefined) {
            this._textFree = [];
        }else{
            if(this._textFree[id] !== undefined) this.removeChild(this._textFree[id]);
        }; 
        var width = Graphics.boxWidth;
        var height = Graphics.boxHeight;
        this._textFree[id] = new Sprite(new Bitmap(width,height));
        var textWidth = this._textFree[id].bitmap.measureTextWidth(text);
        this._textFree[id].bitmap.fontSize = fontSize;
        this._textFree[id].bitmap.textColor = color;
        this.changePaintOpacity(this._textFree[id].bitmap,this.isEnabled());
        this._textFree[id].bitmap.drawText(text, 0, 0, textWidth, 35, algin);
        this._textFree[id].x = x;
        this._textFree[id].y = y;
        this.addChild(this._textFree[id]);
    };
};
//--------------------------------------------------------------------------
// ● 歩行グラの描画
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawCharacter = function(id,characterName,characterIndex,x,y,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawCharacter()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._mmcCharacters === undefined) {
            this._mmcCharacters = [];
        }else{
            if(this._mmcCharacters[id] !== undefined) this.removeChild(this._mmcCharacters[id]);
        }; 
        var bitmap = ImageManager.loadCharacter(characterName);
        var big = ImageManager.isBigCharacter(characterName);
        var pw = bitmap.width / (big ? 3 : 12);
        var ph = bitmap.height / (big ? 4 : 8);
        var n = characterIndex;
        var sx = (n % 4 * 3 + 1) * pw;
        var sy = (Math.floor(n / 4) * 4) * ph;
        this._mmcCharacters[id] = new Sprite(new Bitmap());
        this.changePaintOpacity(this._mmcCharacters[id].bitmap,this.isEnabled());
        this._mmcCharacters[id].bitmap = bitmap;
        this._mmcCharacters[id].setFrame(sx, sy, pw, ph);
        this._mmcCharacters[id].x = x;
        this._mmcCharacters[id].y = y;
        this.addChild(this._mmcCharacters[id]);
    };
};
//--------------------------------------------------------------------------
// ● 変数の描画
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawVariables = function(id,vId,x,y,valueSize,valueColor,align,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawVariables()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._variableText === undefined) {
            this._variableText = [];
        }else{
            if(this._variableText[id] !== undefined) this.removeChild(this._variableText[id]);
        }; 
        var width = Graphics.boxWidth;
        var height = Graphics.boxHeight;
        var variable = $gameVariables.value(vId);
        this._variableText[id] = new Sprite(new Bitmap(width,height));
        var textWidth = this._variableText[id].bitmap.measureTextWidth(variable);
        this._variableText[id].bitmap.fontSize = valueSize;
        this._variableText[id].bitmap.textColor = valueColor;
        this.changePaintOpacity(this._variableText[id].bitmap,this.isEnabled());
        this._variableText[id].bitmap.drawText(variable, 0, 0, textWidth, 35);
        switch (align) {
            case 'right':
                this._variableText[id].x = x - textWidth;
                break;
            case 'center':
                this._variableText[id].x = x - (textWidth/2);
                break;
            case 'left':
                this._variableText[id].x = x;
                break;
        };
        this._variableText[id].y = y;
        this.addChild(this._variableText[id]);
    };
};
//--------------------------------------------------------------------------
// ● 項目用ラインの描画
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawItemLine = function(id,x,y,w,color,op,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawItemLine()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._itemLine === undefined) {
            this._itemLine = [];
        }else{
            if(this._itemLine[id] !== undefined) this.removeChild(this._itemLine[id]);
        }; 
        var width = Graphics.boxWidth;
        var height = Graphics.boxHeight;
        var color = color;
        this._itemLine[id] = new Sprite(new Bitmap(width,height));
        this._itemLine[id].bitmap.fillRect(0, 0, w, 1, color);
        this._itemLine[id].x = x;
        this._itemLine[id].y = y;
        this._itemLine[id].opacity = op;
        this.addChild(this._itemLine[id]);
    };
};
//--------------------------------------------------------------------------
// ● 項目用背景ラインの描画
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawItemBackground = function(id,x,y,w,h,color,op,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawItemBackground()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._itemBackground === undefined) {
            this._itemBackground = [];
        }else{
            if(this._itemBackground[id] !== undefined) this.removeChild(this._itemBackground[id]);
        }; 
        var width = Graphics.boxWidth;
        var height = Graphics.boxHeight;
        var color = color;
        this._itemBackground[id] = new Sprite(new Bitmap(width,height));
        this._itemBackground[id].bitmap.fillRect(0, 0, w, h, color);
        this._itemBackground[id].x = x;
        this._itemBackground[id].y = y;
        this._itemBackground[id].opacity = op;
        this.addChild(this._itemBackground[id]);
    };
};
//--------------------------------------------------------------------------
// ● コマンド名の作成
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawCommandName = function(showName = true,x = 0,y = 0,fontSize = 28,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawCommandName()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._text !== undefined) {
            this.removeChild(this._text);
        };
        var asLabel = false;
        var width = Graphics.boxWidth;
        var height = Graphics.boxHeight;
        var optionTxt = "";
        var currentCommand = this.findSelfInfo();
        if(currentCommand) {
            if(currentCommand.callType === 'functionCommand') {
                if(currentCommand.commandTypeName.includes(':switch')) {
                    var switchId = currentCommand.commandTypeName.match(/:switch (.*) (.*)/i)[1];
                    optionTxt = $gameSwitches.value(switchId) ? "ON" : "OFF";
                }else if(currentCommand.commandTypeName.includes(':variable')) {
                    var variableId = currentCommand.commandTypeName.match(/:variable (.*) (.*)/i)[1];
                    asLabel = currentCommand.commandTypeName.match(/:variable (.*) (.*)/i)[2] === "true" ? true : false;
                    optionTxt = $gameVariables.value(variableId);
                }else if(currentCommand.commandTypeName.includes(':alwaysDash')) {
                    var value = ConfigManager['alwaysDash'];
                    optionTxt = value ? "ON" : "OFF";
                }else if(currentCommand.commandTypeName.includes(':commandRemember')) {
                    var value = ConfigManager['commandRemember'];
                    optionTxt = value ? "ON" : "OFF";
                }else if(currentCommand.commandTypeName.includes(':bgmVolume')) {
                    var value = ConfigManager['bgmVolume'];
                    optionTxt = value + "%";
                }else if(currentCommand.commandTypeName.includes(':bgsVolume')) {
                    var value = ConfigManager['bgsVolume'];
                    optionTxt = value + "%";
                }else if(currentCommand.commandTypeName.includes(':meVolume')) {
                    var value = ConfigManager['meVolume'];
                    optionTxt = value + "%";
                }else if(currentCommand.commandTypeName.includes(':seVolume')) {
                    var value = ConfigManager['seVolume'];
                    optionTxt = value + "%";
                };
            };
        };
        this._text = new Sprite(new Bitmap(width,height));
        this._text.bitmap.fontSize = fontSize;
        this.changePaintOpacity(this._text.bitmap,this.isEnabled());
        if(this._design === undefined) {
            if(showName) {
                if(asLabel) {
                    this._text.bitmap.drawText(optionTxt,0,0,180,35);
                }else{
                    this._text.bitmap.drawText(this.commandName(),0,0,180,35);
                    if(optionTxt !== "") {
                        this._text.bitmap.drawText(optionTxt,0,0,180,35,'right');
                    };
                };
            };
        }else{
            if(showName) {
                if(asLabel) {
                    this._text.bitmap.drawText(optionTxt,0,0,180,35);
                }else{
                    this._text.bitmap.drawText(this.commandName(),0,0,180,35);
                    if(optionTxt !== "") {
                        this._text.bitmap.drawText(optionTxt,0,0,180,35,'right');
                    };
                };
            };
        };
        this._text.x = x;
        this._text.y = y;
        this.addChild(this._text);
    };
};
//--------------------------------------------------------------------------
// ● 自由イラストの描画
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.mmcDrawPicture = function(id,picName,x,y,w,h,op,anchor,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        //「コマンド型」ウィンドウの「各コマンドのデザイン設定」の
        // いづれかのコマンドの「描画するデータリスト」の
        //「this.mmcDrawPicture()」の showScript にて
        // スクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this._itemPicture === undefined) {
            this._itemPicture = [];
        }else{
            if(this._itemPicture[id] !== undefined) this.removeChild(this._itemPicture[id]);
        };
        var width = Graphics.boxWidth;
        var height = Graphics.boxHeight;
        var pictureDir = picName;
        var color = color;
        if(this._itemPicture[id] === undefined) this._itemPicture[id] = new Sprite(new Bitmap(width,height));
        this._itemPicture[id].bitmap = ImageManager.loadMmc(pictureDir);
        this._itemPicture[id].x = x;
        this._itemPicture[id].y = y;
        if(anchor) {
            this._itemPicture[id].anchor.x = 0.5;
            this._itemPicture[id].anchor.y = 0.5;
        };
        this._itemPicture[id].opacity = op;
        this.addChild(this._itemPicture[id]);
    };
};
//--------------------------------------------------------------------------
// ● データ毎の余白分
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.spacing = function() {
    return 12;
};
//--------------------------------------------------------------------------
// ● データ毎の余白分
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.padding = function() {
    return 18;
};
//--------------------------------------------------------------------------
// ● データ毎のテキスト余白分
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.textPadding = function() {
    return 6;
};
//--------------------------------------------------------------------------
// ● データ毎の横項目数
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.maxCols = function() {
    return this._windowSetup.caseCommandCol;
};
//--------------------------------------------------------------------------
// ● 項目の横幅
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.itemWidth = function() {
    return Math.floor((this._commandWidth - this.padding() * 2 +
        this.spacing()) / this.maxCols() - this.spacing());
};
//--------------------------------------------------------------------------
// ● 項目の縦幅
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.itemHeight = function() {
    return 36;
};
//--------------------------------------------------------------------------
// ● 配置座標
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.setupPos = function() {
    this.x = this.standbyPosX();
    this.y = this.standbyPosY();
};
//--------------------------------------------------------------------------
// ● 本来のx座標
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.standbyPosX = function() {
    if(this._design !== undefined) {
        if(this._isListType) {
            return ((this._design.ajustX + (this.spacing()*2)) + (Math.floor(this._selfIndex % this._maxCols) * (this._commandWidth + this._design.ajustW))) - this._scrollX;
        }else if(this._isFreeType) {
            return this._design.ajustX + (this.spacing()*2);
        };
    }else{
        if(this._isListType) {
            return ((this.spacing()*2) + (Math.floor(this._selfIndex % this._maxCols) * (this.itemWidth() + this.spacing()))) - this._scrollX;
        }else if(this._isFreeType) {
            return this.spacing()*2;
        };
    };
};
//--------------------------------------------------------------------------
// ● 本来のy座標
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.standbyPosY = function() {
    if(this._design !== undefined) {
        if(this._isListType) {
            return ((this._design.ajustY + (this.spacing() + this.textPadding())) + (Math.floor(this._selfIndex / this._maxCols) * (this.itemHeight() + this._design.ajustH))) - this._scrollY;
        }else if(this._isFreeType) {
            return (this._design.ajustY + (this.spacing() + this.textPadding()));
        };
    }else{
        if(this._isListType) {
            return ((this.spacing() + this.textPadding()) + (Math.floor(this._selfIndex / this._maxCols) * this.itemHeight())) - this._scrollY;
        }else if(this._isFreeType) {
            return this.spacing() + this.textPadding();
        };
    };
};
//--------------------------------------------------------------------------
// ● スライド
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.slide = function(x,y,slideSpeedX,slideSpeedY) {
    this._slide_x = x;
    this._slide_y = y;
    this._slideSpeed_x = slideSpeedX;
    this._slideSpeed_y = slideSpeedY;
    if(slideSpeedX > 0) this._commandSlidingX = true;
    if(slideSpeedY > 0) this._commandSlidingY = true;
    this.mmcOutSideSlideApproched = true;
};
//--------------------------------------------------------------------------
// ● コマンド名
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.commandName = function() {
    return this._command.name;
};
//--------------------------------------------------------------------------
// ● 使用可能か
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.isEnabled = function() {
    return this._command.enabled;
};
//--------------------------------------------------------------------------
// ● 使用状況の不透明度
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.changePaintOpacity = function(bitmap,enabled) {
    bitmap.paintOpacity = enabled ? 255 : this.translucentOpacity();
};
//--------------------------------------------------------------------------
// ● 半透明
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.translucentOpacity = function() {
    return 160;
};
//--------------------------------------------------------------------------
// ● 選択時の挙動
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.setSelection = function() {
    if(this._isHighLightMode) this.opacity = this._currentIndex === this._selfIndex ? 255 : this.translucentOpacity();
};
//--------------------------------------------------------------------------
// ● リフレッシュ
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.refresh = function() {
    this.createBackground();
    if(this._design === undefined) {
        this.mmcDrawCommandName();
    }else{
        if(this._design.commandDrawList.length > 0) {
            this._design.commandDrawList.forEach(draw => {
                if(draw) {
                    try {
                        eval(draw);
                    } catch (e) {
                        console.error(e);
                        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のコマンド名「 ' + this.commandName() + ' 」のデザイン設定\n描画するデータリスト内にある\n「 <font color="red"><b>' + draw + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                        error = error.replace(/\n/g, '<br>');
                        Graphics.printError('シーンカスタマイズMV : Error(er106smb)', error);
                        SceneManager.stop();
                    };
                };
            });
        };
    };
    this.slideSetup();
    this.setSelection();
};
//--------------------------------------------------------------------------
// ● 更新
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.update = function() {
    Sprite.prototype.update.call(this);
    if(this._isAccessing) {
        if(this._currentIndex !== SceneManager._scene.mmcGetCustomWindow(this._parentWindow)._index) {
            this._currentIndex = SceneManager._scene.mmcGetCustomWindow(this._parentWindow)._index;
            this.refresh();
        };
    };
    this.updateFrame();
    this.processTouch();
    this.commandSlide();
    this.startCommandOpenTimer();
};
//--------------------------------------------------------------------------
// ● 画像内判定の更新
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.updateFrame = function() {
    var frame;
    if (this._touching) {
        frame = this._hotFrame;
    } else {
        frame = this._coldFrame;
    }
    if (frame) {
        this.setFrame(frame.x, frame.y, frame.width, frame.height);
    }
};
//--------------------------------------------------------------------------
// ● タッチ確定の処理
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.callClickHandler = function() {
    switch (this._design.touchProcess) {
        case 'default':
            if(this._selfIndex === SceneManager._scene.mmcGetCustomWindow(this._parentWindow)._index) {
                SceneManager._scene.mmcGetCustomWindow(this._parentWindow).spriteProcessOk();
            }else{
                SceneManager._scene.mmcGetCustomWindow(this._parentWindow).select(this._selfIndex);
                SoundManager.playCursor();
            };
            break;
        case 'touchOnce':
            SceneManager._scene.mmcGetCustomWindow(this._parentWindow).select(this._selfIndex);
            SceneManager._scene.mmcGetCustomWindow(this._parentWindow).spriteProcessOk();
            break;
    };
};
//--------------------------------------------------------------------------
// ● タッチ判定の更新
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.processTouch = function() {
    if (this.isActive() && this.isParentWindowActive()) {
        if (TouchInput.isTriggered() && this.isButtonTouched()) {
            this._touching = true;
        }
        if (this._touching) {
            if (TouchInput.isReleased() || !this.isButtonTouched()) {
                this._touching = false;
                if (TouchInput.isReleased()) {
                    this.callClickHandler();
                }
            }
        }
    } else {
        this._touching = false;
    }
};
//--------------------------------------------------------------------------
// ● タッチ状態が有効か
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.isActive = function() {
    var node = this;
    while (node) {
        if (!node.visible) {
            return false;
        }
        node = node.parent;
    }
    return true;
};
//--------------------------------------------------------------------------
// ● 親ウィンドウの有効状態
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.isParentWindowActive = function() {
    return SceneManager._scene.mmcGetCustomWindow(this._parentWindow).active;
};
//--------------------------------------------------------------------------
// ● タッチされたか
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.isButtonTouched = function() {
    var x = this.canvasToLocalX(TouchInput.x);
    var y = this.canvasToLocalY(TouchInput.y);
    return x >= 0 && y >= 0 && x < this.width && y < this.height;
};
//--------------------------------------------------------------------------
// ● キャンバスx座標
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.canvasToLocalX = function(x) {
    var node = this;
    while (node) {
        x -= node.x;
        node = node.parent;
    }
    return x;
};
//--------------------------------------------------------------------------
// ● キャンバスy座標
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.canvasToLocalY = function(y) {
    var node = this;
    while (node) {
        y -= node.y;
        node = node.parent;
    }
    return y;
};
//--------------------------------------------------------------------------
// ● スライドイン/スライドアウト
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.commandSlide = function() {
    if(this._commandSlidingX) {
        if(this.x >= this._slide_x) {
            this.x -= this._slideSpeed_x;
            if(this.x <= this._slide_x) {
                this.x = this._slide_x;
                this._slideSpeed_x = 0;
                this._commandSlidingX = false;
            };
        }else if(this.x <= this._slide_x) {
            this.x += this._slideSpeed_x;
            if(this.x >= this._slide_x) {
                this.x = this._slide_x;
                this._slideSpeed_x = 0;
                this._commandSlidingX = false;
            };
        };
    };
    if(this._commandSlidingY) {
        if(this.y >= this._slide_y) {
            this.y -= this._slideSpeed_y;
            if(this.y <= this._slide_y) {
                this.y = this._slide_y;
                this._slideSpeed_y = 0;
                this._commandSlidingY = false;
            };
        }else if(this.y <= this._slide_y) {
            this.y += this._slideSpeed_y;
            if(this.y >= this._slide_y) {
                this.y = this._slide_y;
                this._slideSpeed_y = 0;
                this._commandSlidingY = false;
            };
        };
    };
    if(this._closeSliding) {
        if(!this._commandSlidingX && !this._commandSlidingY) {
            this._commandStartSlide = false;
            this._closeSliding = false;
            this._closeing = false;
        };
    };
};
//--------------------------------------------------------------------------
// ● スライド初期化
//--------------------------------------------------------------------------
Sprite_mmcMenuButtons.prototype.clearSlide = function() {
    this._commandStartSlide = false;
    this._commandSlidingX = false;
    this._commandSlidingY = false;
    this._slide_x = this.standbyPosX();
    this._slide_y = this.standbyPosY();
    this._slideSpeed_x = 0;
    this._slideSpeed_y = 0;
};

//=============================================================================
// Window_MmcWindowStandard - メニュー用カスタムウィンドウ [標準型]
//=============================================================================

function Window_MmcStandardWindow() {
    this.initialize.apply(this,arguments);
};

Window_MmcStandardWindow.prototype = Object.create(Window_Selectable.prototype);
Window_MmcStandardWindow.prototype.constructor = Window_MmcStandardWindow;

Window_MmcStandardWindow.prototype.initialize = function(x,y,w,h,windowSetup) {
    try {
        var x = eval(x);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + windowSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウx座標にて\n「<font color="red"><b> ' + x + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
    try {
        var y = eval(y);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + windowSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウy座標にて\n「<font color="red"><b> ' + y + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
    try {
        var width = eval(w);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + windowSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウの横幅にて\n「<font color="red"><b> ' + w + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
    try {
        var height = eval(h);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + windowSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウの縦幅にて\n「<font color="red"><b> ' + h + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
    this.windowSetup(windowSetup,x,y,width,height);
    Window_Selectable.prototype.initialize.call(this,x,y,width,height);
    this.width = width;
    this.height = height;
    this._isWindow = false;
    this._mmcCursorFlag = "";
    this.windowSlideConditionSetup();
    this.createBackgroundLayer();
    this.createWindowBackground();
    this.createMmcNewArrows();
    this.setupForLogMode();
    this._pendingIndex = -1;
    this.refresh();
};
//スキルアクター保存用
var _AyatamSceneCustom_Window_SkillList_prototype_setActor = Window_SkillList.prototype.setActor;
//--------------------------------------------------------------------------
// ● 継承元ウィンドウのセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.windowSetup = function(window,x,y,w,h) {
    this._windowSetup = window;
    this._pageIndex = 0;
    this._maxPage = 0;
    this._originalWindowX = x;
    this._originalWindowY = y;
    this._windowWidth = w;
    this._windowHeight = h;
    this._mmcEnableCursorHighlight = this._windowSetup.windowHighLight;
    this._isListType = this._windowSetup.windowDesignType === "listType" ? true : false;
    this._isFreeType = this._windowSetup.windowDesignType === "freeType" ? true : false;
    this._updateAlways = this._windowSetup.windowUpdateBehavior;
    if(this._windowSetup.infoSharing === "shareActor") this._infoSharing = "actor";
    if(this._windowSetup.infoSharing === "shareCustomInfo") this._infoSharing = "custom";
    if(this._windowSetup.infoSharing === "ignoreSharing") this._infoSharing = "ignore";
    this.setupWindowPage();
    this.setupStandardTargetData();
};
//--------------------------------------------------------------------------
// ● ページ用のセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setupWindowPage = function() {
    if(this._windowSetup.drawPageList === undefined) return;
    if(this._windowSetup.drawPageList === "") return;
    if(typeof(this._windowSetup.drawPageList) !== 'object') {
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のデータウィンドウの設定\n描画するデータリストにて\n「<font color="red"><b> ' + this._windowSetup.drawPageList + '</b></font> 」\nの指定する場所に誤りがあります。\n描画するデータリストの<font color="red"><b>テキストタブ</b></font>に指定されている方は、\n描画するデータリストを<font color="red"><b>右クリック>クリア</b></font>を行い、\n描画するデータリスト > 該当ページ番号 > ページデータリスト(編集可能オプションのリストタブ)に指定してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
        return;
    };
    if(this._windowSetup.drawPageList.length <= 0) return;
    if(typeof(this._windowSetup.drawPageList[this._pageIndex].standardDrawList) !== 'object') {
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のデータウィンドウの設定\n描画するデータリスト <font color="skyblue"><b>' + (this._pageIndex + 1) + 'ページ目</b></font>にて\n「<font color="red"><b> ' + this._windowSetup.drawPageList[this._pageIndex].standardDrawList + '</b></font> 」\nの指定する場所に誤りがあります。\n描画するデータリスト > ' + (this._pageIndex + 1) + 'ページ目 > ページデータリストの<font color="red"><b>テキストタブ</b></font>に指定されている方は、\n描画するデータリストを<font color="red"><b>右クリック>クリア</b></font>を行い、\n描画するデータリスト > 該当ページ番号 > ページデータリスト(編集可能オプションのリストタブ)に指定してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
        return;
    };
    this._pageDrawList = this._windowSetup.drawPageList;
    this._pageIndex = 0;
    this._maxPage = this._windowSetup.drawPageList.length - 1;
};
//--------------------------------------------------------------------------
// ● ページ操作用セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.canTurnPage = function() {
    return this._maxPage > 0;
};
//--------------------------------------------------------------------------
// ● ページ操作用セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.turnPreivousPage = function() {
    if(this._pageDrawList === undefined) return;
    if(this._maxPage <= 0) return;
    this._pageIndex--;
    if(this._pageIndex < 0) {
        this._pageIndex = this._maxPage;
    };
    this.refresh();
};
//--------------------------------------------------------------------------
// ● ページ操作用セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.turnNextPage = function() {
    if(this._pageDrawList === undefined) return;
    if(this._maxPage <= 0) return;
    this._pageIndex++;
    if(this._pageIndex > this._maxPage) {
        this._pageIndex = 0;
    };
    this.refresh();
};
//--------------------------------------------------------------------------
// ● ページ操作用セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setPage = function(page) {
    if(this._pageDrawList === undefined) return;
    if(this._maxPage <= 0) return;
    if(page > this._maxPage) page = 0;
    if(page < 0) page = this._maxPage;
    this._pageIndex = page;
    this.refresh();
};
//--------------------------------------------------------------------------
// ● ページ操作用セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.getPage = function() {
    return this._pageIndex;
};
//--------------------------------------------------------------------------
// ● ログモード用のセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.currentDrawPage = function() {
    if(this._pageDrawList === undefined) return undefined;
    if(this._pageDrawList[this._pageIndex] === undefined) return undefined;
    return this._pageDrawList[this._pageIndex].standardDrawList;
};
//--------------------------------------------------------------------------
// ● ログモード用のセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setupForLogMode = function() {
    this._lines = [];
    this._methods = [];
    this._waitCount = 0;
    this._waitMode = '';
    this._baseLineStack = [];
    this._spriteset = null;
};
//--------------------------------------------------------------------------
// ● バトルシステム受け取り用の画面情報設定
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isBusy = function() {
    return this._waitCount > 0 || this._waitMode || this._methods.length > 0;
};
//--------------------------------------------------------------------------
// ● バトルシステム用のウィンドウ可動状態
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setSpriteset = function(spriteset) {
    this._spriteset = spriteset;
};
//--------------------------------------------------------------------------
// ● 参照データのセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setupStandardTargetData = function() {
    this._customFunctionName = "";
    var targetData = undefined;
    if(this._windowSetup.standardTargetData !== "") {
        if(this._windowSetup.standardTargetData.length > 0) {
            targetData = this._windowSetup.standardTargetData[this._pageIndex];
        };
    };
    if(targetData === undefined) targetData = "";
    this.mmcTargetResultList = [];
    this.mmcFCmd = false;
    if(targetData !== "") {
        if(targetData.includes(':actorEquips')) {
            this.mmcFCmd = true;
            this.mmcDataCategory = 'actorEquipsMode';
            this.setActorEquipList(targetData);
        };
        if(targetData.includes(':customPictureList')) {
            this.mmcFCmd = true;
            this.setCustomPictureList();
        };
        if(targetData.includes(':functionNote')) {//ノート収集型
            this.mmcFCmd = true;
            this.setCustomNoteList(targetData);
        };
        if(targetData.includes(':commandRecieve')) {//コマンドリシーブ型
            this.mmcFCmd = true;
            this.setRecieveList(targetData);
        };
        if(targetData.includes(':logMode')) {//コマンドリシーブ型
            this.mmcFCmd = true;
            this.mmcDataCategory = 'logMode';
        };
        if(targetData.includes(':helpMode')) {//ヘルプリシーブ型
            this.mmcFCmd = true;
            this.mmcDataCategory = 'helpMode';
            this.mmcIsHelpWindow = true;
        };
        //カスタムファンクション以外だった場合、ゲームデータを格納
        if(!this.mmcFCmd) {
            try {
                if(Array.isArray(eval(targetData))) {
                    try {
                        this.mmcTargetResultList = eval(targetData);
                    } catch (e) {
                        console.error(e);
                        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ\n' + (this._pageIndex + 1) + 'ページ目の「 <font color="skyblue"><b>' + this._windowSetup.standardTargetData + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                        error = error.replace(/\n/g, '<br>');
                        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                        SceneManager.stop();
                    };
                }else{
                    try {
                        this.mmcTargetResultList = [eval(targetData)];
                    } catch (e) {
                        console.error(e);
                        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ\n' + (this._pageIndex + 1) + 'ページ目の「 <font color="skyblue"><b>' + this._windowSetup.standardTargetData + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                        error = error.replace(/\n/g, '<br>');
                        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                        SceneManager.stop();
                    };
                };
            } catch (e) {
                console.error(e);
                var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ\n' + (this._pageIndex + 1) + 'ページ目の「 <font color="skyblue"><b>' + this._windowSetup.standardTargetData + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                error = error.replace(/\n/g, '<br>');
                Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                SceneManager.stop();
            };
        };
        if(this.checkIfActorData()) {
            this._formationAble = JSON.stringify(this.mmcTargetResultList.concat().sort()) === JSON.stringify($gameParty.members().concat().sort());
        }else{
            this._formationAble = false;
        };
        this._formationAble = this._isFreeType ? false : this._formationAble;
    }else{
        this.mmcTargetResultList = undefined;
        this._formationAble = false;
    };
    // console.log("this.mmcTargetResultList",targetData,this.mmcTargetResultList);
};
//--------------------------------------------------------------------------
// ● 参照データ commandRecieve
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setRecieveList = function(targetData) {
    if(targetData.includes('actorSkill')) {
        this.mmcDataCategory = 'standBySkills';
    }
    if(targetData.includes('actorEquip')) {
        this.mmcDataCategory = 'standByEquips';
    };
};
//--------------------------------------------------------------------------
// ● 参照データ アクター装備を全て描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setActorEquipList = function(targetData) {
    var script = targetData.split(':actorEquips')[1].trim();
    try {
        var actor = eval(script);
        if(Array.isArray(actor)) {
            this.mmcTargetResultList = undefined;
            this._formationAble = false;
        }else{
            this.mmcTargetResultList = actor.equipSlots();
            this._mmcBattleActor = actor;
            this._formationAble = false;
        };
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ\n' + (this._pageIndex + 1) + 'ページ目の「<font color="red"><b> :actorEquips ' + script + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
};
//--------------------------------------------------------------------------
// ● 参照データ functionNote
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setCustomNoteList = function(targetData) {
    var itemCatgory = '';
    try {
        if(targetData.match(/:functionNote (.*), (.*)/i)[1].includes(':')) {
            var currentData = eval(targetData.match(/:functionNote (.*), (.*)/i)[1].split(':')[0]);
            itemCatgory = String(targetData.match(/:functionNote (.*), (.*)/i)[1].split(':')[1]);
        }else{
            var currentData = eval(targetData.match(/:functionNote (.*), (.*)/i)[1]);
        };
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ\n' + (this._pageIndex + 1) + 'ページ目の「<font color="red"><b> ' + targetData + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
    if(itemCatgory !== '') {
        var resultCategory = [];
        switch (itemCatgory) {
            case 'Item':
                currentData.forEach(item => {
                    if(item) {
                        if(DataManager.isItem(item) && item.itypeId === 1) resultCategory.push(item);
                    };
                });
                this.mmcDataCategory = 'partyItemList';
                break;
            case 'Weapon':
                currentData.forEach(item => {
                    if(item) {
                        if(DataManager.isWeapon(item)) resultCategory.push(item);
                    };
                });
                this.mmcDataCategory = 'partyItemList';
                break;
            case 'Armor':
                currentData.forEach(item => {
                    if(item) {
                        if(DataManager.isArmor(item)) resultCategory.push(item);
                    };
                });
                this.mmcDataCategory = 'partyItemList';
                break;
            case 'KeyItem':
                currentData.forEach(item => {
                    if(item) {
                        if(DataManager.isItem(item) && item.itypeId === 2) resultCategory.push(item);
                    };
                });
                this.mmcDataCategory = 'partyItemList';
                break;
            case 'BattleItem':
                currentData.forEach(item => {
                    if(item) {
                        if($gameParty.canUse(item)) resultCategory.push(item);
                    };
                });
                this.mmcDataCategory = 'partyItemList';
                break;
            default:
                var customCategory = false;
                currentData.forEach(item => {
                    if(item) {
                        var noteList = item.note.split(/[\r\n]+/);
                        noteList.forEach(note => {
                            if(note !== "") {
                                if(note.match(/<mmc itemCategory>/i)) customCategory = true;
                                if(note.match(/<\/mmc itemCategory>/i)) customCategory = false;
                                if(customCategory) {
                                    if(String(note.match(/(.*)/i)[0]).includes(itemCatgory)) {
                                        if(!resultCategory.includes(item)) {
                                            resultCategory.push(item);
                                        };
                                    };
                                };
                            };
                        });
                    };
                });
                break;
        };
        currentData = resultCategory;
    };
    var noteTag = String(targetData.match(/:functionNote (.*), (.*)/i)[2]);
    var customList = false;
    if(noteTag !== 'false') {
        if(Array.isArray(currentData)) {
            currentData.forEach(ca => {
                if(ca) {
                    if(ca.constructor === Game_Actor) {
                        var caList = $dataActors[ca.actorId()].note.split(/[\r\n]+/);
                    };
                    if(ca.constructor === Object) {
                        var caList = ca.note.split(/[\r\n]+/);
                    };
                    if(caList.length <= 0) return;
                    caList.forEach(note => {
                        if(note !== "") {
                            if(note.match(/<mmc customNote>/i)) customList = true;
                            if(note.match(/<\/mmc customNote>/i)) customList = false;
                            if(customList) {
                                if(String(note.match(/(.*)/i)[0]).includes(noteTag)) {
                                    if(!this.mmcTargetResultList.includes(ca)) {
                                        this.mmcTargetResultList.push(ca);
                                    };
                                };
                            };
                        };
                    });
                };
            });
        }else{
            if(currentData.constructor === Game_Actor) {
                var caList = $dataActors[currentData.actorId()].note.split(/[\r\n]+/);
            };
            if(caList.length <= 0) return;
            caList.forEach(note => {
                if(note !== "") {
                    if(note.match(/<mmc customNote>/i)) customList = true;
                    if(note.match(/<\/mmc customNote>/i)) customList = false;
                    if(customList) {
                        if(String(note.match(/(.*)/i)[0]).includes(noteTag)) {
                            if(!this.mmcTargetResultList.includes(currentData)) {
                                this.mmcTargetResultList.push(currentData);
                            };
                        };
                    };
                };
            });
        };
    }else{
        if(Array.isArray(currentData)) {
            this.mmcTargetResultList = currentData;
        }else{
            this.mmcTargetResultList.push(currentData);
        };
    };
};
//--------------------------------------------------------------------------
// ● 参照データ customPictureList
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setCustomPictureList = function() {
    this.mmcDataCategory = ":customPictureList";
    var list = this._windowSetup.standardTargetData.match(/:customPictureList (.*), (.*)/i)[1];
    var vId = this._windowSetup.standardTargetData.match(/:customPictureList (.*), (.*)/i)[2];
    this._functionList = JSON.parse(JSON.stringify(list,(key,value)=>{
        try{return JSON.parse(value);} catch (e) {}
        return value;
        }
    ));
    this._functionVid = JSON.parse(JSON.stringify(vId,(key,value)=>{
        try{return JSON.parse(value);} catch (e) {}
        return value;
        }
    ));
    if(this._functionVid > 0) {
        this.mmcTargetResultList = this._functionList[$gameVariables.value(this._functionVid)];
    }else{
        this.mmcTargetResultList = this._functionList[0];
    };
};
//--------------------------------------------------------------------------
// ● 参照データの更新
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.updateStandardTargetData = function() {
    switch (this.mmcDataCategory) {
        case ':customPictureList':
            if(this._functionVid > 0) {
                this.mmcTargetResultList = this._functionList[$gameVariables.value(this._functionVid)];
            };
            break;
    };
};
//--------------------------------------------------------------------------
// ● 背景レイアウトのセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.createBackgroundLayer = function() {
    this._mmcbackgroundLayer = new Sprite();
    this.addChildToBack(this._mmcbackgroundLayer);
};
//--------------------------------------------------------------------------
// ● 背景のセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.createWindowBackground = function() {
    if(!this._windowSetup.windowBackground.usePicture) return;
    if(this._windowSetup.windowBackground.pictureFile === "") return;
    if(this._mmcWindowBackground === undefined) {
        var width = Graphics.width;
        var height = Graphics.height;
        this._mmcWindowBackground = new Sprite(new Bitmap(width,height));
        this._mmcWindowBackground.bitmap = ImageManager.loadMmc(this._windowSetup.windowBackground.pictureFile);
        this._mmcWindowBackground.x = this._windowSetup.windowBackground.pictureX;
        this._mmcWindowBackground.y = this._windowSetup.windowBackground.pictureY;
        if(this._windowSetup.windowBackground.pictureAnchor) {
            this._mmcWindowBackground.anchor.x = 0.5;
            this._mmcWindowBackground.anchor.y = 0.5;
        };
        this._mmcWindowBackground.opacity = this._windowSetup.windowBackground.pictureOpacity;
        this._mmcWindowBackground.z = 1;
        this._mmcbackgroundLayer.addChild(this._mmcWindowBackground);
        this._mmcbackgroundLayer.children.sort(function (a, b) { return a.z - b.z });
    };
};
//--------------------------------------------------------------------------
// ● 左右矢印の作成
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.createMmcNewArrows = function() {
    this.leftArrowVisible = false;
    this.rightArrowVisible = false;
    var w = this._width;
    var h = this._height;
    var q = 24;
    var p = q/2;
    var sx = 96+(96/2);
    var sy = 96-(96/2);
    this._leftArrowSprite = new Sprite();
    this._leftArrowSprite.bitmap = this.windowskin;
    this._leftArrowSprite.anchor.x = 0.5;
    this._leftArrowSprite.anchor.y = 0.5;
    this._leftArrowSprite.setFrame(sx-q, sy-p, p, q);
    this._leftArrowSprite.move(p, h/2);
    this._leftArrowSprite.visible = false;
    this._rightArrowSprite = new Sprite();
    this._rightArrowSprite.bitmap = this.windowskin;
    this._rightArrowSprite.anchor.x = 0.5;
    this._rightArrowSprite.anchor.y = 0.5;
    this._rightArrowSprite.setFrame((sx-p)+q, sy-p, p, q);
    this._rightArrowSprite.move(w-p, h/2);
    this._rightArrowSprite.visible = false;
    this.addChild(this._leftArrowSprite);
    this.addChild(this._rightArrowSprite);
};
//--------------------------------------------------------------------------
// ● ウィンドウのスライド状態のセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.windowSlideConditionSetup = function() {
    this._dataMaxShowItems = this.maxPageItems();
    this._openSlideExecuted = false;
    this._closeSlideExecuted = false;
    this._checkSlideSelectLast = false;
    this._checkSlideForShow = false;
    this._checkSlideForHide = false;
    this._allSliding = false;
    this._slideIsOpening = false;
    this._slideIsClosing = false;
    this._dataSlidingX = false;
    this._dataSlidingY = false;
    if(this._windowSetup.windowSlideSettings.useSlide && this._windowSetup.windowSlideSettings.openWindowSlide) {
        this.x = this.standbyPosX() + this._windowSetup.windowSlideSettings.windowSlideX;
        this.y = this.standbyPosY() + this._windowSetup.windowSlideSettings.windowSlideY;
    };
    this._dataSlideSpeedX = this._windowSetup.windowSlideSettings.dataSlideSpeedX;
    this._dataSlideSpeedY = this._windowSetup.windowSlideSettings.dataSlideSpeedY;
    this._openSlideEnable = this._windowSetup.windowSlideSettings.openWindowSlide;
    this._closeSlideEnable = this._windowSetup.windowSlideSettings.closeWindowSlide;
    this._openDataSlideEnable = this._windowSetup.windowSlideSettings.useOpenDataSlide;
    this._closeDataSlideEnable = this._windowSetup.windowSlideSettings.useCloseDataSlide;
    this._dataAllOpenDelaySlide = this._windowSetup.windowSlideSettings.useOpenSlideDataDelay;
    this._dataAllCloseDelaySlide = this._windowSetup.windowSlideSettings.useCloseSlideDataDelay;
    this._dataDataOpenDelaySlide = this._windowSetup.windowSlideSettings.dataOpenSlide;
    this._dataDataCloseDelaySlide = this._windowSetup.windowSlideSettings.dataCloseSlide;
    this._slideRect = [];
    for(var i = 0; i <= this.maxPageItems(); ++i) {
        if(this._openDataSlideEnable) {//[データ][開]スライドの使用
            var slideX = this._windowSetup.windowSlideSettings.dataSlideX;
            var slideY = this._windowSetup.windowSlideSettings.dataSlideY;
        }else{
            var slideX = 0;
            var slideY = 0;
        };
        this._slideRect[i] = { x: slideX , y: slideY };
    };
    this._windowOpenSlideExecute = false;
    this._dataOpenSlideExecute = false;
    this._startDataOpenDelay = false;
    this._windowCloseSlideExecute = false;
    this._dataCloseSlideExecute = false;
    this._dataCloseAllSlideExecute = false;
    this._startDataCloseDelay = false;
};
//--------------------------------------------------------------------------
// ● ウィンドウ開くデータスライドの遅延セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setupOpenSlideDelays = function() {
    if(this._dataAllOpenDelaySlide) {//[データ全体][開]スライド遅延時間
        var allDelayTime = this._windowSetup.windowSlideSettings.openSlideDataDelay;
        this._dataAllOpenDelayInfo = { delayTime: allDelayTime , currentTime: allDelayTime };
    };
    if(this._dataDataOpenDelaySlide) {//[データ毎][開]スライド遅延時間
        this._dataOpenDelayInfo = [];
        for(var i = 0; i <= this.maxPageItems(); ++i) {
            var dataDelayTime = this._windowSetup.windowSlideSettings.dataOpenSlideDelay;
            var dataCurrentDelayTime = i === 0 ? 0 : dataDelayTime;
            this._dataOpenDelayInfo[i] = { delayTime: dataDelayTime , currentTime: dataCurrentDelayTime };
        };
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウ閉じるデータスライドの遅延セットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setupCloseSlideDelays = function() {
    if(this._dataAllCloseDelaySlide) {//[データ全体][閉]スライド遅延時間
        var allDelayTime = this._windowSetup.windowSlideSettings.closeSlideDataDelay;
        this._dataAllCloseDelayInfo = { delayTime: allDelayTime , currentTime: allDelayTime };
    };
    if(this._dataDataCloseDelaySlide) {//[データ毎][閉]スライド遅延時間
        this._dataCloseDelayInfo = [];
        for(var i = 0; i <= this.maxPageItems(); ++i) {
            var dataDelayTime = this._windowSetup.windowSlideSettings.dataCloseSlideDelay;
            this._dataCloseDelayInfo[i] = { delayTime: dataDelayTime , currentTime: dataDelayTime };
        };
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウ開くスライドの開始フラグ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.startWindowOpenSlides = function() {
    this.show();
    if(!this._windowSetup.windowSlideSettings.useSlide) return;
    if(!this._openSlideExecuted) {
        if(this._openSlideEnable && !this._windowOpenSlideExecute) this._windowOpenSlideExecute = true;
        this._checkSlideForHide = false;
        this._startDataCloseDelay = false;
        this._dataCloseAllSlideExecute = false;
        this._dataCloseSlideExecute = false;
        if(this._openDataSlideEnable) {
            if(this.isCloseSliding()) {
                this.swapSlideCloseToOpen();
            }else{
                this.setupOpenSlideDelays();
            };
            this._dataSlidingX = true;
            this._dataSlidingY = true;
            this._startDataOpenDelay = true;
            this._dataOpenSlideExecute = true;
        };
        this._allSliding = true;
        this._slideIsOpening = true;
        this._slideIsClosing = false;
        this._openSlideExecuted = true;
        this._closeSlideExecuted = false;
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウ閉じるスライドの開始フラグ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.startWindowCloseSlides = function() {
    if(!this._windowSetup.windowSlideSettings.useSlide || !this._windowSetup.windowSlideSettings.closeWindowSlide || !this._windowSetup.windowSlideSettings.useCloseDataSlide) {
        this.hide();
        return;
    };
    if(!this._closeSlideExecuted) {
        this._checkSlideForShow = false;
        this._startDataOpenDelay = false;
        this._dataOpenSlideExecute = false;
        if(this._closeDataSlideEnable) {
            if(this.isOpenSliding()) {
                this.swapSlideOpenToClose();
            }else{
                this.setupCloseSlideDelays();
            };
            this._dataSlidingX = true;
            this._dataSlidingY = true;
            this._dataCloseSlideExecute = true;
            this._dataCloseAllSlideExecute = false;
            this._startDataCloseDelay = true;
        };
        this._allSliding = true;
        this._slideIsOpening = false;
        this._slideIsClosing = true;
        this._closeSlideExecuted = true;
        this._openSlideExecuted = false;
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウ閉じ途中からの切り替え
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.swapSlideCloseToOpen = function() {
    if(this._dataAllOpenDelaySlide) {//[データ全体][開]スライド遅延時間
        var timeLeft = this._dataAllOpenDelayInfo.delayTime - this._dataAllCloseDelayInfo.currentTime;
        if(timeLeft < 0) {
            timeLeft = 0;
        };
        this._dataAllOpenDelayInfo.currentTime = timeLeft;
    };
    if(this._dataDataOpenDelaySlide) {//[データ毎][開]スライド遅延時間
        for(var i = 0; i <= this.maxPageItems(); ++i) {
            if(this._dataOpenDelayInfo[i]) {
                if(this._dataCloseDelayInfo[i]) {
                    var timeLeft = this._dataOpenDelayInfo[i].delayTime - this._dataCloseDelayInfo[i].currentTime;
                    if(timeLeft < 0) {
                        timeLeft = 0;
                    };
                    this._dataOpenDelayInfo[i].currentTime = timeLeft;
                };
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウ開き途中からの切り替え
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.swapSlideOpenToClose = function() {
    if(this._dataAllCloseDelaySlide) {//[データ全体][閉]スライド遅延時間
        var timeLeft = this._dataAllCloseDelayInfo.delayTime - this._dataAllOpenDelayInfo.currentTime;
        if(timeLeft < 0) {
            timeLeft = 0;
        };
        this._dataAllCloseDelayInfo = timeLeft;
    };
    if(this._dataDataCloseDelaySlide) {//[データ毎][閉]スライド遅延時間
        for(var i = 0; i <= this.maxPageItems(); ++i) {
            if(this._dataCloseDelayInfo[i]) {
                if(this._dataOpenDelayInfo[i]) {
                    var timeLeft = this._dataCloseDelayInfo[i].delayTime - this._dataOpenDelayInfo[i].currentTime;
                    if(timeLeft < 0) {
                        timeLeft = 0;
                    };
                    this._dataCloseDelayInfo[i].currentTime = timeLeft;
                };
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウ開くスライドの実行中か
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isOpenSliding = function() {
    return this._dataOpenSlideExecute || this._allSliding;
};
//--------------------------------------------------------------------------
// ● ウィンドウ閉じるスライドの実行中か
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isCloseSliding = function() {
    return this._dataCloseSlideExecute || this._allSliding;
};
//--------------------------------------------------------------------------
// ● itemRect - Window_MmcStandardWindow専用化
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.itemRect = function(index) {
    var rect = new Rectangle();
    var maxCols = this.maxCols();
    rect.width = this.itemWidth(); //データの横幅枠
    rect.height = this.itemHeight(); //データの縦幅枠
    rect.x = index % maxCols * (rect.width + this.spacing()) - this._scrollX;
    rect.y = Math.floor(index / maxCols) * rect.height - this._scrollY;
    if(this._windowSetup.windowSlideSettings.useSlide) {
        index = index >= this._dataMaxShowItems ? index % this._dataMaxShowItems : index;
        if(this._slideRect[index] !== undefined) {
            rect.x += this._slideRect[index].x;
            rect.y += this._slideRect[index].y;
        };
    };
    return rect;
};
//--------------------------------------------------------------------------
// ● itemRectForText - Window_MmcStandardWindow専用化
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.itemRectForText = function(index) {
    var rect = this.itemRect(index);
    rect.x += this.textPadding();
    rect.width -= this.textPadding() * 2;
    return rect;
};

Window_MmcStandardWindow.prototype.targetData = function() {
    if(this.mmcTargetResultList !== undefined) {
        if(this.mmcTargetResultList === "") {
            this.popError(0);
            return;
        };
    };
    return this.mmcTargetResultList;
    // ↑の行でエラーが発生した場合は、
    // ウィンドウの作成/設定にて作成されている
    // いづれかの「データ型」ウィンドウの「参照するデータ」にて
    // 記述に誤りがある可能性があります。
    // 再確認をお願いします。
};

Window_MmcStandardWindow.prototype.currentWindow = function() {
    return this._windowSetup;
};

Window_MmcStandardWindow.prototype.formationAble = function() {
    return this._formationAble;
};

Window_MmcStandardWindow.prototype.isListType = function() {
    return this._isListType;
};

Window_MmcStandardWindow.prototype.isFreeType = function() {
    return this._isFreeType;
};

Window_MmcStandardWindow.prototype.updatePattern = function() {
    return this._updateAlways;
};

Window_MmcStandardWindow.prototype.battleActor = function(actor) {
    this._mmcBattleActor = actor;
};

Window_MmcStandardWindow.prototype.setTempActor = function(tempActor) {
    if (this._tempActor !== tempActor) {
        this._tempActor = tempActor;
        if(this._tempActor === undefined) {
            this.mmcCheckPreivousEquipActor = undefined;
            this.mmcCheckPreivousEquipItem = undefined;
        };
        this.refresh();
    };
};

Window_MmcStandardWindow.prototype.getCompareEquipter = function() {
    return this._tempActor;
};

Window_MmcStandardWindow.prototype.setEquipItemWindow = function(window) {
    this.mmcEquipItemWindow = window;
};

Window_MmcStandardWindow.prototype.getEquipItemWindow = function() {
    return this.mmcEquipItemWindow;
};

Window_MmcStandardWindow.prototype.currentBattleActor = function() {
    return this._mmcBattleActor;
};

Window_MmcStandardWindow.prototype.currentEquipSlotId = function() {
    return this._mmcActorSlotId;
};

Window_MmcStandardWindow.prototype.setbattleStypeId = function(skillType) {
    if(this.mmcDataCategory !== 'actorSkillList') {
        if(this.mmcDataCategory !== 'standBySkills') {
            var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ「 <font color="skyblue"><b>' + this._windowSetup.standardTargetData + '</b></font> 」が\nコマンドからデータを受け取るモードの「 <font color="red"><b>:commandRecieve actorSkill</b></font> 」に設定されていません。\n設定を確認してください。';
            error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
            error = error.replace(/\n/g, '<br>');
            Graphics.printError('シーンカスタマイズMV : Error', error);
            SceneManager.stop();
        };
    };
    this._mmcActorSkillType = skillType;
    this.createSkillLists();
    this.mmcDataCategory = 'actorSkillList';
    this.refresh();
};

Window_MmcStandardWindow.prototype.setbattleEquips = function(slotId) {
    if(this.mmcDataCategory !== 'actorEquipList') {
        if(this.mmcDataCategory !== 'standByEquips') {
            var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の参照するデータ「 <font color="skyblue"><b>' + this._windowSetup.standardTargetData + '</b></font> 」が\nコマンドからデータを受け取るモードの「 <font color="red"><b>:commandRecieve actorEquip</b></font> 」に設定されていません。\n設定を確認してください。';
            error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
            error = error.replace(/\n/g, '<br>');
            Graphics.printError('シーンカスタマイズMV : Error', error);
            SceneManager.stop();
        };
    };
    this._mmcActorSlotId = slotId;
    this.createEquipLists();
    this.mmcDataCategory = 'actorEquipList';
    this.refresh();
};

Window_MmcStandardWindow.prototype.setEquipSlotId = function(slotId) {
    this._mmcEquipSlotId = slotId;
};

Window_MmcStandardWindow.prototype.item = function() {
    if(this.mmcDataCategory === 'actorEquipsMode') {
        return this._mmcBattleActor.equips()[this.index()];
    }else{
        if(this.mmcTargetResultList === undefined) return undefined;
        return this.mmcTargetResultList[this.index()];
    };
};

Window_MmcStandardWindow.prototype.createSkillLists = function() {
    if(this._mmcBattleActor) {
        if(this._mmcActorSkillType) {
            var allSkill = this._mmcBattleActor.skills();
            if(allSkill.length > 0) {
                this.mmcTargetResultList = [];
                allSkill.forEach(skill => {
                    if(skill) {
                        if(skill.stypeId === this._mmcActorSkillType) {
                            this.mmcTargetResultList.push(skill);
                        };
                    };
                });
            };
        };
    };
};

Window_MmcStandardWindow.prototype.createEquipLists = function() {
    if(this._mmcBattleActor) {
        if(this._mmcActorSlotId !== undefined) {
            if(this._mmcActorSlotId >= 0) {
                var allItem = $gameParty.allItems();
                this.mmcTargetResultList = [];
                if(allItem.length > 0) {
                    allItem.forEach(item => {
                        if(item) {
                            if(item.etypeId === this._mmcBattleActor.equipSlots()[this._mmcActorSlotId]) {
                                if(this._mmcBattleActor.canEquip(item)) {
                                    this.mmcTargetResultList.push(item);
                                };
                            };
                        };
                    });
                };
                this.mmcTargetResultList.push(null);
            }else{
                this.mmcTargetResultList = [];
                this.mmcTargetResultList.push(null);
            };
        }else{
            this.mmcTargetResultList = [];
            this.mmcTargetResultList.push(null);
        };
    }else{
        this.mmcTargetResultList = [];
        this.mmcTargetResultList.push(null);
    };
};

Window_MmcStandardWindow.prototype.maxItems = function() {
    var targetData = this.targetData() ? this.targetData().length : 1;
    return this.isFreeType() ? 1 : targetData;
};

Window_MmcStandardWindow.prototype.maxCols = function() {
    try {
        return eval(this._windowSetup.caseStandardCol);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の[リスト型専用]横列に表示するデータ数にて「<font color="red"><b> ' + this._windowSetup.caseStandardCol + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
};

Window_MmcStandardWindow.prototype.itemWidth = function() {
    return Math.floor((this._windowWidth - this.padding * 2 +
                       this.spacing()) / this.maxCols() - this.spacing());
};

Window_MmcStandardWindow.prototype.itemHeight = function() {
    var clientHeight = this._windowHeight - this.padding * 2;
    return Math.floor(clientHeight / this.numVisibleRows());
};
//--------------------------------------------------------------------------
// ● 画面枠内での表示データ数
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.numVisibleRows = function() {
    try {
        return eval(this._windowSetup.caseStandardRow);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の[リスト型専用]縦列に表示するデータ数にて「<font color="red"><b> ' + this._windowSetup.caseStandardRow + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
        SceneManager.stop();
    };
};
//--------------------------------------------------------------------------
// ● 対象アクター顔グラの予約
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.loadImages = function() {
    this.targetData().forEach(target => {
        if(target) {
            if(target.constructor === Game_Actor) {
                ImageManager.reserveFace(target.faceName());
            };
        };
    });
};
//--------------------------------------------------------------------------
// ● リスト型データの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.drawItem = function(index) {
    if(this.currentDrawPage() === undefined) return;
    if(this.currentDrawPage().length <= 0) return;
    this.currentDrawPage().forEach(draw => {
        if(draw) {
            try {
                eval(draw);
            } catch (e) {
                console.error(e);
                var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の描画するデータリスト\n' + (this._pageIndex + 1) + 'ページ目の「<font color="red"><b> ' + draw + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                error = error.replace(/\n/g, '<br>');
                Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                SceneManager.stop();
            };
        };
    });
};
//--------------------------------------------------------------------------
// ● 自由型データの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.drawFreeItem = function() {
    if(this.currentDrawPage() === undefined) return;
    if(this.currentDrawPage().length <= 0) return;
    var index = 0;
    this.currentDrawPage().forEach(draw => {
        if(draw) {
            try {
                eval(draw);
            } catch (e) {
                console.error(e);
                var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> の描画するデータリスト\n' + (this._pageIndex + 1) + 'ページ目の「<font color="red"><b> ' + draw + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                error = error.replace(/\n/g, '<br>');
                Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                SceneManager.stop();
            };
        };
    });
};
//--------------------------------------------------------------------------
// ● 参照データがアクター関連のデータか
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.checkIfActorData = function() {
    if(Array.isArray(this._windowSetup.standardTargetData)) {
        if(this._windowSetup.standardTargetData.length > 0) {
            if(this._windowSetup.standardTargetData[this._pageIndex].includes('$gameParty')) return true;
            if(this._windowSetup.standardTargetData[this._pageIndex].includes('$gameActors')) return true;
        };
    };
    if(this.mmcTargetResultList.length > 0) {
        if(this.mmcTargetResultList[0] !== undefined) {
            if(this.mmcTargetResultList[0].constructor === Game_Actor) return true;
        };
    };
    return false;
};
//--------------------------------------------------------------------------
// ● 参照データが敵関連のデータか
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.checkIfEnemyData = function() {
    if(this._windowSetup.standardTargetData.includes('$gameTroop')) return true;
    if(this.mmcTargetResultList.length > 0) {
        if(this.mmcTargetResultList[0] !== undefined) {
            if(this.mmcTargetResultList[0].constructor === Game_Enemy) return true;
        };
    };
    return false;
};
//--------------------------------------------------------------------------
// ● [リスト型対応] テキストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawText = function(index,text,x,y,color,fontSize,align,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawText()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        var textWidth = this.textWidth(text);
        this.changeTextColor(color);
        if(align === 'right') {
            this.drawText(text, rect.x - textWidth, rect.y, textWidth);
        }else if(align === 'center'){
            this.drawText(text, rect.x - (textWidth/2), rect.y, textWidth);
        }else{
            this.drawText(text, rect.x, rect.y, textWidth);
        };
        this.resetTextColor();
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] テキストExの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawTextEx = function(index,text,x,y,align,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawTextEx()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var textWidth = this.drawTextEx(text, 0, this.contents.height);
        if(align === 'right') {
            this.drawTextEx(text, rect.x - textWidth, rect.y, textWidth);
        }else if(align === 'center'){
            this.drawTextEx(text, rect.x - (textWidth/2), rect.y, textWidth);
        }else{
            this.drawTextEx(text, rect.x, rect.y, textWidth);
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アイコンの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawIcon = function(index,iconIndex,x,y,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawIcon()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        if(iconIndex > 0) {
            iconWidth = Window_Base._iconWidth + 4;
            this.drawIcon(iconIndex, rect.x + 2, rect.y);
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 変数の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawVariables = function(index,vId,x,y,valueSize,valueColor,align,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawVariables()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        var variable = $gameVariables.value(vId);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = valueSize;
        var valueWidth = this.textWidth(variable);
        this.changeTextColor(valueColor);
        switch (align) {
            case 'right':
                this.drawText(variable, rect.x - valueWidth, rect.y, valueWidth);
                break;
            case 'center':
                this.drawText(variable, rect.x - (valueWidth/2), rect.y, valueWidth);
                break;
            case 'left':
                this.drawText(variable, rect.x, rect.y, valueWidth);
                break;
        };
        this.changeTextColor(this.normalColor());
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] プレイ時間の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawPlaytime = function(index,drawPattern,x,y,color,fontSize,algin,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawPlaytime()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        var playTime = $gameSystem.playtimeText();
        var playTimeBySec = $gameSystem.playtime();
        var hour = Math.floor(playTimeBySec / 60 / 60);
        var min = Math.floor(playTimeBySec / 60) % 60;
        var sec = playTimeBySec % 60;
        this.changeTextColor(color);
        if(drawPattern) {
            var textWidth = this.textWidth(playTime);
            if(algin === 'right') {
                this.drawText(playTime, rect.x - textWidth, rect.y, textWidth, algin);
            }else if(algin === 'center'){
                this.drawText(playTime, rect.x - (textWidth/2), rect.y, textWidth, algin);
            }else{
                this.drawText(playTime, rect.x, rect.y, textWidth, algin);
            };
        }else{
            var time = hour.padZero(2) + "時間" + min.padZero(2) + "分" + sec.padZero(2) + "秒";
            var textWidth = this.textWidth(time);
            this.drawText(time, rect.x, rect.y, textWidth, algin);
            if(algin === 'right') {
                this.drawText(time, rect.x - textWidth, rect.y, textWidth, algin);
            }else if(algin === 'center'){
                this.drawText(time, rect.x - (textWidth/2), rect.y, textWidth, algin);
            }else{
                this.drawText(time, rect.x, rect.y, textWidth, algin);
            };
        };
        this.resetTextColor();
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 項目用ラインの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawItemLine = function(index,x,y,w,color,op,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawItemLine()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        rect.width = w;
        var color = color;
        this.contents.paintOpacity = op;
        this.contents.fillRect(rect.x, rect.y, rect.width, 1, color);
        this.contents.paintOpacity = 255;
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 項目用背景の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawItemBackground = function(index,x,y,w,h,color,op,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawItemBackground()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        rect.width = w;
        rect.height = h;
        var color = color;
        this.contents.paintOpacity = op;
        this.contents.fillRect(rect.x, rect.y, rect.width, rect.height, color);
        this.contents.paintOpacity = 255;
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 選択中背景ハイライトの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawSelectBackground = function(index,x,y,w,h) {
    if (index === this._pendingIndex) {
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        rect.width += w;
        rect.height += h;
        var color = this.pendingColor();
        this.changePaintOpacity(false);
        this.contents.fillRect(rect.x, rect.y, rect.width, rect.height, color);
        this.changePaintOpacity(true);
    }
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 自由イラストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawPicture = function(index,picName,x,y,w,h,op,anchor,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawPicture()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var rect = this.itemRectForText(index);
        rect.x += 12 + x;
        rect.y += 18 + y;
        rect.width += w;
        rect.height += h;
        if(this._addedPictures === undefined) this._addedPictures = [];
        var pictureDir = picName;
        if(this._addedPictures[index] === undefined) this._addedPictures[index] = new Sprite(new Bitmap(rect.width,rect.height));
        this._addedPictures[index].bitmap = ImageManager.loadMmc(pictureDir);
        this._addedPictures[index].x = rect.x;
        this._addedPictures[index].y = rect.y;
        if(anchor) {
            this._addedPictures[index].anchor.x = 0.5;
            this._addedPictures[index].anchor.y = 0.5;
        };
        this._addedPictures[index].opacity = op;
        this.addChild(this._addedPictures[index]);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター歩行グラの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorCharacter = function(index,x,y,battle = false,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorCharacter()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x + 1;
        rect.y += y + 1;
        var characterName = actor.characterName();
        var characterIndex = actor.characterIndex();
        if(actor.mmcCusWinChara(this._windowSetup.windowName) !== undefined) {
            characterName = actor.mmcCusWinChara(this._windowSetup.windowName)[0];
            characterIndex = actor.mmcCusWinChara(this._windowSetup.windowName)[1];
        }; 
        if(battle) this.changePaintOpacity(actor.isBattleMember());
        var bitmap = ImageManager.loadCharacter(characterName);
        var big = ImageManager.isBigCharacter(characterName);
        var pw = bitmap.width / (big ? 3 : 12);
        var ph = bitmap.height / (big ? 4 : 8);
        var n = characterIndex;
        var sx = (n % 4 * 3 + 1) * pw;
        var sy = (Math.floor(n / 4) * 4) * ph;
        this.contents.blt(bitmap, sx, sy, pw, ph, rect.x - pw / 2, rect.y - ph);
        this.changePaintOpacity(true);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター顔グラの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorFace = function(index,x,y,w,h,battle = false,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorFace()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        rect.width = Window_Base._faceWidth;
        rect.height = Window_Base._faceHeight;
        rect.width += w;
        rect.height += h;
        if(battle) this.changePaintOpacity(actor.isBattleMember());
        this.drawActorFace(actor, rect.x + 1, rect.y + 1, rect.width, rect.height);
        this.changePaintOpacity(true);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター名の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorName = function(index,x,y,fontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorName()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        this.drawActorName(actor, rect.x, rect.y);
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 二つ名の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorNickname = function(index,x,y,fontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorNickname()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        this.drawActorNickname(actor, rect.x, rect.y);
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] レベルの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorLevel = function(index,x,y,numberX,numberY,lvlFontSize,numberFontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorLevel()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var lvlNumX = rect.x + numberX;
        var lvlNumY = rect.y + numberY;
        this.contents.fontSize = lvlFontSize;
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager.levelA, rect.x, rect.y, 48);
        this.resetTextColor();
        this.contents.fontSize = numberFontSize;
        this.drawText(actor.level, lvlNumX, lvlNumY, 36, 'right');
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] すべてのステートの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorStates = function(index,x,y,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorStates()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.drawActorIcons(actor,rect.x,rect.y);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 職業の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorClass = function(index,x,y,fontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorClass()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        this.drawActorClass(actor,rect.x,rect.y);
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] HP数字の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorHpText = function(index,showMax,x,y,numberX,slashX,MaxX,hpFontSize,numFontSize,slashFontSize,maxNumFontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorHpText()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var labelWidth = this.textWidth(TextManager.hpA);
        var valueWidth = this.textWidth(actor.hp);
        var slashWidth = this.textWidth('/');
        var maxValueWidth = this.textWidth(actor.mhp);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = hpFontSize;
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager.hpA, rect.x, rect.y, labelWidth);
        this.contents.fontSize = numFontSize;
        this.changeTextColor(this.hpColor(actor));
        this.drawText(actor.hp, rect.x + labelWidth + numberX, rect.y, valueWidth);
        this.changeTextColor(this.normalColor());
        if(showMax) {
            this.contents.fontSize = slashFontSize;
            this.drawText('/', rect.x + labelWidth + valueWidth + slashX, rect.y, slashWidth, 'right');
            this.contents.fontSize = maxNumFontSize;
            this.drawText(actor.mhp, rect.x + labelWidth + valueWidth + slashWidth + MaxX, rect.y, maxValueWidth, 'right');
        };
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] HPゲージの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorHpGauge = function(index,x,y,width,height,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorHpGauge()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        width = width || 186;
        height = height || 6;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var color1 = this.hpGaugeColor1();
        var color2 = this.hpGaugeColor2();
        rect.x += x;
        rect.y += y;
        var fillW = Math.floor(width * actor.hpRate());
        var gaugeY = rect.y + this.lineHeight() - 8;
        this.contents.fillRect(rect.x, gaugeY, width, height, this.gaugeBackColor());
        this.contents.gradientFillRect(rect.x, gaugeY, fillW, height, color1, color2);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] MP数字の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorMpText = function(index,showMax,x,y,numberX,slashX,MaxX,mpFontSize,numFontSize,slashFontSize,maxNumFontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorMpText()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var labelWidth = this.textWidth(TextManager.mpA);
        var valueWidth = this.textWidth(actor.mp);
        var slashWidth = this.textWidth('/');
        var maxValueWidth = this.textWidth(actor.mmp);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = mpFontSize;
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager.mpA, rect.x, rect.y, labelWidth);
        this.contents.fontSize = numFontSize;
        this.changeTextColor(this.mpColor(actor));
        this.drawText(actor.mp, rect.x + labelWidth + numberX, rect.y, valueWidth);
        this.changeTextColor(this.normalColor());
        if(showMax) {
            this.contents.fontSize = slashFontSize;
            this.drawText('/', rect.x + labelWidth + valueWidth + slashX, rect.y, slashWidth, 'right');
            this.contents.fontSize = maxNumFontSize;
            this.drawText(actor.mmp, rect.x + labelWidth + valueWidth + slashWidth + MaxX, rect.y, maxValueWidth, 'right');
        };
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] MPゲージの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorMpGauge = function(index,x,y,width,height,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorMpGauge()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        width = width || 186;
        height = height || 6;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var color1 = this.mpGaugeColor1();
        var color2 = this.mpGaugeColor2();
        rect.x += x;
        rect.y += y;
        var fillW = Math.floor(width * actor.mpRate());
        var gaugeY = rect.y + this.lineHeight() - 8;
        this.contents.fillRect(rect.x, gaugeY, width, height, this.gaugeBackColor());
        this.contents.gradientFillRect(rect.x, gaugeY, fillW, height, color1, color2);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] TP数字の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorTpText = function(index,x,y,numberX,tpFontSize,numFontSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorTpText()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var labelWidth = this.textWidth(TextManager.tpA);
        var valueWidth = this.textWidth(actor.tp);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = tpFontSize;
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager.tpA, rect.x, rect.y, labelWidth);
        this.contents.fontSize = numFontSize;
        this.changeTextColor(this.tpColor(actor));
        this.drawText(actor.tp, rect.x + labelWidth + numberX, rect.y, valueWidth);
        this.resetTextColor();
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] TPゲージの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorTpGauge = function(index,x,y,width,height,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorTpGauge()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        width = width || 186;
        height = height || 6;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var color1 = this.tpGaugeColor1();
        var color2 = this.tpGaugeColor2();
        rect.x += x;
        rect.y += y;
        var fillW = Math.floor(width * actor.tpRate());
        var gaugeY = rect.y + this.lineHeight() - 8;
        this.contents.fillRect(rect.x, gaugeY, width, height, this.gaugeBackColor());
        this.contents.gradientFillRect(rect.x, gaugeY, fillW, height, color1, color2);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] EXP数字の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorExpText = function(index,x,y,showTo,showNe,toAddWord,neAddWord,toLaX,toLaY,toNumX,toNumY,neLaX,neLaY,neNumX,neNumY,toLaSize,neLaSize,toNumSize,neNumSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorExpText()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var expTotal = TextManager.expTotal.format(TextManager.exp);
        var expNext = TextManager.expNext.format(TextManager.level);
        var currentExp = actor.currentExp();
        var nextExp = actor.nextRequiredExp();
        if (actor.isMaxLevel()) {
            currentExp = '-------';
            nextExp = '-------';
        }
        if(toAddWord !== "") currentExp = currentExp + toAddWord;
        if(neAddWord !== "") nextExp = nextExp + neAddWord;
        var totalLabelW = 0;
        var nextLabelW = 0;
        rect.x += x;
        rect.y += y;
        this.changeTextColor(this.systemColor());
        if(showTo) {
            this.contents.fontSize = toLaSize;
            var totalLabelWidth = this.textWidth(expTotal);
            totalLabelW = totalLabelWidth + toLaX;
            this.drawText(expTotal, rect.x + toLaX, rect.y + toLaY, totalLabelWidth);
        };
        if(showNe) {
            this.contents.fontSize = neLaSize;
            var nextLabelWidth = this.textWidth(expNext);
            nextLabelW = nextLabelWidth;
            this.drawText(expNext, rect.x + neLaX, rect.y + neLaY + 36, nextLabelWidth);
        };
        this.resetTextColor();
        this.contents.fontSize = toNumSize;
        var currentExpWidth = this.textWidth(currentExp);
        this.drawText(currentExp, rect.x + totalLabelW + 10 + toNumX, rect.y + toNumY, currentExpWidth);
        this.contents.fontSize = neNumSize;
        var nextExpWidth = this.textWidth(nextExp);
        this.drawText(nextExp, rect.x + nextLabelW + 10 + neNumX, rect.y + neNumY + 36, nextExpWidth);
        this.resetTextColor();
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] EXPゲージの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorExpGauge = function(index,x,y,color1,color2,width,height,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorExpGauge()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        width = width || 186;
        height = height || 6;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var currentExp = actor.currentExp();
        var nextExp = actor.nextRequiredExp();
        var expRate = currentExp > 0 ? currentExp / nextExp : 0 ;
        rect.x += x;
        rect.y += y;
        var fillW = Math.floor(width * expRate);
        var gaugeY = rect.y + this.lineHeight() - 8;
        this.contents.fillRect(rect.x, gaugeY, width, height, this.gaugeBackColor());
        this.contents.gradientFillRect(rect.x, gaugeY, fillW, height, color1, color2);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 簡易ステータスの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorSimpleStatus = function(index,x,y,w,h,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorSimpleStatus()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        rect.width += w;
        rect.height += h;
        var x = rect.x + 162;
        var y = rect.y + rect.height / 2 - this.lineHeight() * 1.5;
        var width = rect.width - x - this.textPadding();
        this.drawActorSimpleStatus(actor, x, y, width);
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター基本能力値用のアイコンを予約
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcSetActorParamIcons = function(icons) {
    this.mmcActorParamIcons = icons;
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター追加能力値用のアイコンを予約
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcSetActorXParamIcons = function(icons) {
    this.mmcActorXParamIcons = icons;
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター特殊能力値用のアイコンを予約
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcSetActorSParamIcons = function(icons) {
    this.mmcActorSParamIcons = icons;
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター属性有効値用のアイコンを予約
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcSetActorEParamIcons = function(icons) {
    this.mmcActorEParamIcons = icons;
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター基本能力値の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorParam = function(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode = false,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!Array.isArray(paramId)) paramId = [paramId];
        if(this.mmcActorParamIcons === undefined) this.mmcActorParamIcons = [];
        var iconIndex = this.mmcActorParamIcons;
        if(paramId.length <= 0) return;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        paramId.forEach(param => {
            if(param >= 0) {
                if(param < 8) {
                    var labelWidth = 0;
                    var iconWidth = 0;
                    var paramWidth = 0;
                    var arrowWidth = 0;
                    if(showLabel) {
                        labelWidth = 160;
                        this.changeTextColor(this.systemColor());
                        this.contents.fontSize = LabelSize;
                        this.drawText(TextManager.param(param), rect.x, rect.y + paramY, 160);
                    };
                    if(useIcon) {
                        if(iconIndex[param] !== undefined) {
                            if(iconIndex[param] > 0) {
                                iconWidth = Window_Base._iconWidth + 4;
                                this.drawIcon(iconIndex[param], rect.x + 2 + labelWidth + iconX, rect.y + 2 + paramY);
                            };
                        };
                    };
                    this.contents.fontSize = paramSize;
                    this.changeTextColor(this.normalColor());
                    var paramText = actor.param(param);
                    this.drawText(paramText, rect.x + labelWidth + iconWidth + iconX + paramX, rect.y + paramY);
                    if(equipChangeMode) {
                        if(this.getCompareEquipter()) {
                            this.changeTextColor(this.systemColor());
                            paramWidth = this.textWidth(paramText);
                            this.drawText(arrow, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth, rect.y + paramY, 32, 'right');
                            this.resetTextColor();
                            arrowWidth = 32;
                            var newValue = this.getCompareEquipter().param(param);
                            var diffvalue = newValue - actor.param(param);
                            this.changeTextColor(this.paramchangeTextColor(diffvalue));
                            var paramNewText = newValue;
                            var newTextWidth = this.textWidth(paramNewText);
                            this.drawText(paramNewText, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth + arrowWidth + 7, rect.y + paramY, newTextWidth, 'right');
                        };
                    };
                    this.resetTextColor();
                    this.contents.fontSize = this.standardFontSize();
                };
                paramY += h;
            };
        });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター追加能力値の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorXParam = function(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode = false,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorXParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!Array.isArray(paramId)) paramId = [paramId];
        if(this.mmcActorXParamIcons === undefined) this.mmcActorXParamIcons = [];
        var iconIndex = this.mmcActorXParamIcons;
        if(paramId.length <= 0) return;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        paramId.forEach(param => {
            if(param >= 0) {
                if(param < 10) {
                    var labelWidth = 0;
                    var iconWidth = 0;
                    var paramWidth = 0;
                    var arrowWidth = 0;
                    if(showLabel) {
                        labelWidth = 160;
                        this.changeTextColor(this.systemColor());
                        this.contents.fontSize = LabelSize;
                        this.drawText(Ayatam.SCENECUSTOM.DesignSettings.termList.additionalParamName[param], rect.x, rect.y + paramY, 160);
                    };
                    if(useIcon) {
                        if(iconIndex[param] !== undefined) {
                            if(iconIndex[param] > 0) {
                                iconWidth = Window_Base._iconWidth + 4;
                                this.drawIcon(iconIndex[param], rect.x + 2 + labelWidth + iconX, rect.y + 2 + paramY);
                            };
                        };
                    };
                    this.contents.fontSize = paramSize;
                    this.changeTextColor(this.normalColor());
                    var xparamText = (actor.xparam(param) * 100) + "%";
                    this.drawText(xparamText, rect.x + labelWidth + iconWidth + iconX + paramX, rect.y + paramY);
                    if(equipChangeMode) {
                        if(this.getCompareEquipter()) {
                            this.changeTextColor(this.systemColor());
                            paramWidth = this.textWidth(xparamText);
                            this.drawText(arrow, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth, rect.y + paramY, 32, 'right');
                            this.resetTextColor();
                            arrowWidth = 32;
                            var newValue = this.getCompareEquipter().xparam(param);
                            var diffvalue = newValue - actor.xparam(param);
                            this.changeTextColor(this.paramchangeTextColor(diffvalue));
                            var xparamNewText = (newValue * 100) + "%";
                            var newTextWidth = this.textWidth(xparamNewText);
                            this.drawText(xparamNewText, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth + arrowWidth + 7, rect.y + paramY, newTextWidth, 'right');
                        };
                    };
                    this.resetTextColor();
                    this.contents.fontSize = this.standardFontSize();
                };
                paramY += h;
            };
        });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター特殊能力値の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorSParam = function(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode = false,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorSParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!Array.isArray(paramId)) paramId = [paramId];
        if(this.mmcActorSParamIcons === undefined) this.mmcActorSParamIcons = [];
        var iconIndex = this.mmcActorSParamIcons;
        if(paramId.length <= 0) return;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        paramId.forEach(param => {
            if(param >= 0) {
                if(param < 10) {
                    var labelWidth = 0;
                    var iconWidth = 0;
                    var paramWidth = 0;
                    var arrowWidth = 0;
                    if(showLabel) {
                        labelWidth = 160;
                        this.changeTextColor(this.systemColor());
                        this.contents.fontSize = LabelSize;
                        this.drawText(Ayatam.SCENECUSTOM.DesignSettings.termList.specialParamName[param], rect.x, rect.y + paramY, 160);
                    };
                    if(useIcon) {
                        if(iconIndex[param] !== undefined) {
                            if(iconIndex[param] > 0) {
                                iconWidth = Window_Base._iconWidth + 4;
                                this.drawIcon(iconIndex[param], rect.x + 2 + labelWidth + iconX, rect.y + 2 + paramY);
                            };
                        };
                    };
                    this.contents.fontSize = paramSize;
                    this.changeTextColor(this.normalColor());
                    var sparamText = (actor.sparam(param) * 100) + "%";
                    this.drawText(sparamText, rect.x + labelWidth + iconWidth + iconX + paramX, rect.y + paramY);
                    if(equipChangeMode) {
                        if(this.getCompareEquipter()) {
                            this.changeTextColor(this.systemColor());
                            paramWidth = this.textWidth(sparamText);
                            this.drawText(arrow, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth, rect.y + paramY, 32, 'right');
                            this.resetTextColor();
                            arrowWidth = 32;
                            var newValue = this.getCompareEquipter().sparam(param);
                            var diffvalue = newValue - actor.sparam(param);
                            if([0,4,8].includes(param)) diffvalue *= -1;
                            this.changeTextColor(this.paramchangeTextColor(diffvalue));
                            var sparamNewText = (newValue * 100) + "%";
                            var newTextWidth = this.textWidth(sparamNewText);
                            this.drawText(sparamNewText, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth + arrowWidth + 7, rect.y + paramY, newTextWidth, 'right');
                        };
                    };
                    this.resetTextColor();
                    this.contents.fontSize = this.standardFontSize();
                };
                paramY += h;
            };
        });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター属性有効値の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorEParam = function(index,paramId,showLabel,iconIndex,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode = false,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorEParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!Array.isArray(paramId)) paramId = [paramId];
        if(this.mmcActorEParamIcons === undefined) this.mmcActorEParamIcons = [];
        var iconIndex = this.mmcActorEParamIcons;
        if(paramId.length <= 0) return;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        paramId.forEach(param => {
            if(param >= 0) {
                param++;
                if(param < $dataSystem.elements.length) {
                    var labelWidth = 0;
                    var iconWidth = 0;
                    var paramWidth = 0;
                    var arrowWidth = 0;
                    if(showLabel) {
                        labelWidth = 160;
                        this.changeTextColor(this.systemColor());
                        this.contents.fontSize = LabelSize;
                        var compare = $dataSystem.elements[param];
                        var userAddedLabel = Ayatam.SCENECUSTOM.DesignSettings.termList.elementName;
                        if(userAddedLabel.includes('(t)')) {
                            userAddedLabel = userAddedLabel.replace('(t)',compare);
                        }else{
                            userAddedLabel = compare;
                        }; 
                        this.drawText(userAddedLabel, rect.x, rect.y + paramY, 160);
                    };
                    if(iconIndex[param] !== undefined) {
                        if(iconIndex[param] > 0) {
                            iconWidth = Window_Base._iconWidth + 4;
                            this.drawIcon(iconIndex[param], rect.x + 2 + labelWidth + iconX, rect.y + 2 + paramY);
                        };
                    };
                    this.contents.fontSize = paramSize;
                    this.changeTextColor(this.normalColor());
                    var elementRateText = (actor.elementRate(param) * 100) + "%";
                    this.drawText(elementRateText, rect.x + labelWidth + iconWidth + iconX + paramX, rect.y + paramY);
                    if(equipChangeMode) {
                        if(this.getCompareEquipter()) {
                            this.changeTextColor(this.systemColor());
                            paramWidth = this.textWidth(elementRateText);
                            this.drawText(arrow, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth, rect.y + paramY, 32, 'right');
                            this.resetTextColor();
                            arrowWidth = 32;
                            var newValue = this.getCompareEquipter().elementRate(param);
                            var diffvalue = newValue - actor.elementRate(param);
                            diffvalue *= -1;
                            this.changeTextColor(this.paramchangeTextColor(diffvalue));
                            var elementRateNewText = (newValue * 100) + "%";
                            var newTextWidth = this.textWidth(elementRateNewText);
                            this.drawText(elementRateNewText, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth + arrowWidth + 7, rect.y + paramY, newTextWidth, 'right');
                        };
                    };
                    this.resetTextColor();
                    this.contents.fontSize = this.standardFontSize();
                };
                paramY += h;
            };
        });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクターステート有効度の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorSrParam = function(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode = false,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorSrParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!Array.isArray(paramId)) paramId = [paramId];
        if(paramId.length <= 0) return;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        paramId.forEach(param => {
            if(param >= 1) {
                if(param < $dataStates.length) {
                    var labelWidth = 0;
                    var iconWidth = 0;
                    var paramWidth = 0;
                    var arrowWidth = 0;
                    if(showLabel) {
                        labelWidth = 160;
                        this.changeTextColor(this.systemColor());
                        this.contents.fontSize = LabelSize;
                        var compare = $dataStates[param].name;
                        var userAddedLabel = Ayatam.SCENECUSTOM.DesignSettings.termList.stateRateName;
                        if(userAddedLabel.includes('(t)')) {
                            userAddedLabel = userAddedLabel.replace('(t)',compare);
                        }else{
                            userAddedLabel = compare;
                        }; 
                        this.drawText(userAddedLabel, rect.x, rect.y + paramY, 160);
                    };
                    if(useIcon) {
                        if($dataStates[param].iconIndex > 0) {
                            iconWidth = Window_Base._iconWidth + 4;
                            this.drawIcon($dataStates[param].iconIndex, rect.x + 2 + labelWidth + iconX, rect.y + 2 + paramY);
                        };
                    };
                    this.contents.fontSize = paramSize;
                    this.changeTextColor(this.normalColor());
                    var stateRateText = (actor.stateRate(param) * 100) + "%";
                    this.drawText(stateRateText, rect.x + labelWidth + iconWidth + iconX + paramX, rect.y + paramY);
                    if(equipChangeMode) {
                        if(this.getCompareEquipter()) {
                            this.changeTextColor(this.systemColor());
                            paramWidth = this.textWidth(stateRateText);
                            this.drawText(arrow, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth, rect.y + paramY, 32, 'right');
                            this.resetTextColor();
                            arrowWidth = 32;
                            var newValue = this.getCompareEquipter().stateRate(param);
                            var diffvalue = newValue - actor.stateRate(param);
                            diffvalue *= -1;
                            this.changeTextColor(this.paramchangeTextColor(diffvalue));
                            var stateRateNewText = (newValue * 100) + "%";
                            var newTextWidth = this.textWidth(stateRateNewText);
                            this.drawText(stateRateNewText, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth + arrowWidth + 7, rect.y + paramY, newTextWidth, 'right');
                        };
                    };
                    this.resetTextColor();
                    this.contents.fontSize = this.standardFontSize();
                };
                paramY += h;
            };
        });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター弱体有効度の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorDebuffParam = function(index,paramId,showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,equipChangeMode = false,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorSrParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!Array.isArray(paramId)) paramId = [paramId];
        if(this.mmcActorParamIcons === undefined) this.mmcActorParamIcons = [];
        var iconIndex = this.mmcActorParamIcons;
        if(paramId.length <= 0) return;
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        paramId.forEach(param => {
            if(param >= 0) {
                if(param < 8) {
                    var labelWidth = 0;
                    var iconWidth = 0;
                    var paramWidth = 0;
                    var arrowWidth = 0;
                    if(showLabel) {
                        labelWidth = 160;
                        this.changeTextColor(this.systemColor());
                        this.contents.fontSize = LabelSize;
                        var compare = TextManager.param(param);
                        var userAddedLabel = Ayatam.SCENECUSTOM.DesignSettings.termList.debuffRateName;
                        if(userAddedLabel.includes('(t)')) {
                            userAddedLabel = userAddedLabel.replace('(t)',compare);
                        }else{
                            userAddedLabel = compare;
                        }; 
                        this.drawText(userAddedLabel, rect.x, rect.y + paramY, 160);
                    };
                    if(useIcon) {
                        if(iconIndex[param] !== undefined) {
                            if(iconIndex[param] > 0) {
                                iconWidth = Window_Base._iconWidth + 4;
                                this.drawIcon(iconIndex[param], rect.x + 2 + labelWidth + iconX, rect.y + 2 + paramY);
                            };
                        };
                    };
                    this.contents.fontSize = paramSize;
                    this.changeTextColor(this.normalColor());
                    var debuffRateText = (actor.debuffRate(param) * 100) + "%";
                    this.drawText(debuffRateText, rect.x + labelWidth + iconWidth + iconX + paramX, rect.y + paramY);
                    if(equipChangeMode) {
                        if(this.getCompareEquipter()) {
                            this.changeTextColor(this.systemColor());
                            paramWidth = this.textWidth(debuffRateText);
                            this.drawText(arrow, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth, rect.y + paramY, 32, 'right');
                            this.resetTextColor();
                            arrowWidth = 32;
                            var newValue = this.getCompareEquipter().debuffRate(param);
                            var diffvalue = newValue - actor.debuffRate(param);
                            diffvalue *= -1;
                            this.changeTextColor(this.paramchangeTextColor(diffvalue));
                            var debuffRateNewText = (newValue * 100) + "%";
                            var newTextWidth = this.textWidth(debuffRateNewText);
                            this.drawText(debuffRateNewText, rect.x + labelWidth + iconWidth + iconX + paramX + paramWidth + arrowWidth + 7, rect.y + paramY, newTextWidth, 'right');
                        };
                    };
                    this.resetTextColor();
                    this.contents.fontSize = this.standardFontSize();
                };
                paramY += h;
            };
        });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター装備ステータス変更の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorChangedEquipStatus = function(index,paramIds = [],showLabel,useIcon,x,y,h,iconX,paramX,LabelSize,paramSize,arrow = "→",showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorSrParam()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(!this.getCompareEquipter()) return;
        if(paramIds.length <= 0) return;
        var nparam = paramIds[0].includes('all') ? [0,1,2,3,4,5,6,7] : paramIds[0];
        var xparam = paramIds[1].includes('all') ? [0,1,2,3,4,5,6,7,8,9] : paramIds[1];
        var sparam = paramIds[2].includes('all') ? [0,1,2,3,4,5,6,7,8,9] : paramIds[2];
        if(paramIds[3].includes('all')) {
            var eparam = [];
            var id = 0;
            $dataSystem.elements.forEach(ele => {
                if(ele) {
                    eparam.push(id);
                };
                id++;
            });
        }else{
            var eparam = paramIds[3];
        };
        if(paramIds[4].includes('all')) {
            var srparam = [];
            $dataStates.forEach(state => {
                if(state) {
                    srparam.push(state.id);
                };
            });
        }else{
            var srparam = paramIds[4];
        };
        var debuffParam = paramIds[5].includes('all') ? [0,1,2,3,4,5,6,7] : paramIds[5];
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var paramY = 0;
        if(nparam !== undefined) {
            if(nparam.length > 0) {
                nparam.forEach(param => {
                    if(param >= 0) {
                        if(param < 8) {
                            var newValue = this.getCompareEquipter().param(param);
                            var diffvalue = newValue - actor.param(param);
                            if(diffvalue !== 0) {
                                this.mmcDrawActorParam(index,param,showLabel,useIcon,rect.x,rect.y + paramY,0,iconX,paramX,LabelSize,paramSize,true,arrow,true);
                                paramY += h;
                            };
                        };
                    };
                });
            };
        };
        if(xparam !== undefined) {
            if(xparam.length > 0) {
                xparam.forEach(param => {
                    if(param >= 0) {
                        if(param < 10) {
                            var newValue = this.getCompareEquipter().xparam(param);
                            var diffvalue = newValue - actor.xparam(param);
                            if(diffvalue !== 0) {
                                this.mmcDrawActorXParam(index,param,showLabel,useIcon,rect.x,rect.y + paramY,0,iconX,paramX,LabelSize,paramSize,true,arrow,true);
                                paramY += h;
                            };
                        };
                    };
                });
            };
        };
        if(sparam !== undefined) {
            if(sparam.length > 0) {
                sparam.forEach(param => {
                    if(param >= 0) {
                        if(param < 10) {
                            var newValue = this.getCompareEquipter().sparam(param);
                            var diffvalue = newValue - actor.sparam(param);
                            if(diffvalue !== 0) {
                                this.mmcDrawActorSParam(index,param,showLabel,useIcon,rect.x,rect.y + paramY,0,iconX,paramX,LabelSize,paramSize,true,arrow,true);
                                paramY += h;
                            };
                        };
                    };
                });
            };
        };
        if(eparam !== undefined) {
            if(eparam.length > 0) {
                eparam.forEach(param => {
                    if(param >= 0) {
                        param++;
                        if(param < $dataSystem.elements.length) {
                            var newValue = this.getCompareEquipter().elementRate(param);
                            var diffvalue = newValue - actor.elementRate(param);
                            if(diffvalue !== 0) {
                                param--;
                                this.mmcDrawActorEParam(index,param,showLabel,useIcon,rect.x,rect.y + paramY,0,iconX,paramX,LabelSize,paramSize,true,arrow,true);
                                paramY += h;
                            };
                        };
                    };
                });
            };
        };
        if(srparam !== undefined) {
            if(srparam.length > 0) {
                srparam.forEach(param => {
                    if(param >= 1) {
                        if(param < $dataStates.length) {
                            var newValue = this.getCompareEquipter().stateRate(param);
                            var diffvalue = newValue - actor.stateRate(param);
                            if(diffvalue !== 0) {
                                this.mmcDrawActorSrParam(index,param,showLabel,useIcon,rect.x,rect.y + paramY,0,iconX,paramX,LabelSize,paramSize,true,arrow,true);
                                paramY += h;
                            };
                        };
                    };
                });
            };
        };
        if(debuffParam !== undefined) {
            if(debuffParam.length > 0) {
                debuffParam.forEach(param => {
                    if(param >= 0) {
                        if(param < 8) {
                            var newValue = this.getCompareEquipter().stateRate(param);
                            var diffvalue = newValue - actor.stateRate(param);
                            if(diffvalue !== 0) {
                                this.mmcDrawActorDebuffParam(index,param,showLabel,useIcon,rect.x,rect.y + paramY,0,iconX,paramX,LabelSize,paramSize,true,arrow,true);
                                paramY += h;
                            };
                        };
                    };
                });
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 装備スロットの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorEquip = function(index,slotId,emptyName,showLabel,showIcon,x,y,equipNameX,LabelSize,nameSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawActorEquip()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        var slots = actor.equipSlots();
        var slotName = $dataSystem.equipTypes[slots[slotId]];
        var item = actor.equips()[slotId];
        var iconWidth = 0;
        if(showLabel) {
            this.changeTextColor(this.systemColor());
            this.contents.fontSize = LabelSize;
            this.drawText(slotName, rect.x, rect.y, 138, this.lineHeight());
        };
        if(item) {
            if(showIcon) {
                iconWidth = Window_Base._iconWidth + 4;
                this.drawIcon(item.iconIndex, rect.x + 2 + equipNameX, rect.y + 2);
            }; 
            this.contents.fontSize = nameSize;
            this.changeTextColor(this.normalColor());
            this.drawText(item.name, rect.x + iconWidth + equipNameX, rect.y);
        }else{
            if(emptyName !== "") {
                this.contents.fontSize = nameSize;
                this.changeTextColor(this.normalColor());
                this.drawText(emptyName, rect.x + equipNameX, rect.y);
            };
        };
        this.resetTextColor();
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 装備スロットの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawEquipSlots = function(index,emptyName,showLabel,showIcon,x,y,equipNameX,LabelSize,nameSize,showScript = true) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawEquipSlot()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this.mmcDataCategory === 'actorEquipsMode') {
            if(this._mmcBattleActor) {
                var item = this._mmcBattleActor.equips()[index];
                var slot = this.targetData()[index];
                var slotName = $dataSystem.equipTypes[slot];
                var rect = this.itemRectForText(index);
                rect.x += x;
                rect.y += y;
                var iconWidth = 0;
                if(showLabel) {
                    this.changeTextColor(this.systemColor());
                    this.contents.fontSize = LabelSize;
                    this.drawText(slotName, rect.x, rect.y, 138, this.lineHeight());
                };
                if(item) {
                    if(showIcon) {
                        iconWidth = Window_Base._iconWidth + 4;
                        this.drawIcon(item.iconIndex, rect.x + 2 + equipNameX, rect.y + 2);
                    }; 
                    this.contents.fontSize = nameSize;
                    this.changeTextColor(this.normalColor());
                    this.changePaintOpacity(this.isEnabled(index));
                    this.drawText(item.name, rect.x + iconWidth + equipNameX, rect.y);
                }else{
                    if(emptyName !== "") {
                        this.contents.fontSize = nameSize;
                        this.changeTextColor(this.normalColor());
                        this.drawText(emptyName, rect.x + equipNameX, rect.y);
                    };
                };
                this.resetTextColor();
                this.contents.fontSize = this.standardFontSize();
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● [自由型専用] ピクチャーリストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawPictureListFree = function(picId,x,y,w,h,op,anchor,showScript = true) {
    if(!this.isFreeType()) {
        this.popError(5);
        return;
    }else{
        if(eval(showScript)) {
            // ↑の行でエラーが発生した場合は、
            // ウィンドウの作成/設定にて作成されている
            // いづれかの「データ型」ウィンドウの
            //「描画するデータリスト」の「this.mmcDrawPictureListFree()」の
            // showScript にてスクリプトの記述に誤りがある可能性があります。
            // 再確認をお願いします。
            if(this.targetData()[index] !== undefined) {
                var pictureDir = this.targetData()[picId];
                var width = Graphics.boxWidth + w;
                var height = Graphics.boxHeight + h;
                if(this._addedPictures === undefined) this._addedPictures = [];
                if(this._addedPictures[index] === undefined) this._addedPictures[index] = new Sprite(new Bitmap(width,height));
                this._addedPictures[index].bitmap = ImageManager.loadMmc(pictureDir);
                this._addedPictures[index].x = 12 + x;
                this._addedPictures[index].y = 18 + y;
                if(anchor) {
                    this._addedPictures[index].anchor.x = 0.5;
                    this._addedPictures[index].anchor.y = 0.5;
                };
                this._addedPictures[index].opacity = op;
                this.addChild(this._addedPictures[index]);
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型専用] ピクチャーリストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawPictureList = function(index,x,y,w,h,op,anchor,showScript = true) {
    if(this.isFreeType()) {
        this.popError(4);
        return;
    }else{
        if(eval(showScript)) {
            // ↑の行でエラーが発生した場合は、
            // ウィンドウの作成/設定にて作成されている
            // いづれかの「データ型」ウィンドウの
            //「描画するデータリスト」の「this.mmcDrawPictureList()」の
            // showScript にてスクリプトの記述に誤りがある可能性があります。
            // 再確認をお願いします。
            if(this.targetData()[index] !== undefined) {
                var rect = this.itemRectForText(index);
                var pictureDir = this.targetData()[index];
                rect.x += 12 + x;
                rect.y += 18 + y;
                rect.width += w;
                rect.height += h;
                if(this._addedPictures === undefined) this._addedPictures = [];
                if(this._addedPictures[index] === undefined) this._addedPictures[index] = new Sprite(new Bitmap(rect.width,rect.height));
                this._addedPictures[index].bitmap = ImageManager.loadMmc(pictureDir);
                this._addedPictures[index].x = rect.x;
                this._addedPictures[index].y = rect.y;
                if(anchor) {
                    this._addedPictures[index].anchor.x = 0.5;
                    this._addedPictures[index].anchor.y = 0.5;
                };
                this._addedPictures[index].opacity = op;
                this.addChild(this._addedPictures[index]);
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクターのバストアップイラストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawBustIllust = function(index,picName,useHpRate,x,y,w,h,op,anchor,battle = false,showScript = true,showBustSize = false) {
    if(!this.checkIfActorData()) {
        this.popError(1);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawBustIllust()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var actor = this.targetData()[index];
        var rect = this.itemRectForText(index);
        var actorHpRate = "";
        if(useHpRate) {
            if(actor.hpRate() <= 0.1) {
                if(actor._hp <= 1) {
                    actorHpRate = "_0";
                }else{
                    actorHpRate = "_25";
                };
            }else if(actor.hpRate() <= 0.25) {
                actorHpRate = "_25";
            }else if(actor.hpRate() <= 0.5) {
                actorHpRate = "_50";
            }else if(actor.hpRate() <= 1.0) {
                actorHpRate = "_100";
            };
        };
        rect.x += 12 + x;
        rect.y += 18 + y;
        rect.width += w;
        rect.height += h;
        if(this._actorBustIllusts === undefined) this._actorBustIllusts = [];
        var pictureDir = picName + actor.actorId() + actorHpRate;
        if(showBustSize) {
            console.log("シーンカスタマイズMV: アクターバストアップの項目ぴったりサイズを出力します。\nファイルパス: img/m_menu/" + pictureDir + " 横幅:" + this.itemWidth() + " 縦幅:" + this.itemHeight() + " です。");
            require('nw.gui').Window.get().showDevTools();
            AudioManager.playSe({ "name": "Computer", "volume": 70, "pitch": 100, "pan": 0 });
        };
        if(this._actorBustIllusts[index] === undefined) this._actorBustIllusts[index] = new Sprite(new Bitmap(rect.width,rect.height));
        this._actorBustIllusts[index].bitmap = ImageManager.loadMmc(pictureDir);
        this._actorBustIllusts[index].x = rect.x;
        this._actorBustIllusts[index].y = rect.y;
        if(anchor) {
            this._actorBustIllusts[index].anchor.x = 0.5;
            this._actorBustIllusts[index].anchor.y = 0.5;
        };
        if(battle) {
            this._actorBustIllusts[index].opacity = actor.isBattleMember() ? op : this.translucentOpacity();
        }else{
            this._actorBustIllusts[index].opacity = op;
        };
        this._actorBustIllusts[index].z = 2 + index;
        this._mmcbackgroundLayer.addChild(this._actorBustIllusts[index]);
        this._mmcbackgroundLayer.children.sort(function (a, b) { return a.z - b.z });
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] SPの描画 - 要別途:Sp貯蓄式スキルMV
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorSp = function(index,x,y,numberX,spFontSize,numFontSize,showScript = true) {
    if(Imported.Ayatam_SpSkillLimits) {
        if(!this.checkIfActorData()) {
            this.popError(1);
            return;
        };
        if(eval(showScript)) {
            // ↑の行でエラーが発生した場合は、
            // ウィンドウの作成/設定にて作成されている
            // いづれかの「データ型」ウィンドウの
            //「描画するデータリスト」の「this.mmcDrawActorSp()」の
            // showScript にてスクリプトの記述に誤りがある可能性があります。
            // 再確認をお願いします。
            var actor = this.targetData()[index];
            var rect = this.itemRectForText(index);
            var currentSp = actor.getSslSp();
            rect.x += x;
            rect.y += y;
            this.contents.fontSize = spFontSize;
            var labelWidth = this.textWidth('SP');
            this.changeTextColor(this.systemColor());
            this.drawText("SP", rect.x, rect.y, labelWidth);
            this.contents.fontSize = numFontSize;
            if(currentSp > 0) {
                this.changeTextColor(this.textColor(29));
            }else{
                this.changeTextColor(this.textColor(18));
            };
            var valueWidth = this.textWidth(currentSp);
            this.drawText(currentSp, rect.x + labelWidth + numberX, rect.y, valueWidth, 'right');
            this.changeTextColor(this.normalColor());
            this.contents.fontSize = this.standardFontSize();
        };
    }else{
        this.popError(2);
        return;
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクター変数の描画 - 要別途:エロRPG制作キットMV
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawActorVariables = function(index,vId,showLabel,x,y,lX,lY,vX,vY,labelSize,labelColor,valueSize,valueColor,showScript = true) {
    if(Imported.Ayatam_EroRpgKit) {
        if(!this.checkIfActorData()) {
            this.popError(1);
            return;
        };
        if(eval(showScript)) {
            // ↑の行でエラーが発生した場合は、
            // ウィンドウの作成/設定にて作成されている
            // いづれかの「データ型」ウィンドウの
            //「描画するデータリスト」の「this.mmcDrawActorVariables()」の
            // showScript にてスクリプトの記述に誤りがある可能性があります。
            // 再確認をお願いします。
            var actor = this.targetData()[index];
            var rect = this.itemRectForText(index);
            var variable = actor.getActorVariables(vId);
            var vlabelWidth = 0;
            rect.x += x;
            rect.y += y;
            if(variable) {
                if(showLabel) {
                    this.contents.fontSize = labelSize;
                    var labelWidth = this.textWidth(variable.name);
                    this.changeTextColor(labelColor);
                    vlabelWidth = labelWidth + 10 + lX;
                    this.drawText(variable.name, rect.x + lX, rect.y + lY, labelWidth);
                };
                this.contents.fontSize = valueSize;
                var valueWidth = this.textWidth(variable.value);
                this.changeTextColor(valueColor);
                this.drawText(variable.value, rect.x + vlabelWidth + vX, rect.y + vY, valueWidth);
            };
            this.changeTextColor(this.normalColor());
            this.contents.fontSize = this.standardFontSize();
        };
    }else{
        this.popError(3);
        return;
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] アクターイラストの描画 - 要別途:エロRPG制作キットMV
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawAegActor = function(index,poseId,playMode = 'loop',playSpeed = 1,customStartFrame = 'continue',customEndFrame = 'end',mirror = false,x = 0,y = 0,w = 100,h = 100,op = 255,battle = false,showScript = true) {
    if(Imported.Ayatam_EroRpgKit) {
        if(!this.checkIfActorData()) {
            this.popError(1);
            return;
        };
        if(eval(showScript)) {
            // ↑の行でエラーが発生した場合は、
            // ウィンドウの作成/設定にて作成されている
            // いづれかの「データ型」ウィンドウの
            //「描画するデータリスト」の「this.mmcDrawAegActor()」の
            // showScript にてスクリプトの記述に誤りがある可能性があります。
            // 再確認をお願いします。
            var actor = this.targetData()[index];
            var rect = this.itemRectForText(index);
            rect.x += this.standbyPosX() + x;
            rect.y += this._windowHeight + y;
            if(battle) op = actor.isBattleMember() ? op : this.translucentOpacity();
            this.drawAegActor(actor,Number(poseId),playMode,playSpeed,customStartFrame,customEndFrame,mirror,Number(rect.x),Number(rect.y),Number(w),Number(h),Number(op));
        };
    }else{
        this.popError(3);
        return;
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] 敵名の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawEnemyName = function(index,x,y,fontSize,showScript = true) {
    if(!this.checkIfEnemyData()) {
        this.popError(6);
        return;
    };
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawEnemyName()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var enemy = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        this.drawText(enemy.name(), rect.x, rect.y);
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] スキル名の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawSkillName = function(index,x,y,fontSize,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawSkillName()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this.mmcDataCategory === 'actorSkillList') {
            var skill = this.targetData()[index];
            var rect = this.itemRectForText(index);
            rect.x += x;
            rect.y += y;
            this.contents.fontSize = fontSize;
            this.changePaintOpacity(this.isEnabled(skill));
            this.drawItemName(skill, rect.x, rect.y);
            this.contents.fontSize = this.standardFontSize();
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] スキルコストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawSkillCost = function(index,x,y,fontSize,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawSkillCost()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this.mmcDataCategory === 'actorSkillList') {
            var skill = this.targetData()[index];
            var rect = this.itemRectForText(index);
            rect.x += x;
            rect.y += y;
            this.contents.fontSize = fontSize;
            rect.width = this.textWidth('000');
            this.changePaintOpacity(this.isEnabled(skill));
            this.drawSkillCost(skill, rect.x, rect.y, rect.width);
            this.contents.fontSize = this.standardFontSize();
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] スキル名の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawItemName = function(index,x,y,fontSize,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawItemName()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var item = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        this.changePaintOpacity(this.isEnabled(item));
        this.drawItemName(item, rect.x, rect.y);
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] スキルコストの描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawItemAmount = function(index,x,y,fontSize,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawItemAmount()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        var item = this.targetData()[index];
        var rect = this.itemRectForText(index);
        rect.x += x;
        rect.y += y;
        this.contents.fontSize = fontSize;
        rect.width = this.textWidth('000');
        this.changePaintOpacity(this.isEnabled(item));
        this.drawItemNumber(item, rect.x, rect.y, rect.width);
        this.contents.fontSize = this.standardFontSize();
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] ログ情報の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawLogText = function(index,x,y,useBack,backX,backY,backW,backH,backColor,backOp,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawItemName()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this.mmcDataCategory === 'logMode') {
            var rect = this.itemRectForText(index);
            rect.x += x;
            rect.y += y;
            var w = backW === 0 ? this._windowWidth : backW;
            var h = backH === 0 ? this.lineHeight() : backH;
            this.mmcDrawItemBackground(index,x + backX,y + backY,w,h,backColor,backOp,useBack);
            this.drawTextEx(this._lines[index], rect.x, rect.y, rect.width);
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] スキル名の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcDrawHelpText = function(index,x,y,showScript = true) {
    if(eval(showScript)) {
        // ↑の行でエラーが発生した場合は、
        // ウィンドウの作成/設定にて作成されている
        // いづれかの「データ型」ウィンドウの
        //「描画するデータリスト」の「this.mmcDrawItemName()」の
        // showScript にてスクリプトの記述に誤りがある可能性があります。
        // 再確認をお願いします。
        if(this.mmcDataCategory === 'helpMode') {
            var rect = this.itemRectForText(index);
            rect.x += x;
            rect.y += y;
            this.drawTextEx(this.mmcHelpText, rect.x, rect.y);
        };
    };
};
//--------------------------------------------------------------------------
// ● [リスト型対応] コアのアイテム所持数を継承
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_ItemList_prototype_needsNumber = Window_ItemList.prototype.needsNumber;
Window_MmcStandardWindow.prototype.needsNumber = function() {
    return _AyatamSceneCustom_Window_ItemList_prototype_needsNumber.call(this);
};
//--------------------------------------------------------------------------
// ● [リスト型対応] コアのアイテム所持数の描画を継承
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_ItemList_prototype_drawItemNumber = Window_ItemList.prototype.drawItemNumber;
Window_MmcStandardWindow.prototype.drawItemNumber = function(item, x, y, width) {
    _AyatamSceneCustom_Window_ItemList_prototype_drawItemNumber.call(this,item,x,y,width);
};
//--------------------------------------------------------------------------
// ● [リスト型対応] コアのスキルコストの描画を継承
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_SkillList_prototype_drawSkillCost = Window_SkillList.prototype.drawSkillCost;
Window_MmcStandardWindow.prototype.drawSkillCost = function(skill, x, y, width) {
    _AyatamSceneCustom_Window_SkillList_prototype_setActor.call(this,this._mmcBattleActor);
    _AyatamSceneCustom_Window_SkillList_prototype_drawSkillCost.call(this,skill,x,y,width);
};
//--------------------------------------------------------------------------
// ● 「決定」ボタンの動作許可
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isOkEnabled = function() {
    if(this.isOpenSliding()) return false;
    return this.isHandled('ok') || true;
};
//--------------------------------------------------------------------------
// ● 「キャンセル」ボタンの動作許可
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isCancelEnabled = function() {
    if(this.isOpenSliding()) return false;
    return Window_Selectable.prototype.isCancelEnabled.call(this);
};
//--------------------------------------------------------------------------
// ● 「マウス」ボタンの動作許可
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.processTouch = function() {
    if(this.isOpenSliding()) return;
    Window_Selectable.prototype.processTouch.call(this);
};
//--------------------------------------------------------------------------
// ● 「マウス」ロールの動作許可
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.processWheel = function() {
    if(this.isOpenSliding()) return;
    Window_Selectable.prototype.processWheel.call(this);
};
//--------------------------------------------------------------------------
// ● 「決定」ボタンが押された時
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.processOk = function() {
    if (this.isCurrentItemEnabled()) {
        if(this._windowSetup !== undefined) {
            var cursor = this._windowSetup.commandOk;
            if(cursor.cursorAction.includes('cursorAction')) {
                if(cursor.commandEnableSwitch > 0) {
                    if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                        SoundManager.playBuzzer();
                        return;
                    };
                };
                if(!cursor.commandEnableExt.includes('none')) {
                    try {
                        var enable = eval(cursor.commandEnableExt);
                        if(!enable) {
                            SoundManager.playBuzzer();
                            return;
                        };
                    } catch (e) {
                        console.error(e);
                        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\n決定キーの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                        error = error.replace(/\n/g, '<br>');
                        Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                        SceneManager.stop();
                    };
                };
                if(!this.mmcProcessOkCommand) {
                    if(Array.isArray(cursor.commandTypeName)) {
                        this.mmcProcessOkCommand = cursor.commandTypeName;
                    };
                };
                if(this.mmcProcessOkCommand) {
                    if(this.mmcProcessOkCommand.length > 0) {
                        this.mmcProcessOkCommand.forEach(command => {
                            if(command) {
                                if(command.includes(':callHandler')) {
                                    this.callOkHandler();
                                }else{
                                    this._mmcCursorFlag = ":processOk";
                                    this._windowSetup.commandOk.commandTypeName = command;
                                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                                };
                            };
                        });
                    }else{
                        this._mmcCursorFlag = ":processOk";
                        this._windowSetup.commandOk.commandTypeName = "";
                        SceneManager._scene.mmcAddCommands(this._windowSetup);
                    };
                    this._windowSetup.commandOk.commandTypeName = this.mmcProcessOkCommand;
                };
                this.playOkSound();
                this.updateInputData();
                this.deactivate();
            }else if(cursor.cursorAction.includes('none')) {
                //なにもしない
            }else{
                Window_Selectable.prototype.processOk.call(this);
            };
        }else{
            Window_Selectable.prototype.processOk.call(this);
        };
        if(this._infoSharing === "actor") {
            if(this.targetData() === undefined) return;
            if(this.targetData().length <= 0) return;
            if(this.targetData()[0].constructor === Game_Actor) {
                var actor = this.targetData()[this.index()];
                $gameParty.setMenuActor(actor);
            };
        }else{
            $gameTemp.mmcSaveIndex(this._windowSetup.windowName,this.index());
        };
    } else {
        this.playBuzzerSound();
    }
};
//--------------------------------------------------------------------------
// ● 「キャンセル」ボタンが押された時
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.processCancel = function() {
    if(this._windowSetup !== undefined) {
        var cursor = this._windowSetup.commandCancel;
        if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nキャンセルキーの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcProcessCancelCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcProcessCancelCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcProcessCancelCommand) {
                if(this.mmcProcessCancelCommand.length > 0) {
                    this.mmcProcessCancelCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                SoundManager.playCancel();
                                this.callCancelHandler();
                            }else{
                                this._mmcCursorFlag = ":processCancel";
                                this._windowSetup.commandCancel.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":processCancel";
                    this._windowSetup.commandCancel.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandCancel.commandTypeName = this.mmcProcessCancelCommand;
            };
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        }else{
            Window_Selectable.prototype.processCancel.call(this);
        };
    }else{
        Window_Selectable.prototype.processCancel.call(this);
    };
    if(this.mmcGetHelpWindow()) {
        this.mmcGetHelpWindow().clear();
        this.mmcCheckHelpWindowClose();
    };
};
//--------------------------------------------------------------------------
// ● 「下」ボタンが押された時
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.cursorDown = function(wrap) {
    if(this._windowSetup === undefined) {
        Window_Selectable.prototype.cursorDown.call(this,wrap);
    }else{
        var cursor = this._windowSetup.commandCursorDown;
        if(cursor.cursorAction.includes('default')) {
            if(!this._windowSetup.permissionMoveCursor.includes('leftRight')) {
                Window_Selectable.prototype.cursorDown.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー下の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorDownCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorDownCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorDownCommand) {
                if(this.mmcCursorDownCommand.length > 0) {
                    this.mmcCursorDownCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":down";
                                this._windowSetup.commandCursorDown.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":down";
                    this._windowSetup.commandCursorDown.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandCursorDown.commandTypeName = this.mmcCursorDownCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};
//--------------------------------------------------------------------------
// ● 「上」ボタンが押された時
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.cursorUp = function(wrap) {
    if(this._windowSetup === undefined) {
        Window_Selectable.prototype.cursorUp.call(this,wrap);
    }else{
        var cursor = this._windowSetup.commandCursorUp;
        if(cursor.cursorAction.includes('default')) {
            if(!this._windowSetup.permissionMoveCursor.includes('leftRight')) {
                Window_Selectable.prototype.cursorUp.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー上の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorUpCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorUpCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorUpCommand) {
                if(this.mmcCursorUpCommand.length > 0) {
                    this.mmcCursorUpCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":up";
                                this._windowSetup.commandCursorUp.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":up";
                    this._windowSetup.commandCursorUp.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandCursorUp.commandTypeName = this.mmcCursorUpCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};
//--------------------------------------------------------------------------
// ● 「右」ボタンが押された時
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.cursorRight = function(wrap) {
    if(this._windowSetup === undefined) {
        Window_Selectable.prototype.cursorRight.call(this,wrap);
    }else{
        var cursor = this._windowSetup.commandCursorRight;
        if(cursor.cursorAction.includes('default')) {
            if(this._windowSetup.permissionMoveCursor.includes('leftRight') || this._windowSetup.permissionMoveCursor.includes('allDir')) {
                if(this._windowSetup.caseStandardCol > 1) {
                    Window_Selectable.prototype.cursorRight.call(this,wrap);
                }else{
                    Window_Selectable.prototype.cursorDown.call(this,wrap);
                };
            }else if(!this._windowSetup.permissionMoveCursor.includes('upDown')) {
                Window_Selectable.prototype.cursorRight.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー右の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorRightCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorRightCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorRightCommand) {
                if(this.mmcCursorRightCommand.length > 0) {
                    this.mmcCursorRightCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":right";
                                this._windowSetup.commandCursorRight.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":right";
                    this._windowSetup.commandCursorRight.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandCursorRight.commandTypeName = this.mmcCursorRightCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};
//--------------------------------------------------------------------------
// ● 「左」ボタンが押された時
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.cursorLeft = function(wrap) {
    if(this._windowSetup === undefined) {
        Window_Selectable.prototype.cursorLeft.call(this,wrap);
    }else{
        var cursor = this._windowSetup.commandCursorLeft;
        if(cursor.cursorAction.includes('default')) {
            if(this._windowSetup.permissionMoveCursor.includes('leftRight') || this._windowSetup.permissionMoveCursor.includes('allDir')) {
                if(this._windowSetup.caseStandardCol > 1) {
                    Window_Selectable.prototype.cursorLeft.call(this,wrap);
                }else{
                    Window_Selectable.prototype.cursorUp.call(this,wrap);
                };
            }else if(!this._windowSetup.permissionMoveCursor.includes('upDown')) {
                Window_Selectable.prototype.cursorLeft.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー左の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorLeftCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorLeftCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorLeftCommand) {
                if(this.mmcCursorLeftCommand.length > 0) {
                    this.mmcCursorLeftCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":left";
                                this._windowSetup.commandCursorLeft.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":left";
                    this._windowSetup.commandCursorLeft.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandCursorLeft.commandTypeName = this.mmcCursorLeftCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};
//--------------------------------------------------------------------------
// ● 「pageUp」ボタンが押された時
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_Selectable_prototype_processPageup = Window_Selectable.prototype.processPageup;
Window_MmcStandardWindow.prototype.processPageup = function() {
    if(this._windowSetup === undefined) {
        _AyatamSceneCustom_Window_Selectable_prototype_processPageup.call(this);
    }else{
        var cursor = this._windowSetup.commandPageUp;
        if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nQ/PageUp/LTの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcProcessPageupCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcProcessPageupCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcProcessPageupCommand) {
                if(this.mmcProcessPageupCommand.length > 0) {
                    this.mmcProcessPageupCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":pageUp";
                                this._windowSetup.commandPageUp.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":pageUp";
                    this._windowSetup.commandPageUp.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandPageUp.commandTypeName = this.mmcProcessPageupCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};
//--------------------------------------------------------------------------
// ● 「pageDown」ボタンが押された時
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_Selectable_prototype_processPagedown = Window_Selectable.prototype.processPagedown;
Window_MmcStandardWindow.prototype.processPagedown = function() {
    if(this._windowSetup === undefined) {
        _AyatamSceneCustom_Window_Selectable_prototype_processPagedown.call(this);
    }else{
        var cursor = this._windowSetup.commandPageDown;
        if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._windowSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nE/PageDown/RTの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er149wms)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcProcessPagedownCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcProcessPagedownCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcProcessPagedownCommand) {
                if(this.mmcProcessPagedownCommand.length > 0) {
                    this.mmcProcessPagedownCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":pageDown";
                                this._windowSetup.commandPageDown.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":pageDown";
                    this._windowSetup.commandPageDown.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._windowSetup.commandPageDown.commandTypeName = this.mmcProcessPagedownCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};
//--------------------------------------------------------------------------
// ● 対象を選択可能にするか
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isCurrentItemEnabled = function() {
    var result = true;
    if(this.targetData() === undefined) return true;
    if(this.targetData().length <= 0) result = true;
    switch (this.mmcDataCategory) {
        case 'formationMode':
            if(this.targetData()[0].constructor === Game_Actor) {
                var actor = this.targetData()[this.index()];
                result = actor && actor.isFormationChangeOk();
            }else{
                result = false;
            };
            break;
        case 'actorSkillList':
            if(this.mmcTargetResultList !== undefined) {
                if(this._mmcBattleActor) {
                    if(this._mmcActorSkillType) {
                        result = this.isEnabled(this.mmcTargetResultList[this.index()]);
                    }else{
                        result = true;
                    };
                }else{
                    result = true;
                };
            }else{
                result = true;
            };
            break;
        case 'partyItemList':
            if(this.mmcTargetResultList !== undefined) {
                if(this.mmcTargetResultList.length > 0) {
                    result = this.isEnabled(this.mmcTargetResultList[this.index()]);
                }else{
                    result = false;
                };
            }else{
                result = true;
            };
            break;
    };
    return result;
};
//--------------------------------------------------------------------------
// ● カテゴリーに合わせて使用可能状況を選択
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.isEnabled = function(item) {
    var result = true;
    switch (this.mmcDataCategory) {
        case 'actorSkillList':
            result = this._mmcBattleActor && this._mmcBattleActor.canUse(item);
            break;
        case 'partyItemList':
            result = $gameParty.canUse(item);
            break;
        case 'actorEquipsMode':
            result = this._mmcBattleActor.isEquipChangeOk(item);
            break;
    };
    return result;
};
//--------------------------------------------------------------------------
// ● 敵データ専用 選択敵Idの取得
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.enemyIndex = function() {
    var enemy = this.targetData()[this.index()];
    return enemy ? enemy.index() : -1;
};
//--------------------------------------------------------------------------
// ● 最終選択対象を選択
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.selectLast = function() {
    if(!this.isOpenSliding()) {
        if(this.targetData() === undefined) return;
        if(this.targetData().length <= 0) return;
        var resultIndex = 0;
        switch (this.mmcDataCategory) {
            case 'formationMode':
                if(this._infoSharing === "actor") {
                    if(this.targetData()[0].constructor === Game_Actor) {
                        var actor = this.isFreeType() ? 0 : $gameParty.menuActor().index();
                        resultIndex = actor || 0;
                    }else{
                        resultIndex = 0;
                    };
                };
                break;
            case 'actorSkillList':
                if(this.mmcTargetResultList !== undefined) {
                    if(this._mmcBattleActor) {
                        var skill;
                        if ($gameParty.inBattle()) {
                            skill = this._mmcBattleActor.lastBattleSkill();
                        } else {
                            skill = this._mmcBattleActor.lastMenuSkill();
                        }
                        var index = this.mmcTargetResultList.indexOf(skill);
                        resultIndex = index >= 0 ? index : 0;
                    }else{
                        resultIndex = 0;
                    };
                }else{
                    resultIndex = 0;
                };
                break;
            case 'partyItemList':
                var index = this.mmcTargetResultList.indexOf($gameParty.lastItem());
                resultIndex = index >= 0 ? index : 0;
                break;
            default:
                resultIndex = $gameTemp.mmcGetIndex(this._windowSetup.windowName) || 0;
                break;
        };
        this.select(resultIndex);
    }else{
        this._checkSlideSelectLast = true;
    };
};
//--------------------------------------------------------------------------
// ● 並び替えモードの参照
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.formationMode = function() {
    return this.mmcDataCategory === 'formationMode';
};
//--------------------------------------------------------------------------
// ● 並び替えモードの設定
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setFormationMode = function(formationMode) {
    this.mmcDataCategory = formationMode ? 'formationMode' : this.mmcDataCategory;
};
//--------------------------------------------------------------------------
// ● 並び替えモード時の対象インデックスの参照
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.pendingIndex = function() {
    return this._pendingIndex;
};
//--------------------------------------------------------------------------
// ● 並び替えモード時の対象インデックスの設定
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setPendingIndex = function(index) {
    var lastPendingIndex = this._pendingIndex;
    this._pendingIndex = index;
    this.redrawItem(this._pendingIndex);
    this.redrawItem(lastPendingIndex);
};
//--------------------------------------------------------------------------
// ● スライドのセットアップ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.slideSetup = function() {
    if(this._windowSetup === undefined) {
        this.setupPos();
        return;
    };
    if(!this.mmcOutSideSlideApproched) {
        if(!this._windowSetup.windowSlideSettings.useSlide) {
            this.setupPos();
            return;
        };
    };
    if(this._windowOpenSlideExecute) {
        if(this._windowSetup.windowSlideSettings.openWindowSlide) {
            if(!this.isCloseSliding()) {
                this.x = this.standbyPosX() + this._windowSetup.windowSlideSettings.windowSlideX;
                this.y = this.standbyPosY() + this._windowSetup.windowSlideSettings.windowSlideY;
            };
            var xSpeed = this._windowSetup.windowSlideSettings.windowSlideSpeedX;
            var ySpeed = this._windowSetup.windowSlideSettings.windowSlideSpeedY;
            this._checkSlideForShow = true;
            this.slide(this.standbyPosX(),this.standbyPosY(),xSpeed,ySpeed);
        };
        this._windowOpenSlideExecute = false;
    };
    if(this._windowCloseSlideExecute) {
        if(this._windowSetup.windowSlideSettings.closeWindowSlide) {
            var toX = this.standbyPosX() + this._windowSetup.windowSlideSettings.windowSlideX;
            var toY = this.standbyPosY() + this._windowSetup.windowSlideSettings.windowSlideY;
            var xSpeed = this._windowSetup.windowSlideSettings.windowSlideSpeedX;
            var ySpeed = this._windowSetup.windowSlideSettings.windowSlideSpeedY;
            this._checkSlideForHide = true;
            this.slide(toX,toY,xSpeed,ySpeed);
        };
        this._windowCloseSlideExecute = false;
    };
};
//--------------------------------------------------------------------------
// ● 配置座標
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setupPos = function() {
    this.x = this.standbyPosX();
    this.y = this.standbyPosY();
};
//--------------------------------------------------------------------------
// ● 本来のx座標
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.standbyPosX = function() {
    return this._originalWindowX;
};
//--------------------------------------------------------------------------
// ● 本来のy座標
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.standbyPosY = function() {
    return this._originalWindowY;
};
//--------------------------------------------------------------------------
// ● 使用状況の不透明度
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.changeBitmapPaintOpacity = function(bitmap,enabled) {
    bitmap.paintOpacity = enabled ? 255 : this.translucentOpacity();
};
//--------------------------------------------------------------------------
// ● 半透明
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.translucentOpacity = function() {
    return 160;
};
//--------------------------------------------------------------------------
// ● drawAllItems - Window_MmcStandardWindow独自化
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.drawAllItems = function() {
    if(this.mmcDataCategory === 'logMode') {
        if(this._lines.length > 0) {
            for (var i = 0; i < this._lines.length; i++) {
                this.drawItem(i);
            };
        };
    }else if(this.mmcDataCategory === 'helpMode') {
        this.drawItem(0);
    }else{
        if(this.targetData() === undefined) return;
        if(this.targetData().length <= 0) return;
        var topIndex = this.topIndex();
        for (var i = 0; i < this.maxPageItems(); i++) {
            var index = topIndex + i;
            if (index < this.maxItems()) {
                this.drawItem(index);
            }
        }
    };
};
//--------------------------------------------------------------------------
// ● ウィンドウスライド
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.slide = function(x,y,slideSpeedX,slideSpeedY) {
    this._slide_x = x;
    this._slide_y = y;
    this._slideSpeed_x = slideSpeedX;
    this._slideSpeed_y = slideSpeedY;
    if(slideSpeedX > 0) this._windowSlidingX = true;
    if(slideSpeedY > 0) this._windowSlidingY = true;
    this.mmcOutSideSlideApproched = true;
};
//--------------------------------------------------------------------------
// ● リフレッシュ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.refresh = function() {
    if(this.contents) {
        this.contents.clear();
        if(this.mmcDataCategory === ":customPictureList") {
            this.updateStandardTargetData();
        }else if(this.mmcRefreshTarget()) {
            this.setupStandardTargetData();
        };
        this.refreshAddedPictures();
        this.refreshBustIllusts();
        if(Imported.Ayatam_EroRpgKit) {
            this.refreshAegActor();
        };
    };
    if(!this.isFreeType()) {
        this.drawAllItems();
    }else{
        this.drawFreeItem();
    };
    this.slideSetup();
};
//--------------------------------------------------------------------------
// ● リフレッシュ振り分け
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcRefreshTarget = function() {
    var result = true;
    if(this.mmcDataCategory === "actorSkillList") {
        result = false;
    }else if(this.mmcDataCategory === "actorEquipList") {
        result = false;
    }
    return result;
};
//--------------------------------------------------------------------------
// ● 追加イラストのリフレッシュ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.refreshAddedPictures = function() {
    if(this._addedPictures === undefined) return;
    this._addedPictures.forEach(pic => {
        if(pic) {
            this.removeChild(pic);
        };
    });
};
//--------------------------------------------------------------------------
// ● バストイラストのリフレッシュ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.refreshBustIllusts = function() {
    if(this._actorBustIllusts === undefined) return;
    this._actorBustIllusts.forEach(illust => {
        if(illust) {
            this._mmcbackgroundLayer.removeChild(illust);
        };
    });
};
//--------------------------------------------------------------------------
// ● 更新
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.update = function() {
    Window_Selectable.prototype.update.call(this);
    if(this.mmcDataCategory === 'logMode') {
        if(!this.updateWait()) {
            this.callNextMethod();
        };
    }else{
        if(this.updatePattern()) {
            this.refresh();
        };
    };
    if(this.mmcGetHelpWindow()) {
        this.mmcUpdateHelpWindow();
    };
    if(this.getEquipItemWindow()) {
        this.updateTempActorEquip();
    };
    this.windowSlide();
    this.dataSlide();
    this.slideSelectLast();
};
//--------------------------------------------------------------------------
// ● 装備アイテムリストの仮装備の更新
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.updateTempActorEquip = function() {
    if(this.mmcCheckPreivousEquipItem !== this.getEquipItemWindow().item() || this.mmcCheckPreivousEquipActor !== this.targetData()[0]) {
        var actor = JsonEx.makeDeepCopy(this.targetData()[0]);
        actor.forceChangeEquip(this._mmcEquipSlotId, this.getEquipItemWindow().item());
        this.setTempActor(actor);//作業位置
        this.mmcCheckPreivousEquipActor = this.targetData()[0];
        this.mmcCheckPreivousEquipItem = this.getEquipItemWindow().item();
    };
};
//--------------------------------------------------------------------------
// ● ヘルプウィンドウの更新
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcUpdateHelpWindow = function() {
    if(!this.active) return;
    if(!this.mmcGetHelpWindow().visible) this.mmcCheckHelpWindowOpen();
    if(this.index() >= 0) {
        var currentItem = this.item();
        if(typeof(currentItem) === 'object') {
            var text = currentItem ? currentItem.description : '';
        }else{
            var text = '';
        };
        this.mmcGetHelpWindow().setText(text);
    };
};
//--------------------------------------------------------------------------
// ● ヘルプウィンドウの展開確認
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcCheckHelpWindowOpen = function() {
    var window = this.mmcGetHelpWindow().currentWindow();
    if(window.windowBeginBehavior.includes('openWhenSelected')) {
        if(!this.mmcGetHelpWindow().visible) {
            SceneManager._scene.mmcWindowOpenSequence(this.mmcGetHelpWindow());
        };
    };
    if(window.windowBeginActivate.includes('activateWhenSelected')) {
        if(this.mmcGetHelpWindow().constructor === Window_MmcStandardWindow) {
            this.mmcGetHelpWindow().activate();
        }else{
            this.mmcGetHelpWindow().activate();
            this.mmcGetHelpWindow().buttonsActivate();
        };
    };
};
//--------------------------------------------------------------------------
// ● ログ用メッセージスピード
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.messageSpeed = function() {
    return 16;
};
//--------------------------------------------------------------------------
// ● ログ状態の一時停止
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.updateWait = function() {
    return this.updateWaitCount() || this.updateWaitMode();
};
//--------------------------------------------------------------------------
// ● ログ状態の一時停止カウンター
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.updateWaitCount = function() {
    if(this._waitCount > 0) {
        this._waitCount -= this.isFastForward() ? 3 : 1;
        if(this._waitCount < 0) {
            this._waitCount = 0;
        };
        return true;
    };
    return false;
};
//--------------------------------------------------------------------------
// ● ログ状態の一時停止カウンター
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.updateWaitMode = function() {
    var waiting = false;
    switch (this._waitMode) {
    case 'effect':
        waiting = this._spriteset.isEffecting();
        break;
    case 'movement':
        waiting = this._spriteset.isAnyoneMoving();
        break;
    }
    if (!waiting) {
        this._waitMode = '';
    }
    return waiting;
};
//--------------------------------------------------------------------------
// ● ログ状態の速度アップボタンの監視
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_BattleLog_prototype_isFastForward = Window_BattleLog.prototype.isFastForward;
Window_MmcStandardWindow.prototype.isFastForward = function() {
    return _AyatamSceneCustom_Window_BattleLog_prototype_isFastForward.call(this);
};
//--------------------------------------------------------------------------
// ● ログ状態の次の項目を検出
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.callNextMethod = function() {
    if (this._methods.length > 0) {
        var method = this._methods.shift();
        if (method.name && this[method.name]) {
            this[method.name].apply(this, method.params);
        } else {
            throw new Error('Method not found: ' + method.name);
        }
    }
};
//--------------------------------------------------------------------------
// ● ログ待ちモードの設定
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setWaitMode = function(waitMode) {
    this._waitMode = waitMode;
};
//--------------------------------------------------------------------------
// ● ログ項目の設定
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.push = function(methodName) {
    var methodArgs = Array.prototype.slice.call(arguments, 1);
    this._methods.push({ name: methodName, params: methodArgs });
};
//--------------------------------------------------------------------------
// ● ログ状態のウェイト受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.wait = function() {
    this._waitCount = this.messageSpeed();
};
//--------------------------------------------------------------------------
// ● ログ状態のエフェクトウェイト受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.waitForEffect = function() {
    this.setWaitMode('effect');
};
//--------------------------------------------------------------------------
// ● ログ状態の行動ウェイト受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.waitForMovement = function() {
    this.setWaitMode('movement');
};
//--------------------------------------------------------------------------
// ● ログにメッセージを追加
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.addText = function(text) {
    this._lines.push(text);
    this.refresh();
    this.wait();
};
//--------------------------------------------------------------------------
// ● ログラインの保存
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.pushBaseLine = function() {
    this._baseLineStack.push(this._lines.length);
};
//--------------------------------------------------------------------------
// ● ログラインの呼び出し
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.popBaseLine = function() {
    var baseLine = this._baseLineStack.pop();
    while (this._lines.length > baseLine) {
        this._lines.pop();
    };
};
//--------------------------------------------------------------------------
// ● ログの新しいラインを待つ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.waitForNewLine = function() {
    var baseLine = 0;
    if (this._baseLineStack.length > 0) {
        baseLine = this._baseLineStack[this._baseLineStack.length - 1];
    }
    if (this._lines.length > baseLine) {
        this.wait();
    }
};
//--------------------------------------------------------------------------
// ● ログにダメージを表示
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.popupDamage = function(target) {
    target.startDamagePopup();
};
//--------------------------------------------------------------------------
// ● 自身に設定されているヘルプウィンドウ
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcGetHelpWindow = function() {
    var currentWindow = SceneManager._scene.mmcGetCustomWindow(this.currentWindow().helpWindowName);
    if(currentWindow) {
        if(currentWindow.mmcIsHelpMode()) {
            return currentWindow;
        }else{
            return undefined;
        };
    }else{
        return undefined;
    };
};
//--------------------------------------------------------------------------
// ● 自身はヘルプウィンドウか
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.mmcIsHelpMode = function() {
    if(this.mmcIsHelpWindow === undefined) this.mmcIsHelpWindow = false;
    return this.mmcIsHelpWindow;
};
//--------------------------------------------------------------------------
// ● テキスト受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.setText = function(text) {
    if (this.mmcHelpText !== text) {
        this.mmcHelpText = text;
        this.refresh();
    }
};
//--------------------------------------------------------------------------
// ● 解放
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.clear = function() {
    if(this.mmcDataCategory === 'logMode') {
        this._lines = [];
        this._baseLineStack = [];
        this.refresh();
    }else if(this.mmcDataCategory === 'helpMode') {
        this.setText('');
    };
};
//--------------------------------------------------------------------------
// ● 行動開始受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performActionStart = function(subject, action) {
    subject.performActionStart(action);
};
//--------------------------------------------------------------------------
// ● 行動開始
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performAction = function(subject, action) {
    subject.performAction(action);
};
//--------------------------------------------------------------------------
// ● 行動終了
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performActionEnd = function(subject) {
    subject.performActionEnd();
};
//--------------------------------------------------------------------------
// ● ダメージの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performDamage = function(target) {
    target.performDamage();
};
//--------------------------------------------------------------------------
// ● 回避(ミス)の受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performMiss = function(target) {
    target.performMiss();
};
//--------------------------------------------------------------------------
// ● 回復の受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performRecovery = function(target) {
    target.performRecovery();
};
//--------------------------------------------------------------------------
// ● 回避の受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performEvasion = function(target) {
    target.performEvasion();
};
//--------------------------------------------------------------------------
// ● 反撃(カウンター)の受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performCounter = function(target) {
    target.performCounter();
};
//--------------------------------------------------------------------------
// ● 魔法反射の受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performReflection = function(target) {
    target.performReflection();
};
//--------------------------------------------------------------------------
// ● かばうの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performSubstitute = function(substitute, target) {
    substitute.performSubstitute(target);
};
//--------------------------------------------------------------------------
// ● 死亡の受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.performCollapse = function(target) {
    target.performCollapse();
};
//--------------------------------------------------------------------------
// ● スキルアニメーションの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.showAnimation = function(subject, targets, animationId) {
    if (animationId < 0) {
        this.showAttackAnimation(subject, targets);
    } else {
        this.showNormalAnimation(targets, animationId);
    }
};
//--------------------------------------------------------------------------
// ● アクター攻撃アニメーションの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.showAttackAnimation = function(subject, targets) {
    if (subject.isActor()) {
        this.showActorAttackAnimation(subject, targets);
    } else {
        this.showEnemyAttackAnimation(subject, targets);
    }
};
//--------------------------------------------------------------------------
// ● アクター攻撃アニメーションの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.showActorAttackAnimation = function(subject, targets) {
    this.showNormalAnimation(targets, subject.attackAnimationId1(), false);
    this.showNormalAnimation(targets, subject.attackAnimationId2(), true);
};
//--------------------------------------------------------------------------
// ● 敵攻撃アニメーションの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.showEnemyAttackAnimation = function(subject, targets) {
    SoundManager.playEnemyAttack();
};
//--------------------------------------------------------------------------
// ● 通常攻撃アニメーションの受付
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.showNormalAnimation = function(targets, animationId, mirror) {
    var animation = $dataAnimations[animationId];
    if (animation) {
        var delay = this.animationBaseDelay();
        var nextDelay = this.animationNextDelay();
        targets.forEach(function(target) {
            target.startAnimation(animationId, mirror, delay);
            delay += nextDelay;
        });
    }
};
//--------------------------------------------------------------------------
// ● アニメーションのウェイト時間
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.animationBaseDelay = function() {
    return 8;
};
//--------------------------------------------------------------------------
// ● 次のアニメーションへのウェイト時間
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.animationNextDelay = function() {
    return 12;
};
//--------------------------------------------------------------------------
// ● 戦闘入力ターン開始につき待ち開始
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.startTurn = function() {
    this.push('wait');
};
//--------------------------------------------------------------------------
// ● 戦闘アクション開始
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.startAction = function(subject, action, targets) {
    var item = action.item();
    this.push('performActionStart', subject, action);
    this.push('waitForMovement');
    this.push('performAction', subject, action);
    this.push('showAnimation', subject, targets.clone(), item.animationId);
    this.displayAction(subject, item);
};
//--------------------------------------------------------------------------
// ● 戦闘アクション終了
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.endAction = function(subject) {
    this.push('waitForNewLine');
    this.push('clear');
    this.push('performActionEnd', subject);
};
//--------------------------------------------------------------------------
// ● 戦闘ステート状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayCurrentState = function(subject) {
    var stateText = subject.mostImportantStateText();
    if (stateText) {
        this.push('addText', subject.name() + stateText);
        this.push('wait');
        this.push('clear');
    }
};
//--------------------------------------------------------------------------
// ● 戦闘回復状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayRegeneration = function(subject) {
    this.push('popupDamage', subject);
};
//--------------------------------------------------------------------------
// ● 戦闘状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayAction = function(subject, item) {
    var numMethods = this._methods.length;
    if (DataManager.isSkill(item)) {
        if (item.message1) {
            this.push('addText', subject.name() + item.message1.format(item.name));
        }
        if (item.message2) {
            this.push('addText', item.message2.format(item.name));
        }
    } else {
        this.push('addText', TextManager.useItem.format(subject.name(), item.name));
    }
    if (this._methods.length === numMethods) {
        this.push('wait');
    }
};
//--------------------------------------------------------------------------
// ● 戦闘反撃(カウンター)状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayCounter = function(target) {
    this.push('performCounter', target);
    this.push('addText', TextManager.counterAttack.format(target.name()));
};
//--------------------------------------------------------------------------
// ● 戦闘魔法反射状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayReflection = function(target) {
    this.push('performReflection', target);
    this.push('addText', TextManager.magicReflection.format(target.name()));
};
//--------------------------------------------------------------------------
// ● 戦闘かばう状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displaySubstitute = function(substitute, target) {
    var substName = substitute.name();
    this.push('performSubstitute', substitute, target);
    this.push('addText', TextManager.substitute.format(substName, target.name()));
};
//--------------------------------------------------------------------------
// ● 戦闘アクション結果の描画
//--------------------------------------------------------------------------
var _AyatamSceneCustom_Window_BattleLog_prototype_displayActionResults = Window_BattleLog.prototype.displayActionResults;
Window_MmcStandardWindow.prototype.displayActionResults = function(subject, target) {
    _AyatamSceneCustom_Window_BattleLog_prototype_displayActionResults.call(this,subject,target);
};
//--------------------------------------------------------------------------
// ● 戦闘失敗状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayFailure = function(target) {
    if (target.result().isHit() && !target.result().success) {
        this.push('addText', TextManager.actionFailure.format(target.name()));
    }
};
//--------------------------------------------------------------------------
// ● 戦闘クリティカル状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayCritical = function(target) {
    if (target.result().critical) {
        if (target.isActor()) {
            this.push('addText', TextManager.criticalToActor);
        } else {
            this.push('addText', TextManager.criticalToEnemy);
        }
    }
};
//--------------------------------------------------------------------------
// ● 戦闘ダメージ状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayDamage = function(target) {
    if (target.result().missed) {
        this.displayMiss(target);
    } else if (target.result().evaded) {
        this.displayEvasion(target);
    } else {
        this.displayHpDamage(target);
        this.displayMpDamage(target);
        this.displayTpDamage(target);
    }
};
//--------------------------------------------------------------------------
// ● 戦闘ミス状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayMiss = function(target) {
    var fmt;
    if (target.result().physical) {
        fmt = target.isActor() ? TextManager.actorNoHit : TextManager.enemyNoHit;
        this.push('performMiss', target);
    } else {
        fmt = TextManager.actionFailure;
    }
    this.push('addText', fmt.format(target.name()));
};
//--------------------------------------------------------------------------
// ● 戦闘回避状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayEvasion = function(target) {
    var fmt;
    if (target.result().physical) {
        fmt = TextManager.evasion;
        this.push('performEvasion', target);
    } else {
        fmt = TextManager.magicEvasion;
        this.push('performMagicEvasion', target);
    }
    this.push('addText', fmt.format(target.name()));
};
//--------------------------------------------------------------------------
// ● 戦闘HPダメージ状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayHpDamage = function(target) {
    if (target.result().hpAffected) {
        if (target.result().hpDamage > 0 && !target.result().drain) {
            this.push('performDamage', target);
        }
        if (target.result().hpDamage < 0) {
            this.push('performRecovery', target);
        }
        this.push('addText', this.makeHpDamageText(target));
    }
};
//--------------------------------------------------------------------------
// ● 戦闘MPダメージ状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayMpDamage = function(target) {
    if (target.isAlive() && target.result().mpDamage !== 0) {
        if (target.result().mpDamage < 0) {
            this.push('performRecovery', target);
        }
        this.push('addText', this.makeMpDamageText(target));
    }
};
//--------------------------------------------------------------------------
// ● 戦闘TPダメージ状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayTpDamage = function(target) {
    if (target.isAlive() && target.result().tpDamage !== 0) {
        if (target.result().tpDamage < 0) {
            this.push('performRecovery', target);
        }
        this.push('addText', this.makeTpDamageText(target));
    }
};
//--------------------------------------------------------------------------
// ● 戦闘ステート状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayAffectedStatus = function(target) {
    if (target.result().isStatusAffected()) {
        this.push('pushBaseLine');
        this.displayChangedStates(target);
        this.displayChangedBuffs(target);
        this.push('waitForNewLine');
        this.push('popBaseLine');
    }
};
//--------------------------------------------------------------------------
// ● 戦闘自動ステート状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayAutoAffectedStatus = function(target) {
    if (target.result().isStatusAffected()) {
        this.displayAffectedStatus(target, null);
        this.push('clear');
    }
};
//--------------------------------------------------------------------------
// ● 戦闘ステート変更状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayChangedStates = function(target) {
    this.displayAddedStates(target);
    this.displayRemovedStates(target);
};
//--------------------------------------------------------------------------
// ● 戦闘ステート追加状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayAddedStates = function(target) {
    target.result().addedStateObjects().forEach(function(state) {
        var stateMsg = target.isActor() ? state.message1 : state.message2;
        if (state.id === target.deathStateId()) {
            this.push('performCollapse', target);
        }
        if (stateMsg) {
            this.push('popBaseLine');
            this.push('pushBaseLine');
            this.push('addText', target.name() + stateMsg);
            this.push('waitForEffect');
        }
    }, this);
};
//--------------------------------------------------------------------------
// ● 戦闘ステート解除状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayRemovedStates = function(target) {
    target.result().removedStateObjects().forEach(function(state) {
        if (state.message4) {
            this.push('popBaseLine');
            this.push('pushBaseLine');
            this.push('addText', target.name() + state.message4);
        }
    }, this);
};
//--------------------------------------------------------------------------
// ● 戦闘強化変更状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayChangedBuffs = function(target) {
    var result = target.result();
    this.displayBuffs(target, result.addedBuffs, TextManager.buffAdd);
    this.displayBuffs(target, result.addedDebuffs, TextManager.debuffAdd);
    this.displayBuffs(target, result.removedBuffs, TextManager.buffRemove);
};
//--------------------------------------------------------------------------
// ● 戦闘強化状態の描画
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.displayBuffs = function(target, buffs, fmt) {
    buffs.forEach(function(paramId) {
        this.push('popBaseLine');
        this.push('pushBaseLine');
        this.push('addText', fmt.format(target.name(), TextManager.param(paramId)));
    }, this);
};
//--------------------------------------------------------------------------
// ● 戦闘HPダメージテキストの作成
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.makeHpDamageText = function(target) {
    var result = target.result();
    var damage = result.hpDamage;
    var isActor = target.isActor();
    var fmt;
    if (damage > 0 && result.drain) {
        fmt = isActor ? TextManager.actorDrain : TextManager.enemyDrain;
        return fmt.format(target.name(), TextManager.hp, damage);
    } else if (damage > 0) {
        fmt = isActor ? TextManager.actorDamage : TextManager.enemyDamage;
        return fmt.format(target.name(), damage);
    } else if (damage < 0) {
        fmt = isActor ? TextManager.actorRecovery : TextManager.enemyRecovery;
        return fmt.format(target.name(), TextManager.hp, -damage);
    } else {
        fmt = isActor ? TextManager.actorNoDamage : TextManager.enemyNoDamage;
        return fmt.format(target.name());
    }
};
//--------------------------------------------------------------------------
// ● 戦闘MPダメージテキストの作成
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.makeMpDamageText = function(target) {
    var result = target.result();
    var damage = result.mpDamage;
    var isActor = target.isActor();
    var fmt;
    if (damage > 0 && result.drain) {
        fmt = isActor ? TextManager.actorDrain : TextManager.enemyDrain;
        return fmt.format(target.name(), TextManager.mp, damage);
    } else if (damage > 0) {
        fmt = isActor ? TextManager.actorLoss : TextManager.enemyLoss;
        return fmt.format(target.name(), TextManager.mp, damage);
    } else if (damage < 0) {
        fmt = isActor ? TextManager.actorRecovery : TextManager.enemyRecovery;
        return fmt.format(target.name(), TextManager.mp, -damage);
    } else {
        return '';
    }
};
//--------------------------------------------------------------------------
// ● 戦闘TPダメージテキストの作成
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.makeTpDamageText = function(target) {
    var result = target.result();
    var damage = result.tpDamage;
    var isActor = target.isActor();
    var fmt;
    if (damage > 0) {
        fmt = isActor ? TextManager.actorLoss : TextManager.enemyLoss;
        return fmt.format(target.name(), TextManager.tp, damage);
    } else if (damage < 0) {
        fmt = isActor ? TextManager.actorGain : TextManager.enemyGain;
        return fmt.format(target.name(), TextManager.tp, -damage);
    } else {
        return '';
    }
};
//--------------------------------------------------------------------------
// ● selectLast の スライドの挙動を調整
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.slideSelectLast = function() {
    if(this._checkSlideSelectLast) {
        if(!this.isOpenSliding()) {
            this.selectLast();
            this._checkSlideSelectLast = false;
        };
    };
};
//--------------------------------------------------------------------------
// ● スライドイン/スライドアウト
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.windowSlide = function() {
    if(this._slideSpeed_x > 0) {
        if(this.x >= this._slide_x) {
            this.x -= this._slideSpeed_x;
            if(this.x <= this._slide_x) {
                this.x = this._slide_x;
                this._slideSpeed_x = 0;
                this._windowSlidingX = false;
            };
        }else if(this.x <= this._slide_x) {
            this.x += this._slideSpeed_x;
            if(this.x >= this._slide_x) {
                this.x = this._slide_x;
                this._slideSpeed_x = 0;
                this._windowSlidingX = false;
            };
        };
    };
    if(this._slideSpeed_y > 0) {
        if(this.y >= this._slide_y) {
            this.y -= this._slideSpeed_y;
            if(this.y <= this._slide_y) {
                this.y = this._slide_y;
                this._slideSpeed_y = 0;
                this._windowSlidingY = false;
            };
        }else if(this.y <= this._slide_y) {
            this.y += this._slideSpeed_y;
            if(this.y >= this._slide_y) {
                this.y = this._slide_y;
                this._slideSpeed_y = 0;
                this._windowSlidingY = false;
            };
        };
    };
    if(!this._windowSlidingX && !this._windowSlidingY) {
        if(!this._openDataSlideEnable && this._checkSlideForShow) {
            this.show();
            this._checkSlideForShow = false;
        };
        if(this._checkSlideForHide) {
            this.hide();
            this._checkSlideForHide = false;
        };
        if(this._slideIsClosing) {
            this._allSliding = false;
            this._slideIsClosing = false;
        };
    };
};
//--------------------------------------------------------------------------
// ● スライド初期化
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.clearSlide = function() {
    this._windowStartSlide = false;
    this._windowSlidingX = false;
    this._windowSlidingY = false;
    this._slide_x = this.standbyPosX();
    this._slide_y = this.standbyPosY();
    this._slideSpeed_x = 0;
    this._slideSpeed_y = 0;
};
//--------------------------------------------------------------------------
// ● データスライド
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.dataSlide = function() {
    if(this._startDataOpenDelay) {
        if(this.dataAllOpenDelay()) {
            this.dataOpenDelay();
        };
    };
    if(this._startDataCloseDelay) {
        if(this._dataCloseSlideExecute) {
            if(!this._dataCloseAllSlideExecute) {
                this.dataCloseDelay();
            }else{
                this.dataAllCloseDelay();
            };
        };
    };
    this.slideItemRect();
};
//--------------------------------------------------------------------------
// ● [開]データ全体の遅延を計算
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.dataAllOpenDelay = function() {
    if(this._dataAllOpenDelayInfo === undefined) return true;
    if(this._dataAllOpenDelayInfo.currentTime > 0) {
        this._dataAllOpenDelayInfo.currentTime -= 1;
        return false;
    }else{
        return true;
    };
};
//--------------------------------------------------------------------------
// ● [開]データ全体の遅延を計算
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.dataOpenDelay = function() {
    if(this._dataOpenDelayInfo === undefined) {
        this._startDataOpenDelay = false;
        return;
    };
    for(var index = 0; index <= this.maxPageItems(); ++index) {
        if(index === 0) {
            if(this._dataOpenDelayInfo[index].currentTime > 0) {
                this._dataOpenDelayInfo[index].currentTime -= 1;
                break;
            };
        }else{
            if(this._dataOpenDelayInfo[index - 1] !== undefined ) {
                if(this._dataOpenDelayInfo[index - 1].currentTime === 0) {
                    if(this._dataOpenDelayInfo[index].currentTime > 0) {
                        this._dataOpenDelayInfo[index].currentTime -= 1;
                        break;
                    }else{
                        if(this._dataOpenDelayInfo[index + 1] === undefined) {
                            this._startDataOpenDelay = false;
                        };
                    };
                };
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● [閉]データ全体の遅延を計算
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.dataAllCloseDelay = function() {
    if(this._dataAllCloseDelayInfo === undefined) return true;
    if(this._dataAllCloseDelayInfo.currentTime > 0) {
        this._dataAllCloseDelayInfo.currentTime -= 1;
    }else{
        if(this._closeSlideEnable && !this._windowCloseSlideExecute) this._windowCloseSlideExecute = true;
        this._startDataCloseDelay = false;
    };
};
//--------------------------------------------------------------------------
// ● [閉]データ全体の遅延を計算
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.dataCloseDelay = function() {
    if(this._dataCloseDelayInfo === undefined) {
        this._dataCloseAllSlideExecute = true;
        return;
    };
    for(var index = this.maxPageItems(); index >= 0; --index) {
        if(index === this.maxPageItems()) {
            if(this._dataCloseDelayInfo[index].currentTime > 0) {
                this._dataCloseDelayInfo[index].currentTime -= 1;
                break;
            };
        }else{
            if(this._dataCloseDelayInfo[index + 1] !== undefined ) {
                if(this._dataCloseDelayInfo[index + 1].currentTime === 0) {
                    if(this._dataCloseDelayInfo[index].currentTime > 0) {
                        this._dataCloseDelayInfo[index].currentTime -= 1;
                        break;
                    }else{
                        if(this._dataCloseDelayInfo[index - 1] === undefined) {
                            this._dataCloseAllSlideExecute = true;
                        };
                    };
                };
            };
        };
    };
};
//--------------------------------------------------------------------------
// ● データスライドの遅延実行
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.slideItemRect = function() {
    if(this._dataOpenSlideExecute) {
        for(var index = 0; index <= this.maxPageItems(); ++index) {
            if(this._dataAllOpenDelayInfo !== undefined) {
                if(this._dataAllOpenDelayInfo.currentTime === 0) {
                    if(this._dataOpenDelayInfo !== undefined) {
                        if(this._dataOpenDelayInfo[index].currentTime === 0) {
                            this.dataSlideExecute(index);
                        };
                    }else{
                        this.dataSlideExecute(index);
                    };
                };
            }else{
                if(this._dataOpenDelayInfo !== undefined) {
                    if(this._dataOpenDelayInfo[index].currentTime === 0) {
                        this.dataSlideExecute(index);
                    };
                }else{
                    this.dataSlideExecute(index);
                };
            };
            if(index === this.maxPageItems()) {
                if(this._slideRect[index].x === 0 && this._slideRect[index].y === 0) {
                    if(this._dataOpenSlideExecute) {
                        if(this._slideIsOpening) {
                            this._allSliding = false;
                            this._slideIsOpening = false;
                        };
                        if(this._openDataSlideEnable && this._checkSlideForShow) {
                            this.show();
                            this._checkSlideForShow = false;
                        };
                        this._dataOpenSlideExecute = false;
                    };
                };
            };
        };
        this.refresh();
    };
    if(this._dataCloseSlideExecute) {
        for(var index = this.maxPageItems(); index >= 0; --index) {
            if(this._dataCloseDelayInfo !== undefined) {
                if(this._dataCloseDelayInfo[index].currentTime === 0) {
                    this.dataSlideExecute(index);
                };
            }else{
                this.dataSlideExecute(index);
            };
            if(index === 0) {
                var toX = this._windowSetup.windowSlideSettings.dataSlideX;
                var toY = this._windowSetup.windowSlideSettings.dataSlideY;
                if(this._slideRect[index].x === toX && this._slideRect[index].y === toY) {
                    if(this._dataCloseSlideExecute) {
                        this._dataCloseSlideExecute = false;
                    };
                };
            };
        };
        this.refresh();
    };
}; 
//--------------------------------------------------------------------------
// ● データスライドの実行
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.dataSlideExecute = function(index) {
    if(this._dataOpenSlideExecute) {
        if(this._dataSlideSpeedX > 0) {
            if(this._slideRect[index].x > 0) {
                this._slideRect[index].x -= this._dataSlideSpeedX;
                if(this._slideRect[index].x <= 0) {
                    this._slideRect[index].x = 0;
                    this._dataSlidingX = false;
                };
            }else if(this._slideRect[index].x < 0) {
                this._slideRect[index].x += this._dataSlideSpeedX;
                if(this._slideRect[index].x >= 0) {
                    this._slideRect[index].x = 0;
                    this._dataSlidingX = false;
                };
            };
        };
        if(this._dataSlideSpeedY > 0) {
            if(this._slideRect[index].y > 0) {
                this._slideRect[index].y -= this._dataSlideSpeedY;
                if(this._slideRect[index].y <= 0) {
                    this._slideRect[index].y = 0;
                    this._dataSlidingY = false;
                };
            }else if(this._slideRect[index].y < 0) {
                this._slideRect[index].y += this._dataSlideSpeedY;
                if(this._slideRect[index].y >= 0) {
                    this._slideRect[index].y = 0;
                    this._dataSlidingY = false;
                };
            };
        };
    };
    if(this._dataCloseSlideExecute) {
        var slideX = this._windowSetup.windowSlideSettings.dataSlideX;
        var slideY = this._windowSetup.windowSlideSettings.dataSlideY;
        if(this._dataSlideSpeedX > 0) {
            if(slideX > this._slideRect[index].x) {
                this._slideRect[index].x += this._dataSlideSpeedX;
                if(slideX <= this._slideRect[index].x) {
                    this._slideRect[index].x = slideX;
                    this._dataSlidingX = false;
                };
            }else if(slideX < this._slideRect[index].x) {
                this._slideRect[index].x -= this._dataSlideSpeedX;
                if(slideX >= this._slideRect[index].x) {
                    this._slideRect[index].x = slideX;
                    this._dataSlidingX = false;
                };
            };
        };
        if(this._dataSlideSpeedY > 0) {
            if(slideY > this._slideRect[index].y) {
                this._slideRect[index].y += this._dataSlideSpeedY;
                if(slideY <= this._slideRect[index].y) {
                    this._slideRect[index].y = slideY;
                    this._dataSlidingY = false;
                };
            }else if(slideY < this._slideRect[index].y) {
                this._slideRect[index].y -= this._dataSlideSpeedY;
                if(slideY >= this._slideRect[index].y) {
                    this._slideRect[index].y = slideY;
                    this._dataSlidingY = false;
                };
            };
        };
    };
}; 
//--------------------------------------------------------------------------
// ● エラーの表示
//--------------------------------------------------------------------------
Window_MmcStandardWindow.prototype.popError = function(errorIndex) {
    if(errorIndex === 0) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' の参照するデータが見つかりませんでした。\n設定を再確認してください。');
    }else if(errorIndex === 1) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' の参照するデータがアクター関連ではないため、描画できませんでした。\n設定を再確認してください。');
    }else if(errorIndex === 2) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' にて未導入プラグイン「Sp貯蓄式スキルMV」の情報を描画しようとしています。\n設定を再確認してください。');
    }else if(errorIndex === 3) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' にて未導入プラグイン「エロRPG制作キットMV」の情報を描画しようとしています。\n設定を再確認してください。');
    }else if(errorIndex === 4) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' にて描画するデータリストにリスト型専用のスクリプトが使用されようとしています。\n設定を再確認してください。');
    }else if(errorIndex === 5) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' にて描画するデータリストに自由型専用のスクリプトが使用されようとしています。\n設定を再確認してください。');
    }else if(errorIndex === 6) {
        SceneManager.mmcErrorPoper(true,'er149wms',this._windowSetup.windowName + ' の参照するデータが敵関連ではないため、描画できませんでした。\n設定を再確認してください。');
    };
};

Window_MmcStandardWindow.prototype.mmResetCursorFlag = function() {
    this._mmcCursorFlag = "";
};

Window_MmcStandardWindow.prototype.mmcCursorFlag = function() {
    return this._mmcCursorFlag;
};

Window_MmcStandardWindow.prototype.processHandling = function() {
    if (this.isOpenAndActive()) {
        if (!this._checkSlideSelectLast && this.isOkTriggered()) {
            this.processOk();
        } else if (!this._checkSlideSelectLast && this.isCancelTriggered()) {
            this.processCancel();
        } else if (!this._checkSlideSelectLast && Input.isTriggered('pagedown')) {
            this.processPagedown();
        } else if (!this._checkSlideSelectLast && Input.isTriggered('pageup')) {
            this.processPageup();
        }
    }
};

Window_MmcStandardWindow.prototype.updateArrows = function() {
    if(!this._windowSetup.showArrow) return;
    if(this._isFreeType) return;
    if(this._windowSetup.permissionMoveCursor.includes('leftRight')) {
        this.leftArrowVisible = this.topRow() > 0;
        this.rightArrowVisible = this.topRow() + 1 < this.maxRows();
        this._leftArrowSprite.visible = this.isOpen() && this.leftArrowVisible;
        this._rightArrowSprite.visible = this.isOpen() && this.rightArrowVisible;
    }else if(this._windowSetup.permissionMoveCursor.includes('upDown')) {
        var topRow = this.topRow();
        var maxTopRow = this.maxTopRow();
        this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
        this.upArrowVisible = topRow > 0;
    }else if(this._windowSetup.permissionMoveCursor.includes('allDir')) {
        this.leftArrowVisible = this.topRow() > 0;
        this.rightArrowVisible = this.topRow() + 1 < this.maxRows();
        this._leftArrowSprite.visible = this.isOpen() && this.leftArrowVisible;
        this._rightArrowSprite.visible = this.isOpen() && this.rightArrowVisible;
        var topRow = this.topRow();
        var maxTopRow = this.maxTopRow();
        this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
        this.upArrowVisible = topRow > 0;
    }else if(this._windowSetup.permissionMoveCursor.includes('default')) {
        if(this.numVisibleRows() === 1 && this.maxCols() > 1) {
            this.leftArrowVisible = this.topRow() > 0;
            this.rightArrowVisible = this.topRow() + 1 < this.maxRows();
            this._leftArrowSprite.visible = this.isOpen() && this.leftArrowVisible;
            this._rightArrowSprite.visible = this.isOpen() && this.rightArrowVisible;
        }else{
            var topRow = this.topRow();
            var maxTopRow = this.maxTopRow();
            this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
            this.upArrowVisible = topRow > 0;
        };
    };
};

Window_MmcStandardWindow.prototype.updateCursor = function() {
    Window_Selectable.prototype.updateCursor.call(this);
    if(!this._mmcEnableCursorHighlight) {
        this.setCursorRect(0, 0, 0, 0);
    };
};

Window_MmcStandardWindow.prototype.mmcCheckHelpWindowClose = function() {
    var iWindow = this.mmcGetHelpWindow().currentWindow();
    if(iWindow.windowCloseBehavior.includes('closeWindow')) {
        if(this.mmcGetHelpWindow().visible) {
            SceneManager._scene.mmcWindowCloseSequence(this.mmcGetHelpWindow());
        };
    };
    if(this.mmcGetHelpWindow().constructor === Window_MmcStandardWindow) {
        this.mmcGetHelpWindow().deactivate();
    }else{
        this.mmcGetHelpWindow().deactivate();
        this.mmcGetHelpWindow().buttonsDeactivate();
    };
};

//=============================================================================
// Window_MmcCommand - メニュー用カスタムウィンドウ [コマンド型]
//=============================================================================

function Window_MmcCommand() {
    this.initialize.apply(this,arguments);
};

Window_MmcCommand.prototype = Object.create(Window_Command.prototype);
Window_MmcCommand.prototype.constructor = Window_MmcCommand;

Window_MmcCommand.prototype.initialize = function(x,y,w,h,commandSetup) {
    this._commandSetup = commandSetup;
    try {
        var x = eval(x);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウx座標にて\n「<font color="red"><b> ' + x + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
        SceneManager.stop();
    };
    try {
        var y = eval(y);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウy座標にて\n「<font color="red"><b> ' + y + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
        SceneManager.stop();
    };
    try {
        var width = eval(w);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウの横幅にて\n「<font color="red"><b> ' + w + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
        SceneManager.stop();
    };
    try {
        var height = eval(h);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウの縦幅にて\n「<font color="red"><b> ' + h + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
        SceneManager.stop();
    };
    this._commandSetup.windowX = x;
    this._commandSetup.windowY = y;
    this._commandSetup.windowW = width;
    this._commandSetup.windowH = height;
    Window_Command.prototype.initialize.call(this,x,y);
    this.width = width;
    this.height = height;
    this._isWindow = false;
    this._mmcCursorFlag = "";
    this._mmcEnableCursorHighlight = this._commandSetup.windowHighLight;
    this._mmcStartingToClose = false;
    this._mmcReadyToClose = false;
    this._mmcButtonsReadyToClose = [];
    this.createMmcNewArrows();
    this.mmcSetup();
    this.selectLast();
};
//--------------------------------------------------------------------------
// ● 左右矢印の作成
//--------------------------------------------------------------------------
Window_MmcCommand.prototype.createMmcNewArrows = function() {
    this.leftArrowVisible = false;
    this.rightArrowVisible = false;
    var w = this._width;
    var h = this._height;
    var q = 24;
    var p = q/2;
    var sx = 96+(96/2);
    var sy = 96-(96/2);
    this._leftArrowSprite = new Sprite();
    this._leftArrowSprite.bitmap = this.windowskin;
    this._leftArrowSprite.anchor.x = 0.5;
    this._leftArrowSprite.anchor.y = 0.5;
    this._leftArrowSprite.setFrame(sx-q, sy-p, p, q);
    this._leftArrowSprite.move(p, h/2);
    this._leftArrowSprite.visible = false;
    this._rightArrowSprite = new Sprite();
    this._rightArrowSprite.bitmap = this.windowskin;
    this._rightArrowSprite.anchor.x = 0.5;
    this._rightArrowSprite.anchor.y = 0.5;
    this._rightArrowSprite.setFrame((sx-p)+q, sy-p, p, q);
    this._rightArrowSprite.move(w-p, h/2);
    this._rightArrowSprite.visible = false;
    this.addChild(this._leftArrowSprite);
    this.addChild(this._rightArrowSprite);
};

Window_MmcCommand.prototype.mmcSetup = function() {
    this._updateAlways = this._commandSetup.windowUpdateBehavior;
};

Window_MmcCommand.prototype.startWindowCloseSlides = function() {
    if(this._mmcStartingToClose) return;
    if(this._mmcButtons.length <= 0) {
        this.hide();
        this._mmcReadyToClose = true;
        return;
    };
    this._checkTimerMax = 10;
    this._checkCurrentTimer = 0;
    this._mmcStartingToClose = true;
    this._mmcButtons.forEach(button => {
        if(button) {
            button.startCommandCloseSlides();
        };
    });
};

Window_MmcCommand.prototype.checkForAllButtonsReadyToClose = function() {
    if(!this._mmcStartingToClose) return;
    if(this._checkCurrentTimer === 0) {
        var index = 0;
        this._mmcButtons.forEach(button => {
            if(button) {
                this._mmcButtonsReadyToClose[index] = button.isCloseSliding();
                index++;
            };
        });
        if(!this._mmcButtonsReadyToClose.includes(true)) {
            this._mmcStartingToClose = false;
            this._mmcReadyToClose = true;
            this.hide();
        };
        this._checkCurrentTimer++;
    }else{
        this._checkCurrentTimer++;
        if(this._checkCurrentTimer >= this._checkTimerMax) {
            this._checkCurrentTimer = 0;
        };
    };
};

Window_MmcCommand.prototype.isWindowReadyToClose = function() {
    return this._mmcReadyToClose;
};

Window_MmcCommand.prototype.currentWindow = function() {
    return this._commandSetup;
};

Window_MmcCommand._lastCommandSymbol = null;

Window_MmcCommand.initCommandPosition = function() {
    this._lastCommandSymbol = null;
};

Window_MmcCommand.prototype.updatePattern = function() {
    return this._updateAlways;
};

Window_MmcCommand.prototype.windowWidth = function() {
    try {
        return eval(this._commandSetup.windowW);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウの横幅の「<font color="red"><b ' + this._commandSetup.windowW + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
        SceneManager.stop();
    };
};

Window_MmcCommand.prototype.windowHeight = function() {
    try {
        return eval(this._commandSetup.windowH);
    } catch (e) {
        console.error(e);
        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のウィンドウの設定\nウィンドウの縦幅の「<font color="red"><b ' + this._commandSetup.windowH + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
        error = error.replace(/\n/g, '<br>');
        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
        SceneManager.stop();
    };
};

Window_MmcCommand.prototype.numVisibleRows = function() {
    return this.maxItems();
};

Window_MmcCommand.prototype.initializeMmcButtons = function() {
    this._mmcButtons = [];
};

Window_MmcCommand.prototype.removeSpriteCommands = function() {
    if(this._mmcButtons.length <= 0) return;
    this._mmcButtons.forEach(button => {
        if(button) {
            this.removeChild(button);
        };
    });
    this.initializeMmcButtons();
};

Window_MmcCommand.prototype.battleActor = function(actor) {
    this._mmcBattleActor = actor;
    this.removeSpriteCommands();
    this.refresh();
};

Window_MmcCommand.prototype.mmcCanAttack = function() {
    if(this._mmcBattleActor === undefined) return false;
    if(this._mmcBattleActor === null) return false;
    return this._mmcBattleActor.canAttack();
};

Window_MmcCommand.prototype.mmcCanGuard = function() {
    if(this._mmcBattleActor === undefined) return false;
    if(this._mmcBattleActor === null) return false;
    return this._mmcBattleActor.canGuard();
};

Window_MmcCommand.prototype.makeCommandList = function() {
    if(this._mmcButtons === undefined) this.initializeMmcButtons();
    if(this._commandSetup === undefined) return;
    var order = this._commandSetup.commandOrder;
    var commands = this._commandSetup.commands;
    var id = 0;
    order.forEach(cName => {
        if(cName) {
            commands.forEach(cmd => {
                if(cmd) {
                    if(cName === cmd.commandName) {
                        this.mmcCreateCommand(id,cmd);
                        ++id;
                    };
                };
            });
        };
    });
};

Window_MmcCommand.prototype.mmcCreateCommand = function(id,cmd) {
    var enabled = true;
    enabled = cmd.commandEnableSwitch !== 0 ? $gameSwitches.value(cmd.commandEnableSwitch) : true;
    if(cmd.commandEnableExt !== undefined) {
        if(cmd.commandEnableExt !== '') {
            if(!cmd.commandEnableExt.includes('none')) {
                try {
                    enabled = enabled ? eval(cmd.commandEnableExt) : enabled;
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + cmd.commandName + '</b></font> の<font color="red"><b>コマンド使用特殊条件</b></font>「' + cmd.commandEnableExt + '」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error', error);
                    SceneManager.stop();
                };
            };
        };
    };
    if(cmd.callType === 'functionCommand') {
        if(cmd.commandTypeName.includes(':switch')) {
            var swEnable = cmd.commandTypeName.match(/:switch (.*) (.*)/i)[2] === "true" ? true : false;
            enabled = enabled ? swEnable : enabled;
        };
        if(cmd.commandTypeName.includes(':scriptCommand')) {
            var scriptEnable = cmd.commandTypeName.match(/:scriptCommand (.*), (.*)/i)[2];
            try {
                enabled = enabled ? eval(scriptEnable) : enabled;
            } catch (e) {
                console.error(e);
                var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + cmd.commandName + '</b></font> の<font color="red"><b>コマンド参照名</b></font>にて「' + scriptEnable + '」の指定に誤りがあります。\n設定を確認してください。';
                error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                error = error.replace(/\n/g, '<br>');
                Graphics.printError('シーンカスタマイズMV : Error', error);
                SceneManager.stop();
            };
        };
    };
    if(cmd.commandShowSwitch === 0 || $gameSwitches.value(cmd.commandShowSwitch)) {
        if(this._mmcBattleActor) {
            if(cmd.commandName.includes('sType:')) {
                var skillTypes = this._mmcBattleActor.addedSkillTypes();
                skillTypes.sort(function(a, b) {
                    return a - b;
                });
                skillTypes.forEach(stypeId => {
                    if(stypeId) {
                        var name = $dataSystem.skillTypes[stypeId];
                        if(cmd.commandName.includes(name)) {
                            this.addCommand(name, ':mmcAddCommand', enabled, id);
                        };
                    };
                });
            }else{
                this.addCommand(cmd.commandName, ':mmcAddCommand', enabled, id);
            };
        }else{
            this.addCommand(cmd.commandName, ':mmcAddCommand', enabled, id);
        };
    };
};

Window_MmcCommand.prototype.createMmcAllCommands = function() {
    var designs = this._commandSetup.commandListDesign;
    var index = 0;
    this._list.forEach(command => {
        if(command) {
            if(this._mmcButtons[index] === undefined) {
                this._mmcButtons[index] = new Sprite_mmcMenuButtons(index,command,designs,this._commandSetup,this._scrollX,this._scrollY);
                this._mmcButtons[index].visible = false;
                this.addChild(this._mmcButtons[index]);
            };
            index++;
        };
    });
};

Window_MmcCommand.prototype.drawItem = function(index) {
    if(this._mmcButtons.length <= 0) this.createMmcAllCommands();
    this._mmcButtons[index].setCommandInfo(this._list[index]);
    this._mmcButtons[index]._scrollX = this._scrollX;
    this._mmcButtons[index]._scrollY = this._scrollY;
    this._mmcButtons[index].visible = true;
    this._mmcButtons[index].refresh();
};

Window_MmcCommand.prototype.buttonsStartOpenSlide = function() {
    if(this._mmcButtons.length <= 0) return;
    this.show();
    this._mmcButtons.forEach(button => {
        if(button) {
            button.startCommandOpenSlide();
        };
    });
};

Window_MmcCommand.prototype.buttonsStartCloseSlide = function() {
    if(this._mmcButtons.length <= 0) return;
    this._mmcButtons.forEach(button => {
        if(button) {
            button.startCommandCloseSlides();
        };
    });
};

Window_MmcCommand.prototype.buttonsActivate = function() {
    if(this._mmcButtons.length <= 0) return;
    this._mmcButtons.forEach(button => {
        if(button) {
            button.setAccessInfo(true);
        };
    });
};

Window_MmcCommand.prototype.buttonsDeactivate = function() {
    if(this._mmcButtons.length <= 0) return;
    this._mmcButtons.forEach(button => {
        if(button) {
            button.setAccessInfo(false);
        };
    });
};

Window_MmcCommand.prototype.mmcGetHelpWindow = function() {
    var currentWindow = SceneManager._scene.mmcGetCustomWindow(this.currentWindow().helpWindowName);
    if(currentWindow) {
        if(currentWindow.mmcIsHelpMode()) {
            return currentWindow;
        }else{
            return undefined;
        };
    }else{
        return undefined;
    };
};

Window_MmcCommand.prototype.isFormationEnabled = function() {
    return $gameParty.size() >= 2 && $gameSystem.isFormationEnabled();
};

var _AyatamSceneCustom_Window_MenuCommand_prototype_isOptionsEnabled = Window_MenuCommand.prototype.isOptionsEnabled;
Window_MmcCommand.prototype.isOptionsEnabled = function() {
    return _AyatamSceneCustom_Window_MenuCommand_prototype_isOptionsEnabled.call(this);
};

var _AyatamSceneCustom_Window_MenuCommand_prototype_isSaveEnabled = Window_MenuCommand.prototype.isSaveEnabled;
Window_MmcCommand.prototype.isSaveEnabled = function() {
    return _AyatamSceneCustom_Window_MenuCommand_prototype_isSaveEnabled.call(this);
};

Window_MmcCommand.prototype.isLoadEnabled = function() {
    return DataManager.isAnySavefileExists();
};

var _AyatamSceneCustom_Window_MenuCommand_prototype_isGameEndEnabled = Window_MenuCommand.prototype.isGameEndEnabled;
Window_MmcCommand.prototype.isGameEndEnabled = function() {
    return _AyatamSceneCustom_Window_MenuCommand_prototype_isGameEndEnabled.call(this);
};

Window_MmcCommand.prototype.refresh = function() {
    this._mmcButtons.forEach(button => {
        if(button) {
            button.visible = false;
        };
    });
    Window_Command.prototype.refresh.call(this);
};

Window_MmcCommand.prototype.processTouch = function() {
    if (this.isOpenAndActive()) {
        if (TouchInput.isTriggered() && this.isTouchedInsideFrame()) {
            var x = this.canvasToLocalX(TouchInput.x);
            var y = this.canvasToLocalY(TouchInput.y);
            var hitIndex = this.hitTest(x, y);
            if(this._mmcButtons[hitIndex] !== undefined) {
                if(this._mmcButtons[hitIndex]._design === undefined) {
                    this._touching = true;
                    this.onTouch(true);
                };
            }else{
                this._touching = true;
                this.onTouch(true);
            };
        } else if (TouchInput.isCancelled()) {
            if (this.isCancelEnabled()) {
                this.processCancel();
            }
        }
        if (this._touching) {
            if (TouchInput.isPressed()) {
                this.onTouch(false);
            } else {
                this._touching = false;
            }
        };
    } else {
        this._touching = false;
    }
};

Window_MmcCommand.prototype.processWheel = function() {
    return; //処理落ち要因のため使用禁止
    if (this.isOpenAndActive()) {
        var threshold = 20;
        if (TouchInput.wheelY >= threshold) {
            this.cursorDown();
        }
        if (TouchInput.wheelY <= -threshold) {
            this.cursorUp();
        }
    }
};

Window_MmcCommand.prototype.mmResetCursorFlag = function() {
    this._mmcCursorFlag = "";
};

Window_MmcCommand.prototype.mmcCursorFlag = function() {
    return this._mmcCursorFlag;
};

Window_MmcCommand.prototype.processHandling = function() {
    if (this.isOpenAndActive()) {
        if (this.isOkTriggered()) {
            this.processOk();
        } else if (this.isCancelTriggered()) {
            this.processCancel();
        } else if (Input.isTriggered('pagedown')) {
            this.processPagedown();
        } else if (Input.isTriggered('pageup')) {
            this.processPageup();
        }
    }
};

Window_MmcCommand.prototype.spriteProcessOk = function() {
    this.processOk();
};

Window_MmcCommand.prototype.processOk = function() {
    Window_MmcCommand._lastCommandSymbol = this.currentSymbol();
    if (this.isCurrentItemEnabled()) {
        if(this._commandSetup !== undefined) {
            var cursor = this._commandSetup.commandOk;
            if(cursor.cursorAction.includes('cursorAction')) {
                if(cursor.commandEnableSwitch > 0) {
                    if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                        SoundManager.playBuzzer();
                        return;
                    };
                };
                if(!cursor.commandEnableExt.includes('none')) {
                    try {
                        var enable = eval(cursor.commandEnableExt);
                        if(!enable) {
                            SoundManager.playBuzzer();
                            return;
                        };
                    } catch (e) {
                        console.error(e);
                        var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\n決定キーの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                        error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                        error = error.replace(/\n/g, '<br>');
                        Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                        SceneManager.stop();
                    };
                };
                if(!this.mmcProcessOkCommand) {
                    if(Array.isArray(cursor.commandTypeName)) {
                        this.mmcProcessOkCommand = cursor.commandTypeName;
                    };
                };
                if(this.mmcProcessOkCommand) {
                    if(this.mmcProcessOkCommand.length > 0) {
                        this.mmcProcessOkCommand.forEach(command => {
                            if(command) {
                                if(command.includes(':callHandler')) {
                                    this.callOkHandler();
                                }else{
                                    this._mmcCursorFlag = ":processOk";
                                    this._commandSetup.commandOk.commandTypeName = command;
                                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                                };
                            };
                        });
                    }else{
                        this._mmcCursorFlag = ":processOk";
                        this._commandSetup.commandOk.commandTypeName = "";
                        SceneManager._scene.mmcAddCommands(this._commandSetup);
                    };
                    this._commandSetup.commandOk.commandTypeName = this.mmcProcessOkCommand;
                };
                this.playOkSound();
                this.updateInputData();
                this.deactivate();
            }else if(cursor.cursorAction.includes('none')) {
                //なにもしない
            }else{
                Window_Command.prototype.processOk.call(this);
            };
        }else{
            Window_Command.prototype.processOk.call(this);
        };
        if(this.mmcGetHelpWindow()) {
            this.mmcGetHelpWindow().clear();
            this.mmcCheckHelpWindowClose();
        };
    } else {
        this.playBuzzerSound();
    }
};

Window_MmcCommand.prototype.processCancel = function() {
    if(this._commandSetup !== undefined) {
        var cursor = this._commandSetup.commandCancel;
        if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nキャンセルキーの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcProcessCancelCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcProcessCancelCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcProcessCancelCommand) {
                if(this.mmcProcessCancelCommand.length > 0) {
                    this.mmcProcessCancelCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                SoundManager.playCancel();
                                this.callCancelHandler();
                            }else{
                                this._mmcCursorFlag = ":processCancel";
                                this._commandSetup.commandCancel.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._windowSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":processCancel";
                    this._commandSetup.commandCancel.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._windowSetup);
                };
                this._commandSetup.commandCancel.commandTypeName = this.mmcProcessCancelCommand;
            };
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        }else{
            Window_Selectable.prototype.processCancel.call(this);
        };
    }else{
        Window_Selectable.prototype.processCancel.call(this);
    };
    if(this.mmcGetHelpWindow()) {
        this.mmcGetHelpWindow().clear();
        this.mmcCheckHelpWindowClose();
    };
};

Window_MmcCommand.prototype.cursorDown = function(wrap) {
    if(this._commandSetup === undefined) {
        Window_Selectable.prototype.cursorDown.call(this,wrap);
    }else{
        var cursor = this._commandSetup.commandCursorDown;
        if(cursor.cursorAction.includes('default')) {
            if(!this._commandSetup.permissionMoveCursor.includes('leftRight')) {
                Window_Selectable.prototype.cursorDown.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー下の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorDownCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorDownCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorDownCommand) {
                if(this.mmcCursorDownCommand.length > 0) {
                    this.mmcCursorDownCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":down";
                                this._commandSetup.commandCursorDown.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._commandSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":down";
                    this._commandSetup.commandCursorDown.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                };
                this._commandSetup.commandCursorDown.commandTypeName = this.mmcCursorDownCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};

Window_MmcCommand.prototype.cursorUp = function(wrap) {
    if(this._commandSetup === undefined) {
        Window_Selectable.prototype.cursorUp.call(this,wrap);
    }else{
        var cursor = this._commandSetup.commandCursorUp;
        if(cursor.cursorAction.includes('default')) {
            if(!this._commandSetup.permissionMoveCursor.includes('leftRight')) {
                Window_Selectable.prototype.cursorUp.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー上の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorUpCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorUpCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorUpCommand) {
                if(this.mmcCursorUpCommand.length > 0) {
                    this.mmcCursorUpCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":up";
                                this._commandSetup.commandCursorUp.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._commandSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":up";
                    this._commandSetup.commandCursorUp.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                };
                this._commandSetup.commandCursorUp.commandTypeName = this.mmcCursorUpCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};

Window_MmcCommand.prototype.cursorRight = function(wrap) {
    if(this._commandSetup === undefined) {
        Window_Selectable.prototype.cursorRight.call(this,wrap);
    }else{
        var cursor = this._commandSetup.commandCursorRight;
        if(cursor.cursorAction.includes('default')) {
            if(this._commandSetup.permissionMoveCursor.includes('leftRight') || this._commandSetup.permissionMoveCursor.includes('allDir')) {
                if(this._commandSetup.caseCommandCol > 1) {
                    Window_Selectable.prototype.cursorRight.call(this,wrap);
                }else{
                    Window_Selectable.prototype.cursorDown.call(this,wrap);
                };
            }else if(!this._commandSetup.permissionMoveCursor.includes('upDown')) {
                Window_Selectable.prototype.cursorRight.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー右の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorRightCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorRightCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorRightCommand) {
                if(this.mmcCursorRightCommand.length > 0) {
                    this.mmcCursorRightCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":right";
                                this._commandSetup.commandCursorRight.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._commandSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":right";
                    this._commandSetup.commandCursorRight.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                };
                this._commandSetup.commandCursorRight.commandTypeName = this.mmcCursorRightCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};

Window_MmcCommand.prototype.cursorLeft = function(wrap) {
    if(this._commandSetup === undefined) {
        Window_Selectable.prototype.cursorLeft.call(this,wrap);
    }else{
        var cursor = this._commandSetup.commandCursorLeft;
        if(cursor.cursorAction.includes('default')) {
            if(this._commandSetup.permissionMoveCursor.includes('leftRight') || this._commandSetup.permissionMoveCursor.includes('allDir')) {
                if(this._commandSetup.caseCommandCol > 1) {
                    Window_Selectable.prototype.cursorLeft.call(this,wrap);
                }else{
                    Window_Selectable.prototype.cursorUp.call(this,wrap);
                };
            }else if(!this._commandSetup.permissionMoveCursor.includes('upDown')) {
                Window_Selectable.prototype.cursorLeft.call(this,wrap);
            };
        }else if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nカーソルキー左の挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcCursorLeftCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcCursorLeftCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcCursorLeftCommand) {
                if(this.mmcCursorLeftCommand.length > 0) {
                    this.mmcCursorLeftCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":left";
                                this._commandSetup.commandCursorLeft.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._commandSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":left";
                    this._commandSetup.commandCursorLeft.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                };
                this._commandSetup.commandCursorLeft.commandTypeName = this.mmcCursorLeftCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};

var _AyatamSceneCustom_Window_Selectable_prototype_processPageup = Window_Selectable.prototype.processPageup;
Window_MmcCommand.prototype.processPageup = function() {
    if(this._commandSetup === undefined) {
        _AyatamSceneCustom_Window_Selectable_prototype_processPageup.call(this);
    }else{
        var cursor = this._commandSetup.commandPageUp;
        if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nQ/PageUp/LTの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcProcessPageupCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcProcessPageupCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcProcessPageupCommand) {
                if(this.mmcProcessPageupCommand.length > 0) {
                    this.mmcProcessPageupCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":pageUp";
                                this._commandSetup.commandPageUp.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._commandSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":pageUp";
                    this._commandSetup.commandPageUp.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                };
                this._commandSetup.commandPageUp.commandTypeName = this.mmcProcessPageupCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};

var _AyatamSceneCustom_Window_Selectable_prototype_processPagedown = Window_Selectable.prototype.processPagedown;
Window_MmcCommand.prototype.processPagedown = function() {
    if(this._commandSetup === undefined) {
        _AyatamSceneCustom_Window_Selectable_prototype_processPagedown.call(this);
    }else{
        var cursor = this._commandSetup.commandPageDown;
        if(cursor.cursorAction.includes('cursorAction')) {
            if(cursor.commandEnableSwitch > 0) {
                if(!$gameSwitches.value(cursor.commandEnableSwitch)) {
                    SoundManager.playBuzzer();
                    return;
                };
            };
            if(!cursor.commandEnableExt.includes('none')) {
                try {
                    var enable = eval(cursor.commandEnableExt);
                    if(!enable) {
                        SoundManager.playBuzzer();
                        return;
                    };
                } catch (e) {
                    console.error(e);
                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + this._commandSetup.windowName + '</b></font> のカーソル/ボタン挙動の設定\nE/PageDown/RTの挙動のカーソル使用特殊条件にて\n「<font color="red"><b> ' + cursor.commandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。';
                    error = '対象シーン: <font color="red"><b>' + SceneManager._scene.constructor.name + '</b></font>\n' + error;
                    error = error.replace(/\n/g, '<br>');
                    Graphics.printError('シーンカスタマイズMV : Error(er388wmc)', error);
                    SceneManager.stop();
                };
            };
            if(!this.mmcProcessPagedownCommand) {
                if(Array.isArray(cursor.commandTypeName)) {
                    this.mmcProcessPagedownCommand = cursor.commandTypeName;
                };
            };
            if(this.mmcProcessPagedownCommand) {
                if(this.mmcProcessPagedownCommand.length > 0) {
                    this.mmcProcessPagedownCommand.forEach(command => {
                        if(command) {
                            if(command.includes(':callHandler')) {
                                //なにもしない
                            }else{
                                this._mmcCursorFlag = ":pageDown";
                                this._commandSetup.commandPageDown.commandTypeName = command;
                                SceneManager._scene.mmcAddCommands(this._commandSetup);
                            };
                        };
                    });
                }else{
                    this._mmcCursorFlag = ":pageDown";
                    this._commandSetup.commandPageDown.commandTypeName = "";
                    SceneManager._scene.mmcAddCommands(this._commandSetup);
                };
                this._commandSetup.commandPageDown.commandTypeName = this.mmcProcessPagedownCommand;
            };
            SoundManager.playOk();
        }else if(cursor.cursorAction.includes('none')) {
            //なにもしない
        };
    };
};

Window_MmcCommand.prototype.mmcCheckHelpWindowClose = function() {
    var iWindow = this.mmcGetHelpWindow().currentWindow();
    if(iWindow.windowCloseBehavior.includes('closeWindow')) {
        if(this.mmcGetHelpWindow().visible) {
            SceneManager._scene.mmcWindowCloseSequence(this.mmcGetHelpWindow());
        };
    };
    if(this.mmcGetHelpWindow().constructor === Window_MmcStandardWindow) {
        this.mmcGetHelpWindow().deactivate();
    }else{
        this.mmcGetHelpWindow().deactivate();
        this.mmcGetHelpWindow().buttonsDeactivate();
    };
};

Window_MmcCommand.prototype.selectLast = function() {
    this.selectSymbol(Window_MmcCommand._lastCommandSymbol);
};

Window_MmcCommand.prototype.maxCols = function() {
    return this._commandSetup.caseCommandCol;
};

Window_MmcCommand.prototype.update = function() {
    Window_Selectable.prototype.update.call(this);
    if(this.updatePattern()) {
        this.refresh();
    };
    if(this.mmcGetHelpWindow()) {
        this.mmcUpdateHelpWindow();
    };
    this.checkForAllButtonsReadyToClose();
};

Window_MmcCommand.prototype.mmcUpdateHelpWindow = function() {
    if(!this.active) return;
    if(!this.mmcGetHelpWindow().visible) this.mmcCheckHelpWindowOpen();
    if(this.index() >= 0) {
        if(this._mmcButtons[this.index()]) {
            var text = this._mmcButtons[this.index()].getCommandHelp();
            this.mmcGetHelpWindow().setText(text);
        }else{
            this.mmcGetHelpWindow().clear();
        };
    };
};

Window_MmcCommand.prototype.mmcCheckHelpWindowOpen = function() {
    var window = this.mmcGetHelpWindow().currentWindow();
    if(window.windowBeginBehavior.includes('openWhenSelected')) {
        if(!this.mmcGetHelpWindow().visible) {
            SceneManager._scene.mmcWindowOpenSequence(this.mmcGetHelpWindow());
        };
    };
    if(window.windowBeginActivate.includes('activateWhenSelected')) {
        if(this.mmcGetHelpWindow().constructor === Window_MmcStandardWindow) {
            this.mmcGetHelpWindow().activate();
        }else{
            this.mmcGetHelpWindow().activate();
            this.mmcGetHelpWindow().buttonsActivate();
        };
    };
};

Window_MmcCommand.prototype.updateCursor = function() {
    Window_Selectable.prototype.updateCursor.call(this);
    if(!this._mmcEnableCursorHighlight) {
        this.setCursorRect(0, 0, 0, 0);
    };
};

Window_MmcCommand.prototype.updateArrows = function() {
    if(!this._commandSetup.showArrow) return;
    if(this._commandSetup.commandDesignType.includes('freeType')) return;
    if(this._commandSetup.permissionMoveCursor.includes('leftRight')) {
        if(this._commandSetup.caseCommandCol > 1) {
            this.leftArrowVisible = this.topRow() > 0;
            this.rightArrowVisible = this.topRow() + 1 < this.maxRows();
            this._leftArrowSprite.visible = this.isOpen() && this.leftArrowVisible;
            this._rightArrowSprite.visible = this.isOpen() && this.rightArrowVisible;
        };
    }else if(this._commandSetup.permissionMoveCursor.includes('upDown')) {
        var topRow = this.topRow();
        var maxTopRow = this.maxTopRow();
        this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
        this.upArrowVisible = topRow > 0;
    }else if(this._commandSetup.permissionMoveCursor.includes('allDir')) {
        if(this._commandSetup.caseCommandCol > 1) {
            this.leftArrowVisible = this.topRow() > 0;
            this.rightArrowVisible = this.topRow() + 1 < this.maxRows();
            this._leftArrowSprite.visible = this.isOpen() && this.leftArrowVisible;
            this._rightArrowSprite.visible = this.isOpen() && this.rightArrowVisible;
        };
        var topRow = this.topRow();
        var maxTopRow = this.maxTopRow();
        this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
        this.upArrowVisible = topRow > 0;
    }else if(this._commandSetup.permissionMoveCursor.includes('default')) {
        if(this.numVisibleRows() === 1 && this.maxCols() > 1) {
            this.leftArrowVisible = this.topRow() > 0;
            this.rightArrowVisible = this.topRow() + 1 < this.maxRows();
            this._leftArrowSprite.visible = this.isOpen() && this.leftArrowVisible;
            this._rightArrowSprite.visible = this.isOpen() && this.rightArrowVisible;
        }else{
            var topRow = this.topRow();
            var maxTopRow = this.maxTopRow();
            this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
            this.upArrowVisible = topRow > 0;
        };
    };
};

//=============================================================================
// Game_Party - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Game_Party_prototype_initialize = Game_Party.prototype.initialize;
Game_Party.prototype.initialize = function() {
    _AyatamSceneCustom_Game_Party_prototype_initialize.call(this);
    Ayatam.SCENECUSTOM.setupKeyMappings();
};

//=============================================================================
// Game_Actor - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Game_Actor_prototype_setup = Game_Actor.prototype.setup;
Game_Actor.prototype.setup = function(actorId) {
    _AyatamSceneCustom_Game_Actor_prototype_setup.call(this,actorId);
    this.getMmcNoteSetups();
};

Game_Actor.prototype.getMmcNoteSetups = function() {
    if(this._checkMmcNote) return;
    this._checkMmcNote = true;
    if(this.mmcCustomWindowCharacter === undefined) this.mmcCustomWindowCharacter = [];
    var lists = $dataActors[this.actorId()].note.split(/[\r\n]+/);
    var checkWinChara = false;
    lists.forEach(note => {
        if(note !== "") {
            //特定ウィンドウの歩行グラのカスタム情報を取得
            if(note.match(/<mmc cWinChara>/i)) checkWinChara = true;
            if(note.match(/<\/mmc cWinChara>/i)) checkWinChara = false;
            if(checkWinChara) {
                if(note.match(/(.*): (.*), (.*)/i)) {
                    var result = note.match(/(.*): (.*), (.*)/i);
                    var windowName = JSON.parse(JSON.stringify(result[1],(key,value)=>{
                        try{return JSON.parse(value);} catch (e) {}
                        return value;
                        }
                    ));
                    var charaName = JSON.parse(JSON.stringify(result[2],(key,value)=>{
                        try{return JSON.parse(value);} catch (e) {}
                        return value;
                        }
                    ));
                    var charaIndex = JSON.parse(JSON.stringify(result[3],(key,value)=>{
                        try{return JSON.parse(value);} catch (e) {}
                        return value;
                        }
                    ));
                    if(this.mmcCustomWindowCharacter[windowName] === undefined) this.mmcCustomWindowCharacter[windowName] = [];
                    this.mmcCustomWindowCharacter[windowName] = [charaName,charaIndex];
                };
            };
        };
    });
};

Game_Actor.prototype.mmcCusWinChara = function(windowName) {
    return this.mmcCustomWindowCharacter[windowName];
};

//=============================================================================
// SceneManager - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_SceneManager_goto = SceneManager.goto;
SceneManager.goto = function(sceneClass) {
    var mmcScene = this.mmcFindUserScene(sceneClass);
    if(mmcScene === Scene_Map) this.mmcResetBlur = false;
    _AyatamSceneCustom_SceneManager_goto.call(this,mmcScene);
};

SceneManager.mmcSceneList = function() {
    return Ayatam.SCENECUSTOM.DesignSettings.sceneCreations;
};

SceneManager.mmcAddNewScenes = function(scene) {
    if(this.mmcNewSceneList === undefined) this.mmcNewSceneList = [];
    if(this.mmcNewSceneList.includes(scene)) return;
    this.mmcNewSceneList.push(scene);
};

SceneManager.mmcNewScenes = function() {
    if(this.mmcNewSceneList === undefined) this.mmcNewSceneList = [];
    return this.mmcNewSceneList;
};

SceneManager.mmcFindUserScene = function(sceneClass) {
    this.mmcIsFunctionScene = false;
    this.mmcCurrentSceneData = undefined;
    var isStringClass = typeof(sceneClass) === 'string';
    if(isStringClass) {
        var result = this.mmcIsCustomScene(sceneClass);
        if(this.mmcIsFunctionScene) {
            isStringClass = false;
            sceneClass = result;
        };
    }else{
        var result = sceneClass;
        if(this.mmcNewScenes().includes(sceneClass.prototype.constructor)) {
            isStringClass = true;
            sceneClass = sceneClass.prototype.constructor.name;
        };
    };
    for(var i = 0; i < this.mmcSceneList().length; ++i) {
        if(this.mmcSceneList()[i]) {
            if(this.mmcSceneList()[i].sceneName.includes('//')) {
                var erase = this.mmcSceneList()[i].sceneName.split('//')[0];
                this.mmcSceneList()[i].sceneName = erase.trim();
            };
            if(isStringClass) {
                var sceneName = this.mmcSceneList()[i].sceneName;
                if(sceneName === sceneClass) {
                    this.mmcAddNewScenes(result);
                    this.mmcCurrentSceneData = this.mmcSceneList()[i];
                    break;
                };
            }else{
                var sceneName = this.mmcIsCustomScene(this.mmcSceneList()[i].sceneName);
                if(sceneName === sceneClass) {
                    this.mmcCurrentSceneData = this.mmcSceneList()[i];
                    break;
                };
            };
        };
    };
    if(isStringClass && !this.mmcCurrentSceneData) this.mmcIsNotCustomScene(sceneClass);
    return result;
};

SceneManager.mmcIsNotCustomScene = function(sceneClass) {
    try {
        eval(sceneClass)
    } catch (e) {
        console.error(e);
        this.mmcErrorPoper(false,'er111sm','場所: <font color="skyblue"><b>シーンの作成</b></font>\nシーン名 ' + sceneClass + ' は作成されていません。\n指定をご確認してください。');
    };
};

SceneManager.mmcIsCustomScene = function(sceneClass) {
    try {
        this.mmcIsFunctionScene = true;
        return eval(sceneClass);
    } catch (e) {
        this.mmcIsFunctionScene = false;
        return this.mmcCreateCustomClass(sceneClass);
    };
};

SceneManager.mmcCreateCustomClass = function(customScene) {
    var sceneClass = {};
    var classEval = `sceneClass = function ${customScene}(){\n    this.initialize.apply(this, arguments);\n};`;
    eval(classEval);
    sceneClass.prototype = Object.create(Scene_MmcCustomScene.prototype);
    sceneClass.prototype.constructor = sceneClass;
    return sceneClass;
};

SceneManager.mmcCurrentCustomScene = function() {
    return this.mmcCurrentSceneData;
};

var _AyatamSceneCustom_SceneManager_snap = SceneManager.snap;
SceneManager.snap = function() {
    if(this._scene.constructor === Scene_Map) {
        this.mmcMapScene = Bitmap.snap(this._scene);
        this.mmcbackgroundBitmap = Bitmap.snap(this._scene);
    };
    return _AyatamSceneCustom_SceneManager_snap.call(this);
};

var _AyatamSceneCustom_SceneManager_backgroundBitmap = SceneManager.backgroundBitmap;
SceneManager.backgroundBitmap = function() {
    if(!this.mmcCurrentCustomScene()) {
        return _AyatamSceneCustom_SceneManager_backgroundBitmap.call(this);
    }else{
        if(this.mmcCurrentCustomScene().eraseSceneBlur) {
            return this.mmcMapScene;
        }else{
            return _AyatamSceneCustom_SceneManager_backgroundBitmap.call(this);
        };
    };
};

var _AyatamSceneCustom_SceneManager_snapForBackground = SceneManager.snapForBackground;
SceneManager.snapForBackground = function() {
    if(this._scene.constructor !== Scene_Map) {
        if(this.mmcbackgroundBitmap) {
            this._backgroundBitmap = this.mmcbackgroundBitmap;
            if(!this.mmcResetBlur) {
                this._backgroundBitmap.blur();
                this.mmcResetBlur = true;
            };
        }else{
            _AyatamSceneCustom_SceneManager_snapForBackground.call(this);
        };
    }else{
        _AyatamSceneCustom_SceneManager_snapForBackground.call(this);
    };
};

SceneManager.mmcErrorPoper = function(showSceneName,errorNumber,error) {
    SoundManager.playBuzzer();
    if(showSceneName) error = '対象シーン: <font color="red"><b>' + this._scene.constructor.name + '</b></font>\n' + error;
    error = error.replace(/\n/g, '<br>');
    Graphics.printError('シーンカスタマイズMV : Error('+ errorNumber +')', error);
    AudioManager.stopAll();
    this.stop();
};

//=============================================================================
// BattleManager - シーンカスタマイズMV用のセットアップ
//=============================================================================
var _AyatamSceneCustom_BattleManager_processTurn = BattleManager.processTurn;
BattleManager.processTurn = function() {
    if(SceneManager._scene.mmcCurrentCustomScene()) SceneManager._scene.mmcBattleOpenCheckActionWindow();
    _AyatamSceneCustom_BattleManager_processTurn.call(this);
};

var _AyatamSceneCustom_BattleManager_endTurn = BattleManager.endTurn;
BattleManager.endTurn = function() {
    if(SceneManager._scene.mmcCurrentCustomScene()) SceneManager._scene.mmcBattleCloseCheckActionWindow();
    _AyatamSceneCustom_BattleManager_endTurn.call(this);
};

//=============================================================================
// Scene_MmcCustomScene - シーンカスタマイズMV用のセットアップ
//=============================================================================
function Scene_MmcCustomScene() {
    this.initialize.apply(this,arguments);
};

Scene_MmcCustomScene.prototype = Object.create(Scene_Base.prototype);
Scene_MmcCustomScene.prototype.constructor = Scene_MmcCustomScene;

Scene_MmcCustomScene.prototype.create = function() {
    Scene_Base.prototype.create.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.createBackground();
        this.createWindowLayer();
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    };
};

Scene_MmcCustomScene.prototype.start = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_Base.prototype.start.call(this);
        this.mmcRefreshAllCustomWindow();
    };
};

Scene_MmcCustomScene.prototype.createBackground = function() {
    Scene_MenuBase.prototype.createBackground.call(this);
    this.mmcCreateSceneBackground();
};

//=============================================================================
// Scene_MenuBase - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_MenuBase_prototype_createBackground = Scene_MenuBase.prototype.createBackground;
Scene_MenuBase.prototype.createBackground = function() {
    SceneManager.snapForBackground();
    _AyatamSceneCustom_Scene_MenuBase_prototype_createBackground.call(this);
};

//=============================================================================
// Scene_Menu - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Menu_prototype_create = Scene_Menu.prototype.create;
Scene_Menu.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.create.call(this);
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Menu_prototype_create.call(this);
    };
};

Scene_Menu.prototype.createBackground = function() {
    Scene_MenuBase.prototype.createBackground.call(this);
    this.mmcCreateSceneBackground();
};

var _AyatamSceneCustom_Scene_Menu_prototype_start = Scene_Menu.prototype.start;
Scene_Menu.prototype.start = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.start.call(this);
        this.mmcRefreshAllCustomWindow();
    }else{
        _AyatamSceneCustom_Scene_Menu_prototype_start.call(this);
    };
};

//=============================================================================
// Scene_Title - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Title_prototype_create = Scene_Title.prototype.create;
Scene_Title.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_Base.prototype.create.call(this);
        this.createBackground();
        this.createWindowLayer();
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Title_prototype_create.call(this);
    };
};

var _AyatamSceneCustom_Scene_Title_prototype_createBackground = Scene_Title.prototype.createBackground;
Scene_Title.prototype.createBackground = function() {
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateSceneBackground();
    }else{
        _AyatamSceneCustom_Scene_Title_prototype_createBackground.call(this);
    };
};

Scene_Title.prototype.mmcCreateTitleBackGround = function() {
    if(this._mmcSceneZ === undefined) {
        this._mmcSceneZ = 0;
    }else{
        this._mmcSceneZ++;
    };
    this._backSprite1 = new Sprite(ImageManager.loadTitle1($dataSystem.title1Name));
    this._backSprite2 = new Sprite(ImageManager.loadTitle2($dataSystem.title2Name));
    this._backSprite1._mmcZ = this._mmcSceneZ;
    this._mmcSceneZ++;
    this._backSprite2._mmcZ = this._mmcSceneZ;
    this.addChild(this._backSprite1);
    this.addChild(this._backSprite2);
    this.centerSprite(this._backSprite1);
    this.centerSprite(this._backSprite2);
};

Scene_Title.prototype.mmcCreateGameTitleName = function() {
    if(this._mmcSceneZ === undefined) {
        this._mmcSceneZ = 0;
    }else{
        this._mmcSceneZ++;
    };
    this._gameTitleSprite = new Sprite(new Bitmap(Graphics.width, Graphics.height));
    this._gameTitleSprite._mmcZ = this._mmcSceneZ;
    this.addChild(this._gameTitleSprite);
    if ($dataSystem.optDrawTitle) {
        this.drawGameTitle();
    }
};

var _AyatamSceneCustom_Scene_Title_prototype_start = Scene_Title.prototype.start;
Scene_Title.prototype.start = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_Base.prototype.start.call(this);
        SceneManager.clearStack();
        this.mmcRefreshAllCustomWindow();
        this.playTitleMusic();
        this.startFadeIn(this.fadeSpeed(), false);
    }else{
        _AyatamSceneCustom_Scene_Title_prototype_start.call(this);
    };
};

var _AyatamSceneCustom_Scene_Title_prototype_update = Scene_Title.prototype.update;
Scene_Title.prototype.update = function() {
    if(!this.mmcCurrentCustomScene()) {
        _AyatamSceneCustom_Scene_Title_prototype_update.call(this);
    }else{
        Scene_Base.prototype.update.call(this);
    };
};

var _AyatamSceneCustom_Scene_Title_prototype_isBusy = Scene_Title.prototype.isBusy;
Scene_Title.prototype.isBusy = function() {
    if(this.mmcCurrentCustomScene()) {
        return Scene_Base.prototype.isBusy.call(this);
    }else{
        if(!this.mmcIsCustomSceneCreated()) return _AyatamSceneCustom_Scene_Title_prototype_isBusy.call(this);
    };
};

//=============================================================================
// Scene_Options - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Options_prototype_create = Scene_Options.prototype.create;
Scene_Options.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.create.call(this);
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Options_prototype_create.call(this);
    };
};

var _AyatamSceneCustom_Scene_Options_prototype_createBackground = Scene_Options.prototype.createBackground;
Scene_Options.prototype.createBackground = function() {
    Scene_MenuBase.prototype.createBackground.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateSceneBackground();
    }else{
        _AyatamSceneCustom_Scene_Options_prototype_createBackground.call(this);
    };
};

//=============================================================================
// Scene_Options - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Gameover_prototype_create = Scene_Gameover.prototype.create;
Scene_Gameover.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_Base.prototype.create.call(this);
        this.createWindowLayer();
        this.playGameoverMusic();
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Gameover_prototype_create.call(this);
    };
};

var _AyatamSceneCustom_Scene_Gameover_prototype_start = Scene_Gameover.prototype.start;
Scene_Gameover.prototype.start = function() {
    _AyatamSceneCustom_Scene_Gameover_prototype_start.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcRefreshAllCustomWindow();
    };
};

var _AyatamSceneCustom_Scene_Gameover_prototype_createBackground = Scene_Gameover.prototype.createBackground;
Scene_Gameover.prototype.createBackground = function() {
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateSceneBackground();
    }else{
        _AyatamSceneCustom_Scene_Gameover_prototype_createBackground.call(this);
    };
};

//=============================================================================
// Scene_Shop - シーンカスタマイズMV用のセットアップ
//=============================================================================
// 不具合につき無効化
// var _AyatamSceneCustom_Scene_Shop_prototype_create = Scene_Shop.prototype.create;
// Scene_Shop.prototype.create = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.create.call(this);
//         this.mmcCreateCustomWindowHandler();
//         this.mmcCreateSceneSwitches();
//         this.mmcCreateCustomScene();
//         this.mmcCustomSceneCreated();
//     }else{
//         _AyatamSceneCustom_Scene_Shop_prototype_create.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Shop_prototype_start = Scene_Shop.prototype.start;
// Scene_Shop.prototype.start = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.start.call(this);
//         this.mmcRefreshAllCustomWindow();
//     }else{
//         _AyatamSceneCustom_Scene_Shop_prototype_start.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Shop_prototype_createBackground = Scene_Shop.prototype.createBackground;
// Scene_Shop.prototype.createBackground = function() {
//     Scene_MenuBase.prototype.createBackground.call(this);
//     if(this.mmcCurrentCustomScene()) {
//         this.mmcCreateSceneBackground();
//     }else{
//         _AyatamSceneCustom_Scene_Shop_prototype_createBackground.call(this);
//     };
// };

//=============================================================================
// Scene_Map - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Map_prototype_onMapLoaded = Scene_Map.prototype.onMapLoaded;
Scene_Map.prototype.onMapLoaded = function() {
    _AyatamSceneCustom_Scene_Map_prototype_onMapLoaded.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    };
};

var _AyatamSceneCustom_Scene_Map_prototype_start = Scene_Map.prototype.start;
Scene_Map.prototype.start = function() {
    _AyatamSceneCustom_Scene_Map_prototype_start.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcRefreshAllCustomWindow();
    };
};

//=============================================================================
// Scene_Item - シーンカスタマイズMV用のセットアップ
//=============================================================================
// 不具合につき無効化
// var _AyatamSceneCustom_Scene_Item_prototype_create = Scene_Item.prototype.create;
// Scene_Item.prototype.create = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.create.call(this);
//         this.mmcCreateCustomWindowHandler();
//         this.mmcCreateSceneSwitches();
//         this.mmcCreateCustomScene();
//         this.mmcCustomSceneCreated();
//     }else{
//         _AyatamSceneCustom_Scene_Item_prototype_create.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Item_prototype_createBackground = Scene_Item.prototype.createBackground;
// Scene_Item.prototype.createBackground = function() {
//     Scene_MenuBase.prototype.createBackground.call(this);
//     if(this.mmcCurrentCustomScene()) {
//         this.mmcCreateSceneBackground();
//     }else{
//         _AyatamSceneCustom_Scene_Item_prototype_createBackground.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Item_prototype_start = Scene_Item.prototype.start;
// Scene_Item.prototype.start = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.start.call(this);
//         this.mmcRefreshAllCustomWindow();
//     }else{
//         _AyatamSceneCustom_Scene_Item_prototype_start.call(this);
//     };
// };

//=============================================================================
// Scene_Skill - シーンカスタマイズMV用のセットアップ
//=============================================================================
// 不具合につき無効化
// var _AyatamSceneCustom_Scene_Skill_prototype_create = Scene_Skill.prototype.create;
// Scene_Skill.prototype.create = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.create.call(this);
//         this.mmcCreateCustomWindowHandler();
//         this.mmcCreateSceneSwitches();
//         this.mmcCreateCustomScene();
//         this.mmcCustomSceneCreated();
//     }else{
//         _AyatamSceneCustom_Scene_Skill_prototype_create.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Skill_prototype_createBackground = Scene_Skill.prototype.createBackground;
// Scene_Skill.prototype.createBackground = function() {
//     Scene_MenuBase.prototype.createBackground.call(this);
//     if(this.mmcCurrentCustomScene()) {
//         this.mmcCreateSceneBackground();
//     }else{
//         _AyatamSceneCustom_Scene_Skill_prototype_createBackground.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Skill_prototype_start = Scene_Skill.prototype.start;
// Scene_Skill.prototype.start = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.start.call(this);
//         this.mmcRefreshAllCustomWindow();
//     }else{
//         _AyatamSceneCustom_Scene_Skill_prototype_start.call(this);
//     };
// };

//=============================================================================
// Scene_Status - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Status_prototype_create = Scene_Status.prototype.create;
Scene_Status.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.create.call(this);
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Status_prototype_create.call(this);
    };
};

var _AyatamSceneCustom_Scene_Status_prototype_createBackground = Scene_Status.prototype.createBackground;
Scene_Status.prototype.createBackground = function() {
    Scene_MenuBase.prototype.createBackground.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateSceneBackground();
    }else{
        _AyatamSceneCustom_Scene_Status_prototype_createBackground.call(this);
    };
};

var _AyatamSceneCustom_Scene_Status_prototype_start = Scene_Status.prototype.start;
Scene_Status.prototype.start = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.start.call(this);
        this.mmcRefreshAllCustomWindow();
    }else{
        _AyatamSceneCustom_Scene_Status_prototype_start.call(this);
    };
};

//=============================================================================
// Scene_Equip - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Equip_prototype_create = Scene_Equip.prototype.create;
Scene_Equip.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.create.call(this);
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Equip_prototype_create.call(this);
    };
};

var _AyatamSceneCustom_Scene_Equip_prototype_createBackground = Scene_Status.prototype.createBackground;
Scene_Equip.prototype.createBackground = function() {
    Scene_MenuBase.prototype.createBackground.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateSceneBackground();
    }else{
        _AyatamSceneCustom_Scene_Equip_prototype_createBackground.call(this);
    };
};

var _AyatamSceneCustom_Scene_Equip_prototype_start = Scene_Equip.prototype.start;
Scene_Equip.prototype.start = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.start.call(this);
        this.mmcRefreshAllCustomWindow();
    }else{
        _AyatamSceneCustom_Scene_Equip_prototype_start.call(this);
    };
};

//=============================================================================
// Scene_Load - シーンカスタマイズMV用のセットアップ
//=============================================================================
// 不具合につき無効化
// var _AyatamSceneCustom_Scene_Load_prototype_create = Scene_Load.prototype.create;
// Scene_Load.prototype.create = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.create.call(this);
//         this.mmcCreateCustomWindowHandler();
//         this.mmcCreateSceneSwitches();
//         this.mmcCreateCustomScene();
//         this.mmcCustomSceneCreated();
//     }else{
//         _AyatamSceneCustom_Scene_Load_prototype_create.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Load_prototype_createBackground = Scene_Load.prototype.createBackground;
// Scene_Load.prototype.createBackground = function() {
//     Scene_MenuBase.prototype.createBackground.call(this);
//     if(this.mmcCurrentCustomScene()) {
//         this.mmcCreateSceneBackground();
//     }else{
//         _AyatamSceneCustom_Scene_Load_prototype_createBackground.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Load_prototype_start = Scene_Load.prototype.start;
// Scene_Load.prototype.start = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.start.call(this);
//         this.mmcRefreshAllCustomWindow();
//     }else{
//         _AyatamSceneCustom_Scene_Load_prototype_start.call(this);
//     };
// };

//=============================================================================
// Scene_Save - シーンカスタマイズMV用のセットアップ
//=============================================================================
// 不具合につき無効化
// var _AyatamSceneCustom_Scene_Save_prototype_create = Scene_Save.prototype.create;
// Scene_Save.prototype.create = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.create.call(this);
//         this.mmcCreateCustomWindowHandler();
//         this.mmcCreateSceneSwitches();
//         this.mmcCreateCustomScene();
//         this.mmcCustomSceneCreated();
//     }else{
//         _AyatamSceneCustom_Scene_Save_prototype_create.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Save_prototype_createBackground = Scene_Save.prototype.createBackground;
// Scene_Save.prototype.createBackground = function() {
//     Scene_MenuBase.prototype.createBackground.call(this);
//     if(this.mmcCurrentCustomScene()) {
//         this.mmcCreateSceneBackground();
//     }else{
//         _AyatamSceneCustom_Scene_Save_prototype_createBackground.call(this);
//     };
// };

// var _AyatamSceneCustom_Scene_Save_prototype_start = Scene_Save.prototype.start;
// Scene_Save.prototype.start = function() {
//     if(this.mmcCurrentCustomScene()) {
//         Scene_MenuBase.prototype.start.call(this);
//         this.mmcRefreshAllCustomWindow();
//     }else{
//         _AyatamSceneCustom_Scene_Save_prototype_start.call(this);
//     };
// };

//=============================================================================
// Scene_GameEnd - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_GameEnd_prototype_create = Scene_GameEnd.prototype.create;
Scene_GameEnd.prototype.create = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.create.call(this);
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        this.mmcCreateCustomScene();
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_GameEnd_prototype_create.call(this);
    };
};

var _AyatamSceneCustom_Scene_GameEnd_prototype_createBackground = Scene_GameEnd.prototype.createBackground;
Scene_GameEnd.prototype.createBackground = function() {
    Scene_MenuBase.prototype.createBackground.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateSceneBackground();
    }else{
        _AyatamSceneCustom_Scene_GameEnd_prototype_createBackground.call(this);
    };
};

var _AyatamSceneCustom_Scene_GameEnd_prototype_start = Scene_GameEnd.prototype.start;
Scene_GameEnd.prototype.start = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.start.call(this);
        this.mmcRefreshAllCustomWindow();
    }else{
        _AyatamSceneCustom_Scene_GameEnd_prototype_start.call(this);
    };
};

var _AyatamSceneCustom_Scene_GameEnd_prototype_stop = Scene_GameEnd.prototype.stop;
Scene_GameEnd.prototype.stop = function() {
    if(this.mmcCurrentCustomScene()) {
        Scene_MenuBase.prototype.stop.call(this);
    }else{
        _AyatamSceneCustom_Scene_GameEnd_prototype_stop.call(this);
    };
};

//=============================================================================
// Scene_Battle - シーンカスタマイズMV用のセットアップ
//=============================================================================

var _AyatamSceneCustom_Scene_Battle_prototype_createDisplayObjects = Scene_Battle.prototype.createDisplayObjects;
Scene_Battle.prototype.createDisplayObjects = function() {
    if(this.mmcCurrentCustomScene()) {
        this.createSpriteset();
        this.createWindowLayer();
        this.createAllWindows();
        BattleManager.setSpriteset(this._spriteset);
        this.mmcCustomSceneCreated();
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_createDisplayObjects.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_createAllWindows = Scene_Battle.prototype.createAllWindows;
Scene_Battle.prototype.createAllWindows = function() {
    if(this.mmcCurrentCustomScene()) {
        this.mmcCreateCustomWindowHandler();
        this.mmcCreateSceneSwitches();
        if(!this.mmcCopyBattle) this.createMessageWindow();
        this.mmcCreateCustomScene();
        this.createScrollTextWindow();
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_createAllWindows.call(this);
    };
};

Scene_Battle.prototype.mmcCopyBattleScene = function() {
    this.mmcCopyBattle = true;
    this.createLogWindow();
    this.createStatusWindow();
    this.createPartyCommandWindow();
    this.createActorCommandWindow();
    this.createHelpWindow();
    this.createSkillWindow();
    this.createItemWindow();
    this.createActorWindow();
    this.createEnemyWindow();
    this.createMessageWindow();
    BattleManager.setLogWindow(this._logWindow);
    BattleManager.setStatusWindow(this._statusWindow);
    this._logWindow.setSpriteset(this._spriteset);
};

Scene_Battle.prototype.mmcIsCopyBattleScene = function() {
    if(this.mmcCopyBattle === undefined) this.mmcCopyBattle = false;
    return this.mmcCopyBattle;
};

Scene_Battle.prototype.checkIsValidAction = function(window) {
    if(typeof(window) === 'function') {
        SceneManager.mmcErrorPoper(true,'er72sba','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\n「' + window.prototype.constructor.name + '」がシングルクォートで囲まれなかった可能性があります。\nリストをご確認ください。');
        return;
    };
};

Scene_Battle.prototype.mmcBattleLogWindow = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    this.mmcBattlelogWindow = this.mmcGetCustomWindow(window);
    BattleManager.setLogWindow(this.mmcBattlelogWindow);
    this.mmcBattlelogWindow.setSpriteset(this._spriteset);
};

Scene_Battle.prototype.mmcBattleStatusList = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    this.mmcBattleActorStatus = this.mmcGetCustomWindow(window);
    BattleManager.setStatusWindow(this.mmcBattleActorStatus);
};

Scene_Battle.prototype.mmcBattlePartyCommand = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    this.mmcBattlePartyCommandWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleActorCommand = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    var currentWindow = this.mmcGetCustomWindow(window).currentWindow();
    this.mmcGetCustomWindow(window).setHandler('cancel', this.mmcBattlePreviousCommand.bind(this,currentWindow));
    this.mmcBattleActorCommandWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleHelp = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    this._helpWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleSkillList = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    var currentWindow = this.mmcGetCustomWindow(window).currentWindow();
    this.mmcGetCustomWindow(window).setHandler('ok', this.mmcBattleSkillOk.bind(this,currentWindow));
    this.mmcGetCustomWindow(window).setHandler('cancel', this.mmcBattleSkillCancel.bind(this,currentWindow));
    this.mmcBattleSkillWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleItemList = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    var currentWindow = this.mmcGetCustomWindow(window).currentWindow();
    this.mmcGetCustomWindow(window).setHandler('ok', this.mmcBattleItemOk.bind(this,currentWindow));
    this.mmcGetCustomWindow(window).setHandler('cancel', this.mmcBattleItemCancel.bind(this,currentWindow));
    this.mmcBattleItemWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleActorSelectList = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    var currentWindow = this.mmcGetCustomWindow(window).currentWindow();
    this.mmcGetCustomWindow(window).setHandler('ok', this.mmcBattleActorOk.bind(this,currentWindow));
    this.mmcGetCustomWindow(window).setHandler('cancel', this.mmcBattleActorCancel.bind(this,currentWindow));
    this.mmcBattleActorSelectWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleEnemyList = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    var currentWindow = this.mmcGetCustomWindow(window).currentWindow();
    this.mmcGetCustomWindow(window).setHandler('ok', this.mmcBattleEnemyOk.bind(this,currentWindow));
    this.mmcGetCustomWindow(window).setHandler('cancel', this.mmcBattleEnemyCancel.bind(this,currentWindow));
    this.mmcBattleEnemyWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcBattleMessageWindow = function(window) {
    if(this.mmcIsCopyBattleScene()) return;
    this.checkIsValidAction(window);
    this._messageWindow = this.mmcGetCustomWindow(window);
};

Scene_Battle.prototype.mmcTurnBeginAutoOpenWindow = function(window) {
    this.checkIsValidAction(window);
    if(this.mmcBattleAutoOpenList === undefined) this.mmcBattleAutoOpenList = [];
    if(this.mmcBattleAutoOpenList.includes(this.mmcGetCustomWindow(window))) return;
    this.mmcBattleAutoOpenList.push(this.mmcGetCustomWindow(window));
};

Scene_Battle.prototype.mmcTurnEndAutoCloseWindow = function(window) {
    this.checkIsValidAction(window);
    if(this.mmcBattleAutoCloseList === undefined) this.mmcBattleAutoCloseList = [];
    if(this.mmcBattleAutoCloseList.includes(this.mmcGetCustomWindow(window))) return;
    this.mmcBattleAutoCloseList.push(this.mmcGetCustomWindow(window));
};

Scene_Battle.prototype.mmcActionTurnAutoWindow = function(window) {
    this.checkIsValidAction(window);
    if(this.mmcBattleActionAutoWindowList === undefined) this.mmcBattleActionAutoWindowList = [];
    if(this.mmcBattleActionAutoWindowList.includes(this.mmcGetCustomWindow(window))) return;
    this.mmcBattleActionAutoWindowList.push(this.mmcGetCustomWindow(window));
};

Scene_Battle.prototype.mmcActivateDefaultStatusMovements = function() {
    this.mmcDefaultBattleStatusMovements = true;
};

var _AyatamSceneCustom_Scene_Battle_prototype_start = Scene_Battle.prototype.start;
Scene_Battle.prototype.start = function() {
    _AyatamSceneCustom_Scene_Battle_prototype_start.call(this);
    if(this.mmcCurrentCustomScene()) {
        this.mmcRefreshAllCustomWindow();
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_updateBattleProcess = Scene_Battle.prototype.updateBattleProcess;
Scene_Battle.prototype.updateBattleProcess = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_updateBattleProcess.call(this);
        }else{
            if (!this.isAnyInputWindowActive() || BattleManager.isAborting() ||
                    BattleManager.isBattleEnd()) {
                BattleManager.update();
                if(!this.mmcBattleTurnWaitting) this.changeInputWindow();
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_updateBattleProcess.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_isAnyInputWindowActive = Scene_Battle.prototype.isAnyInputWindowActive;
Scene_Battle.prototype.isAnyInputWindowActive = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            return _AyatamSceneCustom_Scene_Battle_prototype_isAnyInputWindowActive.call(this);
        }else{
            if(this.mmcBattlePartyCommandWindow) {
                return (this.mmcBattlePartyCommandWindow.active ||
                        this.mmcBattleActorCommandWindow.active ||
                        this.mmcBattleSkillWindow.active ||
                        this.mmcBattleItemWindow.acive ||
                        this.mmcBattleActorSelectWindow.active ||
                        this.mmcBattleEnemyWindow.active);
            }else{
                return (this.mmcBattleActorCommandWindow.active ||
                        this.mmcBattleSkillWindow.active ||
                        this.mmcBattleItemWindow.acive ||
                        this.mmcBattleActorSelectWindow.active ||
                        this.mmcBattleEnemyWindow.active);
            };
        };
    }else{
        return _AyatamSceneCustom_Scene_Battle_prototype_isAnyInputWindowActive.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_changeInputWindow = Scene_Battle.prototype.changeInputWindow;
Scene_Battle.prototype.changeInputWindow = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_changeInputWindow.call(this);
        }else{
            if(BattleManager.isInputting()) {
                this.mmcBattleTurnWaitting = true;
                this.mmcBattleOpenCheckWindow();
                if(BattleManager.actor()) {
                    //アクターコマンドが存在するか
                    if(this.mmcBattleActorCommandWindow) {
                        this.startActorCommandSelection();
                    };
                }else{
                    //パーティコマンドが存在するか
                    if(this.mmcBattlePartyCommandWindow) {
                        this.startPartyCommandSelection();
                    }else{//存在しない場合、パーティコマンドなしと判定
                        BattleManager.selectNextCommand();
                        this.startActorCommandSelection();
                        //バトルステータスを開く
                        if(this.mmcBattleActorStatus) {
                            this.mmcOpenBattleStatus();
                        };
                    };
                };
            }else{
                this.mmcBattleTurnWaitting = false;
                this.endCommandSelection();
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_changeInputWindow.call(this);
    };
};

Scene_Battle.prototype.mmcBattleOpenCheckWindow = function() {
    if(this.mmcBattleAutoWindow) return;
    this.mmcBattleAutoWindow = true;
    if(this.mmcBattleDefaultStatusSlided) this.mmcBattleDefaultStatusSlided = false;
    //ターン開始時ウィンドウを開く
    if(this.mmcBattleAutoOpenList !== undefined) {
        if(this.mmcBattleAutoOpenList.length > 0) {
            this.mmcBattleAutoOpenList.forEach(window => {
                if(window) {
                    var cWindow = window.currentWindow();
                    if(!window.visible) {//開かれていなければ強制的に開く
                        this.mmcWindowOpenSequence(window);
                    };
                    if(cWindow.windowBeginActivate.includes('activateWhenSelected')) {
                        if(window.constructor === Window_MmcStandardWindow) {
                            window.activate();
                        }else{
                            window.activate();
                            window.buttonsActivate();
                        };
                    };
                };
            });
        };
    };
};

Scene_Battle.prototype.mmcBattleCloseCheckActionWindow = function() {
    if(this.mmcActionWindowOpened) this.mmcActionWindowOpened = false;
    //アクション中ウィンドウを閉じる
    if(this.mmcBattleActionAutoWindowList !== undefined) {
        if(this.mmcBattleActionAutoWindowList.length > 0) {
            this.mmcBattleActionAutoWindowList.forEach(window => {
                if(window) {
                    if(window.visible) {
                        this.mmcWindowCloseSequence(window);
                    };
                    if(window.constructor === Window_MmcStandardWindow) {
                        window.deactivate();
                    }else{
                        window.deactivate();
                        window.buttonsDeactivate();
                    };
                };
            });
        };
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_startPartyCommandSelection = Scene_Battle.prototype.startPartyCommandSelection;
Scene_Battle.prototype.startPartyCommandSelection = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_startPartyCommandSelection.call(this);
        }else{
            //アクターコマンドを閉じる
            if(this.mmcBattleActorCommandWindow) {
                var pWindow = this.mmcBattleActorCommandWindow.currentWindow();
                if(pWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattleActorCommandWindow.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattleActorCommandWindow);
                    };
                };
                if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattleActorCommandWindow.deactivate();
                }else{
                    this.mmcBattleActorCommandWindow.deactivate();
                    this.mmcBattleActorCommandWindow.buttonsDeactivate();
                };
            };
            //パーティコマンドを開く
            var window = this.mmcBattlePartyCommandWindow.currentWindow();
            if(window.windowBeginBehavior.includes('openWhenSelected')) {
                if(!this.mmcBattlePartyCommandWindow.visible) {
                    this.mmcWindowOpenSequence(this.mmcBattlePartyCommandWindow);
                };
            };
            if(window.windowBeginActivate.includes('activateWhenSelected')) {
                if(this.mmcBattlePartyCommandWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattlePartyCommandWindow.activate();
                }else{
                    this.mmcBattlePartyCommandWindow.activate();
                    this.mmcBattlePartyCommandWindow.buttonsActivate();
                };
            };
            //バトルステータスを開く
            if(this.mmcBattleActorStatus) {
                this.mmcBattleActorStatus.deselect();
                this.mmcOpenBattleStatus();
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_startPartyCommandSelection.call(this);
    };
};

Scene_Battle.prototype.mmcOpenBattleStatus = function() {
    var window = this.mmcBattleActorStatus.currentWindow();
    this.mmcBattleActorStatus.refresh();
    if(window.windowBeginBehavior.includes('openWhenSelected')) {
        if(!this.mmcBattleActorStatus.visible) {
            this.mmcWindowOpenSequence(this.mmcBattleActorStatus);
        };
    };
    if(window.windowBeginActivate.includes('activateWhenSelected')) {
        if(this.mmcBattleActorStatus.constructor === Window_MmcStandardWindow) {
            this.mmcBattleActorStatus.activate();
        }else{
            this.mmcBattleActorStatus.activate();
            this.mmcBattleActorStatus.buttonsActivate();
        };
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_startActorCommandSelection = Scene_Battle.prototype.startActorCommandSelection;
Scene_Battle.prototype.startActorCommandSelection = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_startActorCommandSelection.call(this);
        }else{
            //パーティコマンドを閉じる
            if(this.mmcBattlePartyCommandWindow) {
                var pWindow = this.mmcBattlePartyCommandWindow.currentWindow();
                if(pWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattlePartyCommandWindow.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattlePartyCommandWindow);
                    };
                };
                if(this.mmcBattlePartyCommandWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattlePartyCommandWindow.deactivate();
                }else{
                    this.mmcBattlePartyCommandWindow.deactivate();
                    this.mmcBattlePartyCommandWindow.buttonsDeactivate();
                };
            };
            //アクターコマンドを開く
            if(this.mmcBattleActorCommandWindow) {
                var window = this.mmcBattleActorCommandWindow.currentWindow();
                this.mmcBattleActorCommandWindow.battleActor(BattleManager.actor());
                this.mmcBattleActorCommandWindow.selectLast();
                if(window.windowBeginBehavior.includes('openWhenSelected')) {
                    if(!this.mmcBattleActorCommandWindow.visible) {
                        this.mmcWindowOpenSequence(this.mmcBattleActorCommandWindow);
                    };
                };
                if(window.windowBeginActivate.includes('activateWhenSelected')) {
                    if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                        this.mmcBattleActorCommandWindow.activate();
                    }else{
                        this.mmcBattleActorCommandWindow.activate();
                        this.mmcBattleActorCommandWindow.buttonsActivate();
                    };
                };
            };
            if(this.mmcBattleActorStatus) {
                this.mmcBattleActorStatus.select(BattleManager.actor().index());
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_startActorCommandSelection.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_endCommandSelection = Scene_Battle.prototype.endCommandSelection;
Scene_Battle.prototype.endCommandSelection = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_endCommandSelection.call(this);
        }else{
            if(this.mmcCurrentCustomScene().sceneName === 'Scene_Battle') {//シーンを跨ぐ可能性があるための処置
                this.mmcBattleCloseCheckWindow();
                this._mmcCustomWindows.forEach(customWindow => {
                    if(customWindow) {
                        if(customWindow.constructor === Window_MmcStandardWindow) {
                            customWindow.deactivate();
                        }else{
                            customWindow.deactivate();
                            customWindow.buttonsDeactivate();
                        };
                    };
                });
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_endCommandSelection.call(this);
    };
};

Scene_Battle.prototype.mmcBattleCloseCheckWindow = function() {
    if(!this.mmcBattleAutoWindow) return;
    this.mmcBattleAutoWindow = false;
    if(this.mmcBattleDefaultStatusSlided) this.mmcBattleDefaultStatusSlided = false;
    //ターン終了時ウィンドウを閉じる
    if(this.mmcBattleAutoCloseList !== undefined) {
        if(this.mmcBattleAutoCloseList.length > 0) {
            this.mmcBattleAutoCloseList.forEach(window => {
                if(window) {
                    if(window.visible) {//開かれていれば強制的に閉じる
                        this.mmcWindowCloseSequence(window);
                    };
                    if(window.constructor === Window_MmcStandardWindow) {
                        window.deactivate();
                    }else{
                        window.deactivate();
                        window.buttonsDeactivate();
                    };
                };
            });
        };
    };
    //バトルステータスを選択終了にする
    if(this.mmcBattleActorStatus) {
        this.mmcBattleActorStatus.deselect();
    };
};

Scene_Battle.prototype.mmcBattleOpenCheckActionWindow = function() {
    if(this.mmcActionWindowOpened) return;
    this.mmcActionWindowOpened = true;
    //アクション中ウィンドウを開く
    if(this.mmcBattleActionAutoWindowList !== undefined) {
        if(this.mmcBattleActionAutoWindowList.length > 0) {
            this.mmcBattleActionAutoWindowList.forEach(window => {
                if(window) {
                    var cWindow = window.currentWindow();
                    if(!window.visible) {//開かれていなければ強制的に開く
                        this.mmcWindowOpenSequence(window);
                    };
                    if(cWindow.windowBeginActivate.includes('activateWhenSelected')) {
                        if(window.constructor === Window_MmcStandardWindow) {
                            window.activate();
                        }else{
                            window.activate();
                            window.buttonsActivate();
                        };
                    };
                };
            });
        };
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_stop = Scene_Battle.prototype.stop;
Scene_Battle.prototype.stop = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_stop.call(this);
        }else{
            Scene_Base.prototype.stop.call(this);
            if (this.needsSlowFadeOut()) {
                this.startFadeOut(this.slowFadeSpeed(), false);
            } else {
                this.startFadeOut(this.fadeSpeed(), false);
            }
            //バトルステータスをとじる
            if(this.mmcBattleActorStatus) {
                var bSWindow = this.mmcBattleActorStatus.currentWindow();
                this.mmcBattleActorStatus.deselect();
                if(bSWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattleActorStatus.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattleActorStatus);
                    };
                };
                if(this.mmcBattleActorStatus.constructor === Window_MmcStandardWindow) {
                    this.mmcBattleActorStatus.deactivate();
                }else{
                    this.mmcBattleActorStatus.deactivate();
                    this.mmcBattleActorStatus.buttonsDeactivate();
                };
            };
            //パーティコマンドをとじる
            if(this.mmcBattlePartyCommandWindow) {
                var pWindow = this.mmcBattlePartyCommandWindow.currentWindow();
                if(pWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattlePartyCommandWindow.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattlePartyCommandWindow);
                    };
                };
                if(this.mmcBattlePartyCommandWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattlePartyCommandWindow.deactivate();
                }else{
                    this.mmcBattlePartyCommandWindow.deactivate();
                    this.mmcBattlePartyCommandWindow.buttonsDeactivate();
                };
            };
            //アクターコマンドをとじる
            if(this.mmcBattleActorCommandWindow) {
                var aWindow = this.mmcBattleActorCommandWindow.currentWindow();
                if(aWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattleActorCommandWindow.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattleActorCommandWindow);
                    };
                };
                if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattleActorCommandWindow.deactivate();
                }else{
                    this.mmcBattleActorCommandWindow.deactivate();
                    this.mmcBattleActorCommandWindow.buttonsDeactivate();
                };
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_stop.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_onSelectAction = Scene_Battle.prototype.onSelectAction;
Scene_Battle.prototype.onSelectAction = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_onSelectAction.call(this);
        }else{
            var action = BattleManager.inputtingAction();
            //スキルリストをとじる
            if(this.mmcBattleSkillWindow) {
                var sWindow = this.mmcBattleSkillWindow.currentWindow();
                if(sWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattleSkillWindow.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattleSkillWindow);
                    };
                };
                if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattleSkillWindow.deactivate();
                }else{
                    this.mmcBattleSkillWindow.deactivate();
                    this.mmcBattleSkillWindow.buttonsDeactivate();
                };
            };
            //アイテムリストをとじる
            if(this.mmcBattleItemWindow) {
                var iWindow = this.mmcBattleItemWindow.currentWindow();
                if(iWindow.windowCloseBehavior.includes('closeWindow')) {
                    if(this.mmcBattleItemWindow.visible) {
                        this.mmcWindowCloseSequence(this.mmcBattleItemWindow);
                    };
                };
                if(this.mmcBattleItemWindow.constructor === Window_MmcStandardWindow) {
                    this.mmcBattleItemWindow.deactivate();
                }else{
                    this.mmcBattleItemWindow.deactivate();
                    this.mmcBattleItemWindow.buttonsDeactivate();
                };
            };
            if (!action.needsSelection()) {
                this.selectNextCommand();
            } else if (action.isForOpponent()) {
                this.selectEnemySelection();
            } else {
                this.selectActorSelection();
            }
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_onSelectAction.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_selectActorSelection = Scene_Battle.prototype.selectActorSelection;
Scene_Battle.prototype.selectActorSelection = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_selectActorSelection.call(this);
        }else{
            //アクター選択ウィンドウを開く
            if(this.mmcBattleActorSelectWindow) {
                var window = this.mmcBattleActorSelectWindow.currentWindow();
                this.mmcBattleActorSelectWindow.refresh();
                this.mmcBattleActorSelectWindow.selectLast();
                if(window.windowBeginBehavior.includes('openWhenSelected')) {
                    if(!this.mmcBattleActorSelectWindow.visible) {
                        this.mmcWindowOpenSequence(this.mmcBattleActorSelectWindow);
                    };
                };
                if(window.windowBeginActivate.includes('activateWhenSelected')) {
                    if(this.mmcBattleActorSelectWindow.constructor === Window_MmcStandardWindow) {
                        this.mmcBattleActorSelectWindow.activate();
                    }else{
                        this.mmcBattleActorSelectWindow.activate();
                        this.mmcBattleActorSelectWindow.buttonsActivate();
                    };
                };
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_selectActorSelection.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_selectEnemySelection = Scene_Battle.prototype.selectEnemySelection;
Scene_Battle.prototype.selectEnemySelection = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_selectEnemySelection.call(this);
        }else{
            //敵ウィンドウが存在するか
            if(this.mmcBattleEnemyWindow) {
                var window = this.mmcBattleEnemyWindow.currentWindow();
                this.mmcBattleEnemyWindow.refresh();
                this.mmcBattleEnemyWindow.select(0);
                if(window.windowBeginBehavior.includes('openWhenSelected')) {
                    if(!this.mmcBattleEnemyWindow.visible) {
                        this.mmcWindowOpenSequence(this.mmcBattleEnemyWindow);
                    };
                };
                if(window.windowBeginActivate.includes('activateWhenSelected')) {
                    if(this.mmcBattleEnemyWindow.constructor === Window_MmcStandardWindow) {
                        this.mmcBattleEnemyWindow.activate();
                    }else{
                        this.mmcBattleEnemyWindow.activate();
                        this.mmcBattleEnemyWindow.buttonsActivate();
                    };
                };
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_selectEnemySelection.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_updateStatusWindow = Scene_Battle.prototype.updateStatusWindow;
Scene_Battle.prototype.updateStatusWindow = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_updateStatusWindow.call(this);
        }else{
            if ($gameMessage.isBusy()) {
                //バトルステータスをとじる
                if(this.mmcBattleActorStatus) {
                    var bSWindow = this.mmcBattleActorStatus.currentWindow();
                    this.mmcBattleActorStatus.deselect();
                    if(bSWindow.windowCloseBehavior.includes('closeWindow')) {
                        if(this.mmcBattleActorStatus.visible) {
                            this.mmcWindowCloseSequence(this.mmcBattleActorStatus);
                        };
                    };
                    if(this.mmcBattleActorStatus.constructor === Window_MmcStandardWindow) {
                        this.mmcBattleActorStatus.deactivate();
                    }else{
                        this.mmcBattleActorStatus.deactivate();
                        this.mmcBattleActorStatus.buttonsDeactivate();
                    };
                };
                //パーティコマンドをとじる
                if(this.mmcBattlePartyCommandWindow) {
                    var pWindow = this.mmcBattlePartyCommandWindow.currentWindow();
                    if(pWindow.windowCloseBehavior.includes('closeWindow')) {
                        if(this.mmcBattlePartyCommandWindow.visible) {
                            this.mmcWindowCloseSequence(this.mmcBattlePartyCommandWindow);
                        };
                    };
                    if(this.mmcBattlePartyCommandWindow.constructor === Window_MmcStandardWindow) {
                        this.mmcBattlePartyCommandWindow.deactivate();
                    }else{
                        this.mmcBattlePartyCommandWindow.deactivate();
                        this.mmcBattlePartyCommandWindow.buttonsDeactivate();
                    };
                };
                //アクターコマンドをとじる
                if(this.mmcBattleActorCommandWindow) {
                    var aWindow = this.mmcBattleActorCommandWindow.currentWindow();
                    if(aWindow.windowCloseBehavior.includes('closeWindow')) {
                        if(this.mmcBattleActorCommandWindow.visible) {
                            this.mmcWindowCloseSequence(this.mmcBattleActorCommandWindow);
                        };
                    };
                    if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                        this.mmcBattleActorCommandWindow.deactivate();
                    }else{
                        this.mmcBattleActorCommandWindow.deactivate();
                        this.mmcBattleActorCommandWindow.buttonsDeactivate();
                    };
                };
            } else if (this.isActive() && !this._messageWindow.isClosing()) {
                //なにもしない
                return;
            }
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_updateStatusWindow.call(this);
    };
};

var _AyatamSceneCustom_Scene_Battle_prototype_updateWindowPositions = Scene_Battle.prototype.updateWindowPositions;
Scene_Battle.prototype.updateWindowPositions = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcIsCopyBattleScene()) {
            _AyatamSceneCustom_Scene_Battle_prototype_updateWindowPositions.call(this);
        }else{
            //デフォルトのバトルステータス移動系処理
            if(this.mmcDefaultBattleStatusMovements) {
                if(!this.mmcBattleActorCommandWindow) return;
                if(!this.mmcBattleActorStatus) return;
                if(this.mmcBattleDefaultStatusSlided) return;
                var statusX = 0;
                if (BattleManager.isInputting()) {
                    statusX = this.mmcBattleActorCommandWindow.width;
                    this.mmcBattleActorStatus.slide(statusX,0,16,0);
                    this.mmcBattleDefaultStatusSlided = true;
                } else {
                    statusX = this.mmcBattleActorCommandWindow.width / 2;
                    this.mmcBattleActorStatus.slide(statusX,0,16,0);
                    this.mmcBattleDefaultStatusSlided = true;
                };
            };
        };
    }else{
        _AyatamSceneCustom_Scene_Battle_prototype_updateWindowPositions.call(this);
    };
};

Scene_Battle.prototype.mmcBattlePreviousCommand = function(window) {
    BattleManager.selectPreviousCommand();
    this.changeInputWindow();
};

Scene_Battle.prototype.mmcBattleSkillOk = function(window) {
    var skill = this.mmcBattleSkillWindow.item();
    var action = BattleManager.inputtingAction();
    action.setSkill(skill.id);
    BattleManager.actor().setLastBattleSkill(skill);
    this.onSelectAction();
};

Scene_Battle.prototype.mmcBattleSkillCancel = function(window) {
    //スキルリストをとじる
    if(this.mmcBattleSkillWindow) {
        var sWindow = this.mmcBattleSkillWindow.currentWindow();
        if(sWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleSkillWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleSkillWindow);
            };
        };
        if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleSkillWindow.deactivate();
        }else{
            this.mmcBattleSkillWindow.deactivate();
            this.mmcBattleSkillWindow.buttonsDeactivate();
        };
    };
    //アクターコマンドを開く
    if(this.mmcBattleActorCommandWindow) {
        var window = this.mmcBattleActorCommandWindow.currentWindow();
        if(window.windowBeginBehavior.includes('openWhenSelected')) {
            if(!this.mmcBattleActorCommandWindow.visible) {
                this.mmcWindowOpenSequence(this.mmcBattleActorCommandWindow);
            };
        };
        if(window.windowBeginActivate.includes('activateWhenSelected')) {
            if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                this.mmcBattleActorCommandWindow.activate();
            }else{
                this.mmcBattleActorCommandWindow.activate();
                this.mmcBattleActorCommandWindow.buttonsActivate();
            };
        };
    };
};

Scene_Battle.prototype.mmcBattleItemOk = function(window) {
    var item = this.mmcBattleItemWindow.item();
    var action = BattleManager.inputtingAction();
    action.setItem(item.id);
    $gameParty.setLastItem(item);
    this.onSelectAction();
};

Scene_Battle.prototype.mmcBattleItemCancel = function(window) {
    //アイテムリストをとじる
    if(this.mmcBattleItemWindow) {
        var iWindow = this.mmcBattleItemWindow.currentWindow();
        if(iWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleItemWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleItemWindow);
            };
        };
        if(this.mmcBattleItemWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleItemWindow.deactivate();
        }else{
            this.mmcBattleItemWindow.deactivate();
            this.mmcBattleItemWindow.buttonsDeactivate();
        };
    };
    //アクターコマンドを開く
    if(this.mmcBattleActorCommandWindow) {
        var aCWindow = this.mmcBattleActorCommandWindow.currentWindow();
        if(aCWindow.windowBeginBehavior.includes('openWhenSelected')) {
            if(!this.mmcBattleActorCommandWindow.visible) {
                this.mmcWindowOpenSequence(this.mmcBattleActorCommandWindow);
            };
        };
        if(aCWindow.windowBeginActivate.includes('activateWhenSelected')) {
            if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                this.mmcBattleActorCommandWindow.activate();
            }else{
                this.mmcBattleActorCommandWindow.activate();
                this.mmcBattleActorCommandWindow.buttonsActivate();
            };
        };
    };
};

Scene_Battle.prototype.mmcBattleActorOk = function(window) {
    var action = BattleManager.inputtingAction();
    action.setTarget(this.mmcBattleActorSelectWindow.index());
    //アクター選択をとじる
    if(this.mmcBattleActorSelectWindow) {
        var aSWindow = this.mmcBattleActorSelectWindow.currentWindow();
        if(aSWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleActorSelectWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleActorSelectWindow);
            };
        };
        if(this.mmcBattleActorSelectWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleActorSelectWindow.deactivate();
        }else{
            this.mmcBattleActorSelectWindow.deactivate();
            this.mmcBattleActorSelectWindow.buttonsDeactivate();
        };
    };
    //スキルリストをとじる
    if(this.mmcBattleSkillWindow) {
        var sWindow = this.mmcBattleSkillWindow.currentWindow();
        if(sWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleSkillWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleSkillWindow);
            };
        };
        if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleSkillWindow.deactivate();
        }else{
            this.mmcBattleSkillWindow.deactivate();
            this.mmcBattleSkillWindow.buttonsDeactivate();
        };
    };
    //アイテムリストをとじる
    if(this.mmcBattleItemWindow) {
        var iWindow = this.mmcBattleItemWindow.currentWindow();
        if(iWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleItemWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleItemWindow);
            };
        };
        if(this.mmcBattleItemWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleItemWindow.deactivate();
        }else{
            this.mmcBattleItemWindow.deactivate();
            this.mmcBattleItemWindow.buttonsDeactivate();
        };
    };
    this.selectNextCommand();
};

Scene_Battle.prototype.mmcBattleActorCancel = function(window) {
    //アクター選択をとじる
    if(this.mmcBattleActorSelectWindow) {
        var aSWindow = this.mmcBattleActorSelectWindow.currentWindow();
        if(aSWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleActorSelectWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleActorSelectWindow);
            };
        };
        if(this.mmcBattleActorSelectWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleActorSelectWindow.deactivate();
        }else{
            this.mmcBattleActorSelectWindow.deactivate();
            this.mmcBattleActorSelectWindow.buttonsDeactivate();
        };
    };
    //アクターコマンド選択状態から戻りウィンドウを展開
    if(this.mmcBattleActorCommandWindow) {
        var aCWindow = this.mmcBattleActorCommandWindow.currentWindow();
        var order = aCWindow.commandOrder;
        var commands = aCWindow.commands;
        var cId = this.mmcBattleActorCommandWindow.currentExt();
        var currentCommand = undefined;
        commands.forEach(command => {
            if(command) {
                if(command.commandName === order[cId]) {
                    currentCommand = command;
                };
            };
        });
        if(currentCommand !== undefined) {
            if(currentCommand.commandTypeName.includes(':battleCommand')) {
                var findBattleCommand = currentCommand.commandTypeName.split(':battleCommand')[1];
                var getBattleCommand = findBattleCommand.trim();
                switch (getBattleCommand) {
                    case 'commandSkill':
                        //スキルリストを開く
                        if(this.mmcBattleSkillWindow) {
                            var window = this.mmcBattleSkillWindow.currentWindow();
                            if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                if(!this.mmcBattleSkillWindow.visible) {
                                    this.mmcWindowOpenSequence(this.mmcBattleSkillWindow);
                                };
                            };
                            if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
                                    this.mmcBattleSkillWindow.activate();
                                }else{
                                    this.mmcBattleSkillWindow.activate();
                                    this.mmcBattleSkillWindow.buttonsActivate();
                                };
                            };
                        };
                        break;
                    case 'commandItem':
                        //アイテムリストを開く
                        if(this.mmcBattleItemWindow) {
                            var window = this.mmcBattleItemWindow.currentWindow();
                            if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                if(!this.mmcBattleItemWindow.visible) {
                                    this.mmcWindowOpenSequence(this.mmcBattleItemWindow);
                                };
                            };
                            if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                if(this.mmcBattleItemWindow.constructor === Window_MmcStandardWindow) {
                                    this.mmcBattleItemWindow.activate();
                                }else{
                                    this.mmcBattleItemWindow.activate();
                                    this.mmcBattleItemWindow.buttonsActivate();
                                };
                            };
                        };
                        break;
                };
            };
        };
    };
};

Scene_Battle.prototype.mmcBattleEnemyOk = function(window) {
    var action = BattleManager.inputtingAction();
    action.setTarget(this.mmcBattleEnemyWindow.enemyIndex());
    //敵ウィンドウを閉じる
    if(this.mmcBattleEnemyWindow) {
        var eWindow = this.mmcBattleEnemyWindow.currentWindow();
        if(eWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleEnemyWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleEnemyWindow);
            };
        };
        if(this.mmcBattleEnemyWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleEnemyWindow.deactivate();
        }else{
            this.mmcBattleEnemyWindow.deactivate();
            this.mmcBattleEnemyWindow.buttonsDeactivate();
        };
    };
    //スキルウィンドウを閉じる
    if(this.mmcBattleSkillWindow) {
        var sWindow = this.mmcBattleSkillWindow.currentWindow();
        if(sWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleSkillWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleSkillWindow);
            };
        };
        if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleSkillWindow.deactivate();
        }else{
            this.mmcBattleSkillWindow.deactivate();
            this.mmcBattleSkillWindow.buttonsDeactivate();
        };
    };
    //アイテムウィンドウを閉じる
    if(this.mmcBattleItemWindow) {
        var iWindow = this.mmcBattleSkillWindow.currentWindow();
        if(iWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleSkillWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleSkillWindow);
            };
        };
        if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleSkillWindow.deactivate();
        }else{
            this.mmcBattleSkillWindow.deactivate();
            this.mmcBattleSkillWindow.buttonsDeactivate();
        };
    };
    this.selectNextCommand();
};

Scene_Battle.prototype.mmcBattleEnemyCancel = function(window) {
    //敵ウィンドウを閉じる
    if(this.mmcBattleEnemyWindow) {
        var eWindow = this.mmcBattleEnemyWindow.currentWindow();
        if(eWindow.windowCloseBehavior.includes('closeWindow')) {
            if(this.mmcBattleEnemyWindow.visible) {
                this.mmcWindowCloseSequence(this.mmcBattleEnemyWindow);
            };
        };
        if(this.mmcBattleEnemyWindow.constructor === Window_MmcStandardWindow) {
            this.mmcBattleEnemyWindow.deactivate();
        }else{
            this.mmcBattleEnemyWindow.deactivate();
            this.mmcBattleEnemyWindow.buttonsDeactivate();
        };
    };
    //アクターコマンド選択状態から戻りウィンドウを展開
    if(this.mmcBattleActorCommandWindow) {
        var aCWindow = this.mmcBattleActorCommandWindow.currentWindow();
        var order = aCWindow.commandOrder;
        var commands = aCWindow.commands;
        var cId = this.mmcBattleActorCommandWindow.currentExt();
        var currentCommand = undefined;
        commands.forEach(command => {
            if(command) {
                if(command.commandName === order[cId]) {
                    currentCommand = command;
                };
            };
        });
        if(currentCommand !== undefined) {
            if(currentCommand.commandTypeName.includes(':battleCommand')) {
                var findBattleCommand = currentCommand.commandTypeName.split(':battleCommand')[1];
                var getBattleCommand = findBattleCommand.trim();
                switch (getBattleCommand) {
                    case 'commandAttack':
                        //アクターコマンドを開く
                        if(this.mmcBattleActorCommandWindow) {
                            var window = this.mmcBattleActorCommandWindow.currentWindow();
                            if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                if(!this.mmcBattleActorCommandWindow.visible) {
                                    this.mmcWindowOpenSequence(this.mmcBattleActorCommandWindow);
                                };
                            };
                            if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                if(this.mmcBattleActorCommandWindow.constructor === Window_MmcStandardWindow) {
                                    this.mmcBattleActorCommandWindow.activate();
                                }else{
                                    this.mmcBattleActorCommandWindow.activate();
                                    this.mmcBattleActorCommandWindow.buttonsActivate();
                                };
                            };
                        };
                        break;
                    case 'commandSkill':
                        //スキルリストを開く
                        if(this.mmcBattleSkillWindow) {
                            var window = this.mmcBattleSkillWindow.currentWindow();
                            if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                if(!this.mmcBattleSkillWindow.visible) {
                                    this.mmcWindowOpenSequence(this.mmcBattleSkillWindow);
                                };
                            };
                            if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
                                    this.mmcBattleSkillWindow.activate();
                                }else{
                                    this.mmcBattleSkillWindow.activate();
                                    this.mmcBattleSkillWindow.buttonsActivate();
                                };
                            };
                        };
                        break;
                    case 'commandItem':
                        //アイテムリストを開く
                        if(this.mmcBattleItemWindow) {
                            var window = this.mmcBattleItemWindow.currentWindow();
                            if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                if(!this.mmcBattleItemWindow.visible) {
                                    this.mmcWindowOpenSequence(this.mmcBattleItemWindow);
                                };
                            };
                            if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                if(this.mmcBattleItemWindow.constructor === Window_MmcStandardWindow) {
                                    this.mmcBattleItemWindow.activate();
                                }else{
                                    this.mmcBattleItemWindow.activate();
                                    this.mmcBattleItemWindow.buttonsActivate();
                                };
                            };
                        };
                        break;
                };
            };
        };
    };
};

//=============================================================================
// Scene_Base - シーンカスタマイズMV用のセットアップ
//=============================================================================

Scene_Base.prototype.mmcCurrentCustomScene = function() {
    return SceneManager.mmcCurrentCustomScene();
};

Scene_Base.prototype.mmcCustomSceneCreated = function() {
    this.mmcSceneCustomExecuted = true;
};

Scene_Base.prototype.mmcIsCustomSceneCreated = function() {
    return this.mmcSceneCustomExecuted;
};

Scene_Base.prototype.mmcCreateSceneBackground = function() {
    if(!this.mmcCurrentCustomScene()) return;
    if(!this.mmcCurrentCustomScene().sceneBackgroundSettings.usePicture) return;
    var x = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureX;
    var y = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureY;
    var op = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureOpacity;
    var scrollX = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureScrollX;
    var scrollY = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureScrollY;
    var scrollSpeedX = Number(this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureScrollSpeedX);
    var scrollSpeedX = Number(this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureScrollSpeedY);
    this._mmcSceneBackgroundRefreshed = false;
    this._mmcSceneBackground = new Sprite_MmcTilingSprite();
    this._mmcSceneBackground.x += x;
    this._mmcSceneBackground.y += y;
    this._mmcSceneBackground.opacity = op;
    if(this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureAnchor) {
        this._mmcSceneBackground.anchor.x = 0.5;
        this._mmcSceneBackground.anchor.y = 0.5;
    };
    this._mmcSceneBackground.move(0, 0, Graphics.width, Graphics.height);
    this._mmcSceneBackground.setupScroll(scrollX,scrollY,scrollSpeedX,scrollSpeedX);
    this.addChild(this._mmcSceneBackground);
};

Scene_Base.prototype.mmcLoadBackground = function() {
    if(!this._mmcBackImg) {
        var pic = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureFile;
        this._mmcBackImg = ImageManager.loadMmc(pic);
    };
};

Scene_Base.prototype.mmcReadBackground = function() {
    if(!this._mmcSceneBackground.bitmap && this._mmcBackImg.isReady()) {
        var rescale = this.mmcCurrentCustomScene().sceneBackgroundSettings.pictureRescale;
        this._mmcSceneBackground.bitmap = this._mmcBackImg;
        if(rescale ) {
            this._mmcSceneBackground.scale.x = Graphics.boxWidth / this._mmcBackImg.width;
            this._mmcSceneBackground.scale.y = Graphics.boxHeight / this._mmcBackImg.height;
        };
    };
};

Scene_Base.prototype.mmcCreateSceneSwitches = function() {
    this._mmcSceneSwitches = [];
};

Scene_Base.prototype.mmcGetSceneSwitches = function(id) {
    if(this._mmcSceneSwitches[id] === undefined) return false;
    return this._mmcSceneSwitches[id];
};

Scene_Base.prototype.mmcSetSceneSwitches = function(id,value) {
    this._mmcSceneSwitches[id] = value;
};

Scene_Base.prototype.mmcCreateCustomScene = function() {
    this.mmcInitializeMemoryWindow();
    var createList = this.mmcCurrentCustomScene().sceneCreateList;
    if(this._mmcSceneZ === undefined) {
        this._mmcSceneZ = 0;
    }else{
        this._mmcSceneZ++;
    };
    if(createList.length <= 0) return;
    createList.forEach(create => {
        if(create) {
            try {
                eval(create);
            } catch (e) {
                console.error(e);
                SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\n「' + create + '」の指定に誤りがあります。\nプルダウンから正式指定方法をご確認ください。');
            };
            this._mmcSceneZ++;
        };
    });
    this.children.sort(function (a, b) { return a._mmcZ - b._mmcZ });
};

Scene_Base.prototype.mmcCreateAllWindows = function() {
    this._windowLayer._mmcZ = this._mmcSceneZ;
    var windows = this.mmcCurrentCustomScene().windowOrder;
    if(windows === undefined) return;
    if(windows.length <= 0) return;
    windows.forEach(window => {
        if(window) {
            if(window !== '' || !window.includes('none')) {
                if(window.includes('//')) {
                    var windowSplit = window.split('//');
                    window = windowSplit[0];
                };
                window = window.trim();
                this.createMmcWindows(window);
            };
        };
    });
};

Scene_Base.prototype.mmcDrawPicture = function(picId,picName,x,y,w,h,op,anchor,mDistance,mSpeed,enableSceneSwitch,showSceneSwitch,dEnableSceneSwitch = true,dShowSceneSwitch = true) {
    this._movablePicturesActivationId = -1;
    this._mmcSceneSwitches[enableSceneSwitch] = dEnableSceneSwitch;
    this._mmcSceneSwitches[showSceneSwitch] = dShowSceneSwitch;
    if(this._mmcMovablePictures === undefined) this._mmcMovablePictures = [];
    if(this._mmcMovablePictures[picId] === undefined) {
        this._mmcMovablePictures[picId] = { slide: { use: false , onAccess: false , openSlide: { use: false , slideToX: 0 , slideToY: 0 , slideSpeedX: 0 , slideSpeedY: 0 } , closeSlide: { use: false ,  slideToX: 0 , slideToY: 0 , slideSpeedX: 0 , slideSpeedY: 0 } , returnSlide: { use: false , slideToX: 0 , slideToY: 0 , slideSpeedX: 0 , slideSpeedY: 0 } } , distance: mDistance , speed: mSpeed , originalX: x , originalY: y , show: showSceneSwitch , enable: enableSceneSwitch , sprite: new Sprite_MmcSprite(new Bitmap(Graphics.width + w,Graphics.height + h)) };
        this.addChild(this._mmcMovablePictures[picId].sprite);
    };
    this._mmcMovablePictures[picId].sprite.bitmap = ImageManager.loadMmc(picName);
    this._mmcMovablePictures[picId].sprite.x = x;
    this._mmcMovablePictures[picId].sprite.y = y;
    if(anchor) {
        this._mmcMovablePictures[picId].sprite.anchor.x = 0.5;
        this._mmcMovablePictures[picId].sprite.anchor.y = 0.5;
    };
    this._mmcMovablePictures[picId].sprite.opacity = op;
    this._mmcMovablePictures[picId].sprite.visible = this._mmcSceneSwitches[showSceneSwitch];
    this._mmcMovablePictures[picId].sprite._mmcZ = this._mmcSceneZ;
};

Scene_Base.prototype.mmcDrawActorIllust = function(picId,picName,actorId,useHpRate,x,y,w,h,op,anchor,mDistance,mSpeed,enableSceneSwitch,showSceneSwitch,dEnableSceneSwitch = true,dShowSceneSwitch = true) {
    this._movablePicturesActivationId = -1;
    this._mmcSceneSwitches[enableSceneSwitch] = dEnableSceneSwitch;
    this._mmcSceneSwitches[showSceneSwitch] = dShowSceneSwitch;
    if(this._mmcMovablePictures === undefined) this._mmcMovablePictures = [];
    if(this._mmcMovablePictures[picId] === undefined) {
        this._mmcMovablePictures[picId] = { slide: { use: false , onAccess: false , openSlide: { use: false , slideToX: 0 , slideToY: 0 , slideSpeedX: 0 , slideSpeedY: 0 } , closeSlide: { use: false ,  slideToX: 0 , slideToY: 0 , slideSpeedX: 0 , slideSpeedY: 0 } , returnSlide: { use: false , slideToX: 0 , slideToY: 0 , slideSpeedX: 0 , slideSpeedY: 0 } } , distance: mDistance , speed: mSpeed , originalX: x , originalY: y , show: showSceneSwitch , enable: enableSceneSwitch , sprite: new Sprite_MmcSprite(new Bitmap(Graphics.width + w,Graphics.height + h)) };
        this.addChild(this._mmcMovablePictures[picId].sprite);
    };
    var actor = $gameActors.actor(actorId);
    this._mmcMovablePictures[picId].sprite.setActor(picName,actor,useHpRate);
    this._mmcMovablePictures[picId].sprite.x = x;
    this._mmcMovablePictures[picId].sprite.y = y;
    if(anchor) {
        this._mmcMovablePictures[picId].sprite.anchor.x = 0.5;
        this._mmcMovablePictures[picId].sprite.anchor.y = 0.5;
    };
    this._mmcMovablePictures[picId].sprite.opacity = op;
    this._mmcMovablePictures[picId].sprite.visible = this._mmcSceneSwitches[showSceneSwitch];
    this._mmcMovablePictures[picId].sprite._mmcZ = this._mmcSceneZ;
};

Scene_Base.prototype.mmcPictureSlide = function(picId,onAccess,useOpen,oX,oY,oSpeedX,oSpeedY,useClose,cX,cY,cSpeedX,cSpeedY,useReturn,rX,rY,rSpeedX,rSpeedY) {
    if(this._mmcMovablePictures === undefined) {
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\nピクチャーId:' + picId + ' にスライド効果追加時に対象画像が作成されていませんでした。\n作成順または設定を再確認してください。');
        return;
    };
    if(this._mmcMovablePictures[picId] === undefined) {
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\nピクチャーId:' + picId + ' にスライド効果追加時に対象画像が作成されていませんでした。\n作成順または設定を再確認してください。');
        return;
    };
    this._mmcMovablePictures[picId].slide.use = true;
    this._mmcMovablePictures[picId].slide.openSlide.use = useOpen;
    this._mmcMovablePictures[picId].slide.onAccess = onAccess;
    this._mmcMovablePictures[picId].slide.openSlide.slideToX = oX;
    this._mmcMovablePictures[picId].slide.openSlide.slideToY = oY;
    this._mmcMovablePictures[picId].slide.openSlide.slideSpeedX = oSpeedX;
    this._mmcMovablePictures[picId].slide.openSlide.slideSpeedY = oSpeedY;
    this._mmcMovablePictures[picId].slide.closeSlide.use = useClose;
    this._mmcMovablePictures[picId].slide.closeSlide.slideToX = cX;
    this._mmcMovablePictures[picId].slide.closeSlide.slideToY = cY;
    this._mmcMovablePictures[picId].slide.closeSlide.slideSpeedX = cSpeedX;
    this._mmcMovablePictures[picId].slide.closeSlide.slideSpeedY = cSpeedY;
    this._mmcMovablePictures[picId].slide.returnSlide.use = useReturn;
    this._mmcMovablePictures[picId].slide.returnSlide.slideToX = rX;
    this._mmcMovablePictures[picId].slide.returnSlide.slideToY = rY;
    this._mmcMovablePictures[picId].slide.returnSlide.slideSpeedX = rSpeedX;
    this._mmcMovablePictures[picId].slide.returnSlide.slideSpeedY = rSpeedY;
    if(!onAccess) {
        if(useOpen) {
            this._mmcMovablePictures[picId].sprite.slide(oX,oY,oSpeedX,oSpeedY,"open");
        };
    };
};

Scene_Base.prototype.mmcPictureRotation = function(picId,useRotation,rSpeed) {
    if(this._mmcMovablePictures === undefined) {
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\nピクチャーId:' + picId + ' にスライド効果追加時に対象画像が作成されていませんでした。\n作成順または設定を再確認してください。');
        return;
    };
    if(this._mmcMovablePictures[picId] === undefined) {
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\nピクチャーId:' + picId + ' にスライド効果追加時に対象画像が作成されていませんでした。\n作成順または設定を再確認してください。');
        return;
    };
    this._mmcMovablePictures[picId].sprite.mmcRotation(useRotation,rSpeed);
};

Scene_Base.prototype.mmcPictureParticle = function(picId,mSpeedX,mSpeedY,swingX,swingY,useRotation,rSpeed,useRepeat,useRandomScale,rScale,anchor,blendMode,amount) {
    if(this._mmcMovablePictures === undefined) {
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\nピクチャーId:' + picId + ' にスライド効果追加時に対象画像が作成されていませんでした。\n作成順または設定を再確認してください。');
        return;
    };
    if(this._mmcMovablePictures[picId] === undefined) {
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\nピクチャーId:' + picId + ' にスライド効果追加時に対象画像が作成されていませんでした。\n作成順または設定を再確認してください。');
        return;
    };
    this._mmcMovablePictures[picId].sprite.setParticle(true,useRepeat,useRotation,useRandomScale,rScale,mSpeedX,mSpeedY,swingX,swingY,rSpeed,anchor,amount,blendMode);
};

Scene_Base.prototype.mmcDrawAegActor = function(id,actorId,poseId,playMode = 'loop',playSpeed = 1,customStartFrame = 'continue',customEndFrame = 'end',mirror = false,x = 0,y = 0,w = 100,h = 100,op = 255) {
    if(Imported.Ayatam_EroRpgKit) {
        this.createAegActor(id,actorId,Number(poseId),playMode,playSpeed,customStartFrame,customEndFrame,mirror,Number(x),Number(y),Number(w),Number(h),Number(op));
    }else{
        SceneManager.mmcErrorPoper(true,'er1099sb','場所: <font color="skyblue"><b>シーン上で作成するデータリスト</b></font>\n未導入プラグイン「エロRPG制作キットMV」の情報を描画しようとしています。\n設定を再確認してください。');
        return;
    };
};

Scene_Base.prototype.eraseCommentCommands = function(windows) {
    windows.forEach(window => {
        if(window) {
            if(window.windowCancelBehavior.includes('//')) {
                var erase = window.windowCancelBehavior.split('//')[0];
                window.windowCancelBehavior = erase.trim();
            };
            if(window.commands.length > 0) {
                window.commands.forEach(command => {
                    if(command) {
                        command.commandTypeName = ""+command.commandTypeName+"";
                        if(command.commandTypeName.includes('//')) {
                            var erase = command.commandTypeName.split('//')[0];
                            command.commandTypeName = erase.trim();
                        };
                        if(command.targetWindowName.includes('//')) {
                            var erase = command.targetWindowName.split('//')[0];
                            command.targetWindowName = erase.trim();
                        };
                        if(command.commandEnableExt.includes('//')) {
                            var erase = command.commandEnableExt.split('//')[0];
                            command.commandEnableExt = erase.trim();
                        };
                    };
                });
            };
            if(window.standardTargetData !== undefined) {
                if(Array.isArray(window.standardTargetData)) {
                    if(window.standardTargetData.length > 0) {
                        for(var i = 0; i < window.standardTargetData.length; i++) {
                            if(window.standardTargetData[i]) {
                                var target = window.standardTargetData[i];
                                if(target.includes('//')) {
                                    var erase = target.split('//')[0];
                                    window.standardTargetData[i] = erase.trim();
                                };
                            };
                        };
                    };
                };
            };
        };
    });
    return windows;
};

Scene_Base.prototype.createMmcWindows = function(window) {
    var windowInfo = this.mmcCurrentCustomScene().windowInfo;
    var windowSettings = undefined;
    windowIfo = this.eraseCommentCommands(windowInfo);
    windowInfo.forEach(info => {
        if(info) {
            var windowName = info.windowName;
            if(windowName.includes('//')) {
                var windowSplit = windowName.split('//');
                windowName = windowSplit[0];
            };
            windowName = windowName.trim();
            if(windowName === window) {
                windowSettings = info;
            };
        };
    });
    if(windowSettings) {
        switch (windowSettings.windowType){
            case 'command':
                var x = windowSettings.windowX;
                var y = windowSettings.windowY;
                var w = windowSettings.windowW;
                var h = windowSettings.windowH;
                var op = windowSettings.windowOpacity;
                var bOp = windowSettings.windowBackOpacity;
                var customWindow = new Window_MmcCommand(x,y,w,h,windowSettings);
                customWindow._isWindow = false;
                customWindow.opacity = op;
                customWindow.backOpacity = bOp;
                if(windowSettings.windowBeginBehavior.includes('openFromBegin')) {
                    customWindow.show();
                    customWindow.buttonsStartOpenSlide();
                }else if(windowSettings.windowBeginBehavior.includes('openWhenSelected')) {
                    customWindow.hide();
                };
                if(windowSettings.windowBeginActivate.includes('activateFromBegin')) {
                    customWindow.activate();
                    customWindow.buttonsActivate();
                }else if(windowSettings.windowBeginActivate.includes('activateWhenSelected')) {
                    customWindow.deactivate();
                    customWindow.buttonsDeactivate();
                };
                customWindow.setHandler(':mmcAddCommand', this.mmcAddCommands.bind(this,windowSettings));
                if(windowSettings.windowCancelBehavior.includes('closeScene')) {
                    customWindow.setHandler('cancel', this.popScene.bind(this));
                }else if(!windowSettings.windowCancelBehavior.includes('none')) {
                    customWindow.setHandler('cancel', this.mmcWindowCancel.bind(this,windowSettings));
                };
                this.addWindow(customWindow);
                this.mmcAddCustomWindow(windowSettings.windowName,customWindow);
                break;
            case 'standard':
                var x = windowSettings.windowX;
                var y = windowSettings.windowY;
                var w = windowSettings.windowW;
                var h = windowSettings.windowH;
                var op = windowSettings.windowOpacity;
                var bOp = windowSettings.windowBackOpacity;
                var customWindow = new Window_MmcStandardWindow(x,y,w,h,windowSettings);
                customWindow._isWindow = false;
                customWindow.opacity = op;
                customWindow.backOpacity = bOp;
                if(windowSettings.windowBeginBehavior.includes('openFromBegin')) {
                    customWindow.show();
                    customWindow.startWindowOpenSlides();
                }else if(windowSettings.windowBeginBehavior.includes('openWhenSelected')) {
                    customWindow.hide();
                };
                if(windowSettings.windowBeginActivate.includes('activateFromBegin')) {
                    customWindow.activate();
                }else if(windowSettings.windowBeginActivate.includes('activateWhenSelected')) {
                    customWindow.deactivate();
                };
                if(windowSettings.windowCancelBehavior.includes('closeScene')) {
                    customWindow.setHandler('cancel', this.popScene.bind(this));
                }else if(!windowSettings.windowCancelBehavior.includes('none')) {
                    customWindow.setHandler('cancel', this.mmcWindowCancel.bind(this,windowSettings));
                };
                this.addWindow(customWindow);
                this.mmcAddCustomWindow(windowSettings.windowName,customWindow);
                break;
        };
    };
};

Scene_Base.prototype.mmcCreateCustomWindowHandler = function() {
    this._mmcCustomWindows = new Map;
};

Scene_Base.prototype.mmcAddCustomWindow = function(name,window) {
    this._mmcCustomWindows.set(name,window);
};

Scene_Base.prototype.mmcGetCustomWindow = function(window) {
    return this._mmcCustomWindows.get(window);
};

Scene_Base.prototype.mmcRefreshCustomWindow = function(window) {
    if(this.mmcGetCustomWindow(window) === undefined) return;
    this.mmcGetCustomWindow(window).refresh();
};

Scene_Base.prototype.mmcRefreshAllCustomWindow = function() {
    if(!this._mmcCustomWindows) return;
    if(this._mmcCustomWindows.length <= 0) return;
    this._mmcCustomWindows.forEach(customWindow => {
        if(customWindow) {
            customWindow.refresh();
        };
    });
};

Scene_Base.prototype.mmcInitializeMemoryWindow = function() {
    this.mmcPerWinList = [];
};

Scene_Base.prototype.mmcAddPreviousWindow = function(window) {
    if(this.mmcPerWinList === undefined) this.mmcPerWinList = [];
    this.mmcPerWinList.push(window);
};

Scene_Base.prototype.mmcPreviousWindow = function() {
    if(this.mmcPerWinList === undefined) this.mmcPerWinList = [];
    return this.mmcPerWinList
};

Scene_Base.prototype.mmcWindowOpenSequence = function(currentWindow) {
    if(currentWindow.constructor === Window_MmcStandardWindow) {
        currentWindow.startWindowOpenSlides();
    }else{
        currentWindow.buttonsStartOpenSlide();
    };
};

Scene_Base.prototype.mmcWindowCloseSequence = function(currentWindow) {
    if(currentWindow.constructor === Window_MmcStandardWindow) {
        currentWindow.startWindowCloseSlides();
    }else{
        currentWindow.buttonsDeactivate();
        currentWindow.startWindowCloseSlides();
    };
};

Scene_Base.prototype.mmcWindowCancel = function(window,needResetWindow = '') {
    if(this.mmcGetCustomWindow(window.windowName).constructor === Window_MmcStandardWindow) {
        if(this.mmcGetCustomWindow(window.windowName).mmcDataCategory === 'actorEquipList') {
            this.mmcGetCustomWindow(window.windowName).battleActor(undefined);
            this.mmcGetCustomWindow(window.windowName).setbattleEquips(undefined);
        };
    };
    if(needResetWindow !== '') {
        if(this.mmcGetCustomWindow(needResetWindow) !== undefined) {
            if(this.mmcGetCustomWindow(needResetWindow).constructor === Window_MmcStandardWindow) {
                this.mmcGetCustomWindow(needResetWindow).setEquipSlotId(undefined);
                this.mmcGetCustomWindow(needResetWindow).setEquipItemWindow(undefined);
                this.mmcGetCustomWindow(needResetWindow).setTempActor(undefined);
                this.mmcGetCustomWindow(needResetWindow).refresh();
            };
        };
    };
    this.mmcGetCustomWindow(window.windowName).deselect();
    this.mmcGetCustomWindow(window.windowName).deactivate();
    if(window.windowCancelBehavior.includes('memoryReturn')) {
        var previousWindow = this.mmcPreviousWindow().pop();
        if(window.windowCloseBehavior.includes('closeWindow')) {
            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(window.windowName));
        };
        if(this.mmcGetCustomWindow(previousWindow).currentWindow().windowCloseBehavior.includes('closeWindow')) {
            this.mmcWindowOpenSequence(this.mmcGetCustomWindow(previousWindow));
        };
        this.mmcGetCustomWindow(previousWindow).selectLast();
        this.mmcGetCustomWindow(previousWindow).activate();
    }else if(!window.windowCancelBehavior.includes('none')){
        if(window.windowCloseBehavior.includes('closeWindow')) {
            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(window.windowName));
        };
        this.mmcGetCustomWindow(window.windowCancelBehavior).activate();
    }else if(window.windowCancelBehavior.includes('none')){
        if(window.windowCloseBehavior.includes('closeWindow')) {
            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(window.windowName));
        };
    };
};

Scene_Base.prototype.mmcTranslateTargetActions = function(target) {
    var targets = [];
    if(target.includes('//')) target = target.split('//')[0];
    target = target.trim();
    if(target.includes(',')) target = target.split(',');
    if(Array.isArray(target)) {
        target.forEach(action => {
            if(action) {
                if(action.includes(':')) {
                    var windowName = action.split(':')[0];
                    var addtionalCommand = action.split(':')[1];
                    if(addtionalCommand.includes('.')) {
                        addtionalCommand = addtionalCommand.split('.');
                    };
                    if(Array.isArray(addtionalCommand)) {
                        targets.push([windowName,addtionalCommand]);
                    }else{
                        targets.push([windowName,[addtionalCommand]]);
                    };
                }else{
                    targets.push([action,["activate"]]);
                };
            };
        });
    }else{
        if(target.includes(':')) {
            var windowName = target.split(':')[0];
            var addtionalCommand = target.split(':')[1];
            if(addtionalCommand.includes('.')) {
                addtionalCommand = addtionalCommand.split('.');
            };
            if(Array.isArray(addtionalCommand)) {
                targets.push([windowName,addtionalCommand]);
            }else{
                targets.push([windowName,[addtionalCommand]]);
            };
        }else{
            targets.push([target,["activate"]]);
        }; 
    };
    return targets;
};

Scene_Base.prototype.mmcExecuteTargetAction = function(currentWindow,actionCommands,functionCommand = "") {
    if(actionCommands.length <= 0) return "";
    var currentActivity = "";
    actionCommands.forEach(action => {
        if(action) {
            switch (action) {
                case 'activateNoSelect':
                    currentActivity += ":activate";
                    if(currentWindow.constructor === Window_MmcCommand) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.activate();
                            currentWindow.buttonsActivate();
                        }else{
                            currentWindow.deactivate();
                            currentWindow.buttonsDeactivate();
                        };
                        currentWindow.deselect();
                    }else if(currentWindow.constructor === Window_MmcStandardWindow) {
                        if(!functionCommand.includes('reverse')) {
                            if(functionCommand.includes('formation')) currentWindow.setFormationMode(true);
                            if(functionCommand.includes('personal')) currentWindow.setFormationMode(false);
                            if(!functionCommand.includes('formCancel')) {
                                currentWindow.activate();
                            }; 
                        }else{
                            if(functionCommand.includes('formation')) currentWindow.setFormationMode(false);
                            currentWindow.deactivate();
                        };
                        currentWindow.deselect();
                    };
                    break;
                case 'activate':
                    currentActivity += ":activate";
                    if(currentWindow.constructor === Window_MmcCommand) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.selectLast();
                            currentWindow.activate();
                            currentWindow.buttonsActivate();
                        }else{
                            currentWindow.deselect();
                            currentWindow.deactivate();
                            currentWindow.buttonsDeactivate();
                        };
                    }else if(currentWindow.constructor === Window_MmcStandardWindow) {
                        if(!functionCommand.includes('reverse')) {
                            if(functionCommand.includes('formation')) currentWindow.setFormationMode(true);
                            if(functionCommand.includes('personal')) currentWindow.setFormationMode(false);
                            if(!functionCommand.includes('formCancel')) {
                                currentWindow.selectLast();
                                currentWindow.activate();
                            }; 
                        }else{
                            if(functionCommand.includes('formation')) currentWindow.setFormationMode(false);
                            currentWindow.deselect();
                            currentWindow.deactivate();
                        };
                    };
                    break;
                case 'deactivate':
                    currentActivity += ":deactivate";
                    if(currentWindow.constructor === Window_MmcCommand) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.deselect();
                            currentWindow.deactivate();
                            currentWindow.buttonsDeactivate();
                        }else{
                            currentWindow.selectLast();
                            currentWindow.activate();
                            currentWindow.buttonsActivate();
                        };
                    }else if(currentWindow.constructor === Window_MmcStandardWindow) {
                        if(!functionCommand.includes('reverse')) {
                            if(functionCommand.includes('formation')) currentWindow.setFormationMode(false);
                            currentWindow.deselect();
                            currentWindow.deactivate();
                        }else{
                            if(functionCommand.includes('formation')) currentWindow.setFormationMode(true);
                            if(functionCommand.includes('personal')) currentWindow.setFormationMode(false);
                            if(!functionCommand.includes('formCancel')) {
                                currentWindow.selectLast();
                                currentWindow.activate();
                            }; 
                        };
                    };
                    break;
                case 'slideIn':
                    currentActivity += ":slideIn";
                    if(currentWindow.constructor === Window_MmcCommand) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.buttonsStartOpenSlide();
                        }else{
                            currentWindow.startWindowCloseSlides();
                        };
                    }else if(currentWindow.constructor === Window_MmcStandardWindow) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.startWindowOpenSlides();
                        }else{
                            currentWindow.startWindowCloseSlides();
                        };
                    };
                    break;
                case 'slideOut':
                    currentActivity += ":slideOut";
                    if(currentWindow.constructor === Window_MmcCommand) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.startWindowCloseSlides();
                        }else{
                            currentWindow.buttonsStartOpenSlide();
                        };
                    }else if(currentWindow.constructor === Window_MmcStandardWindow) {
                        if(!functionCommand.includes('reverse')) {
                            currentWindow.startWindowCloseSlides();
                        }else{
                            currentWindow.startWindowOpenSlides();
                        };
                    };
                    break;
            };
        };
    });
    return currentActivity;
};

Scene_Base.prototype.isWindowCursorCommand = function(cursorFlag) {
    if(cursorFlag.includes(':processOk')) return true;
    if(cursorFlag.includes(':processCancel')) return true;
    if(cursorFlag.includes(':pageUp')) return true;
    if(cursorFlag.includes(':pageDown')) return true;
    if(cursorFlag.includes(':down')) return true;
    if(cursorFlag.includes(':up')) return true;
    if(cursorFlag.includes(':right')) return true;
    if(cursorFlag.includes(':left')) return true;
    return false;
};

Scene_Base.prototype.mmcAddCommands = function(window) {
    var order = window.commandOrder;
    var commands = window.commands;
    var currentCommand = undefined;
    var cursorFlag = this.mmcGetCustomWindow(window.windowName).mmcCursorFlag();
    var cursorWindow = this.mmcGetCustomWindow(window.windowName).currentWindow();
    if(this.isWindowCursorCommand(cursorFlag)) {
        switch (cursorFlag){
            case ':down':
                currentCommand = cursorWindow.commandCursorDown;
                break;
            case ':up':
                currentCommand = cursorWindow.commandCursorUp;
                break;
            case ':right':
                currentCommand = cursorWindow.commandCursorRight;
                break;
            case ':left':
                currentCommand = cursorWindow.commandCursorLeft;
                break;
            case ':pageUp':
                currentCommand = cursorWindow.commandPageUp;
                break;
            case ':pageDown':
                currentCommand = cursorWindow.commandPageDown;
                break;
            case ':processOk':
                currentCommand = cursorWindow.commandOk;
                break;
            case ':processCancel':
                currentCommand = cursorWindow.commandCancel;
                break;
        };
        this.mmcGetCustomWindow(window.windowName).mmResetCursorFlag();
    }else{
        var cId = this.mmcGetCustomWindow(window.windowName) !== undefined ? this.mmcGetCustomWindow(window.windowName).currentExt() : 0;
        commands.forEach(command => {
            if(command) {
                if(command.commandName === order[cId]) {
                    currentCommand = command;
                };
            };
        });
    };
    switch (currentCommand.callType) {
        case 'callScene'://シーンの呼び出し
            switch (currentCommand.commandTargetType) {
                case 'callDirectly':
                    if(currentCommand.commandTargetType.includes('Scene_Skill') || currentCommand.commandTargetType.includes('Scene_Equip') || currentCommand.commandTargetType.includes('Scene_Status')) {
                        var actor = $gameParty.members()[0];
                        $gameParty.setMenuActor(actor);
                    };
                    this.mmcChangeScene(currentCommand.commandTypeName);
                    break;
                case 'targetSelection':
                    this.mmcCommandPersonal(window,currentCommand);
                    break;
            };
            break;
        case 'commonEvent'://コモンイベントの起動
            var commonEvent = Number(currentCommand.commandTypeName);
            if(commonEvent !== 0) {
                $gameTemp.reserveCommonEvent(commonEvent);
                if($gameTemp.isCommonEventReserved()) this.mmcChangeScene("Scene_Map");
            }; 
            break;
        case 'activateWindow'://ウィンドウへ接続
            switch (currentCommand.commandTargetType) {
                case 'callDirectly':
                    this.windowAccessing(window,currentCommand);
                    break;
                case 'targetSelection':
                    this.mmcCommandPersonal(window,currentCommand);
                    break;
            };
            break;
        case 'functionCommand'://特殊コマンド
            switch (currentCommand.commandTypeName) {
                case ':formation'://並び替えモード
                    if(currentCommand.commandTargetType === 'targetSelection') {
                        if(!currentCommand.targetWindowName.includes('none')) {
                            if(currentCommand.targetWindowName !== '') {
                                var actions = this.mmcTranslateTargetActions(currentCommand.targetWindowName);
                                if(this.mmcGetCustomWindow(actions[0][0]).constructor === Window_MmcStandardWindow) {
                                    if(this.mmcGetCustomWindow(actions[0][0]).formationAble()) {
                                        this.mmcCommandFormation(window,currentCommand);
                                    }else{
                                        SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の選択時接続先 <font color="lime"><b>' + actions[0][0] + '</b></font> は<font color="red"><b>アクター並び替え不可</b></font>のため、\n並び替えモードを中断します。\n\n並び替え可能な対象は参照するデータが付加効果無しの <font color="lime"><b>$gameParty.members()</b></font> に限ります。\n設定を確認してください。');
                                        return;
                                    };
                                }else{
                                    SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の <font color="red"><b>選択時接続ウィンドウ</b></font> ' + actions[0][0] + ' は<font color="red"><b>データ型ウィンドウではない</b></font>ため、\n並び替えモードを中断します。設定を確認してください。');
                                    return;
                                };
                            }else{
                                SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の<font color="red"><b>選択時接続ウィンドウ</b></font>が未設定のため、\n設定を確認してください。');
                                return;
                            };
                        }else{
                            SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の<font color="red"><b>選択時接続ウィンドウ</b></font>が未設定のため、\n設定を確認してください。');
                            return;
                        };
                    }else{
                        SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> のコマンドの選択方法が<font color="red"><b>対象選択以外</b></font>に設定されているため、処理を中断しました。 \n設定を確認してください。');
                        return;
                    };
                    break;
                default:
                    if(currentCommand.commandTypeName.includes(':battleCommand')) {
                        if(SceneManager._scene.constructor !== Scene_Battle) {
                            SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> のコマンド参照名に<font color="red"><b>戦闘シーン専用の特殊コマンド</b></font>が設定されているため、処理を中断しました。 \n設定を確認してください。');
                            return;
                        };
                        var findBattleCommand = currentCommand.commandTypeName.split(':battleCommand')[1];
                        var getBattleCommand = findBattleCommand.trim();
                        switch (getBattleCommand) {
                            case 'startFight'://パーティコマンド「戦う」の役割。
                                this.selectNextCommand();
                                break;
                            case 'escapeBattle'://パーティコマンド「逃げる」の役割。
                                BattleManager.processEscape();
                                this.changeInputWindow();
                                break;
                            case 'commandAttack'://アクターコマンド「攻撃」の役割。
                                BattleManager.inputtingAction().setAttack();
                                this.selectEnemySelection();
                                break;
                            case 'commandSkill'://アクターコマンド「スキル群」の役割。
                                if(this.mmcBattleSkillWindow) {
                                    var actor = this.mmcBattleActorCommandWindow._mmcBattleActor;
                                    var skillTypes = actor.addedSkillTypes();
                                    var currentSkillType = 0;
                                    skillTypes.sort(function(a, b) {
                                        return a - b;
                                    });
                                    for(var i = 0; i < skillTypes.length; ++i) {
                                        if(skillTypes[i]) {
                                            var cmdName = $dataSystem.skillTypes[skillTypes[i]];
                                            if(currentCommand.commandName.includes(cmdName)) {
                                                currentSkillType = skillTypes[i];
                                                break;
                                            };
                                        };
                                    };
                                    if(currentSkillType !== 0) {
                                        this.mmcBattleSkillWindow.battleActor(BattleManager.actor());
                                        this.mmcBattleSkillWindow.setbattleStypeId(currentSkillType);
                                        this.mmcBattleSkillWindow.refresh();
                                        this.mmcBattleSkillWindow.selectLast();
                                    };
                                    var window = this.mmcBattleSkillWindow.currentWindow();
                                    if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                        if(!this.mmcBattleSkillWindow.visible) {
                                            this.mmcWindowOpenSequence(this.mmcBattleSkillWindow);
                                        };
                                    };
                                    if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                        if(this.mmcBattleSkillWindow.constructor === Window_MmcStandardWindow) {
                                            this.mmcBattleSkillWindow.activate();
                                        }else{
                                            this.mmcBattleSkillWindow.activate();
                                            this.mmcBattleSkillWindow.buttonsActivate();
                                        };
                                    };
                                };
                                break;
                            case 'commandGuard'://アクターコマンド「防御」の役割。
                                BattleManager.inputtingAction().setGuard();
                                this.selectNextCommand();
                                break;
                            case 'commandItem'://アクターコマンド「アイテム」の役割。
                                if(this.mmcBattleItemWindow) {
                                    var window = this.mmcBattleItemWindow.currentWindow();
                                    this.mmcBattleItemWindow.refresh();
                                    this.mmcBattleItemWindow.selectLast();
                                    if(window.windowBeginBehavior.includes('openWhenSelected')) {
                                        if(!this.mmcBattleItemWindow.visible) {
                                            this.mmcWindowOpenSequence(this.mmcBattleItemWindow);
                                        };
                                    };
                                    if(window.windowBeginActivate.includes('activateWhenSelected')) {
                                        if(this.mmcBattleItemWindow.constructor === Window_MmcStandardWindow) {
                                            this.mmcBattleItemWindow.activate();
                                        }else{
                                            this.mmcBattleItemWindow.activate();
                                            this.mmcBattleItemWindow.buttonsActivate();
                                        };
                                    };
                                };
                                break;
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':send')) {
                        var windowAction = currentCommand.commandTypeName.match(/:send (.*) (.*) (.*)/i)[1];
                        var transition = 'selectLast';
                        var actorStatus = currentCommand.commandTypeName.match(/:send (.*) (.*) (.*)/i)[2];
                        var sendType = currentCommand.commandTypeName.match(/:send (.*) (.*) (.*)/i)[3];
                        if(windowAction.includes(':')) {
                            var targetWindow = String(windowAction.split(':')[0]);
                            transition = windowAction.split(':')[1];
                        }else{
                            var targetWindow = String(windowAction);
                        };
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            if(cursorFlag !== "") {
                                var flag = "";
                                if(cursorFlag === ':down') flag = "カーソルキー下";
                                if(cursorFlag === ':up') flag = "カーソルキー上";
                                if(cursorFlag === ':right') flag = "カーソルキー右";
                                if(cursorFlag === ':left') flag = "カーソルキー左";
                                if(cursorFlag === ':pageUp') flag = "Q/PageUp/LT";
                                if(cursorFlag === ':pageDown') flag = "E/PageDown/RT";
                                if(cursorFlag === ':processOk') flag = "決定キー";
                                if(cursorFlag === ':processCancel') flag = "キャンセルキー";
                                SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のカーソル/ボタン挙動の設定\n<font color="skyblue"><b>' + flag + '</b></font> の <font color="red"><b>カーソル参照名</b></font>\n' + currentCommand.commandTypeName + ' にて\n指定されたウィンドウ ' + targetWindow + ' が見つかりませんでした。\n設定をご確認ください。');
                            }else{
                                SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の<font color="red"><b>指定されたウィンドウ</b></font> ' + targetWindow + ' が見つかりませんでした。\n設定をご確認ください。');
                            };
                            return;
                        };
                        var actor = this.mmcGetCustomWindow(window.windowName).currentBattleActor();
                        var slotId = this.mmcGetCustomWindow(window.windowName).index();
                        if(this.mmcGetCustomWindow(actorStatus) !== undefined) {
                            if(this.mmcGetCustomWindow(actorStatus).constructor === Window_MmcStandardWindow) {
                                this.mmcGetCustomWindow(actorStatus).setEquipSlotId(slotId);
                                this.mmcGetCustomWindow(actorStatus).setEquipItemWindow(this.mmcGetCustomWindow(targetWindow));
                            };
                        };
                        if(sendType === 'EquipSlot') {
                            this.mmcGetCustomWindow(targetWindow).battleActor(actor);
                            this.mmcGetCustomWindow(targetWindow).setbattleEquips(slotId);
                        };
                        if(transition === 'selectLast') {
                            this.mmcAddPreviousWindow(window.windowName);
                            this.mmcGetCustomWindow(targetWindow).select(0);
                            this.mmcGetCustomWindow(targetWindow).activate();
                            var cancelWindow = this.mmcGetCustomWindow(targetWindow).currentWindow();
                            this.mmcGetCustomWindow(targetWindow).setHandler('cancel', this.mmcWindowCancel.bind(this,cancelWindow,actorStatus));
                        }else if(transition === 'deselect') {
                            this.mmcGetCustomWindow(window.windowName).selectLast();
                            this.mmcGetCustomWindow(window.windowName).activate();
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':equipChange')) {
                        var actorStatus = currentCommand.commandTypeName.match(/:equipChange (.*)/i)[1];
                        SoundManager.playEquip();
                        var actor = this.mmcGetCustomWindow(window.windowName).currentBattleActor();
                        var slotId = this.mmcGetCustomWindow(window.windowName).currentEquipSlotId();
                        var item = this.mmcGetCustomWindow(window.windowName).item();
                        if(item === undefined) item = null;
                        actor.changeEquip(slotId, item);
                        this.mmcRefreshAllCustomWindow();
                        this.mmcWindowCancel(window,actorStatus);
                    };
                    if(currentCommand.commandTypeName.includes(':equipOptimize')) {
                        SoundManager.playEquip();
                        var actor = $gameParty.menuActor();
                        actor.optimizeEquipments();
                        this.mmcRefreshAllCustomWindow();
                        this.mmcGetCustomWindow(window.windowName).selectLast();
                        this.mmcGetCustomWindow(window.windowName).activate();
                    };
                    if(currentCommand.commandTypeName.includes(':equipAllOff')) {
                        SoundManager.playEquip();
                        var actor = $gameParty.menuActor();
                        actor.clearEquipments();
                        this.mmcRefreshAllCustomWindow();
                        this.mmcGetCustomWindow(window.windowName).selectLast();
                        this.mmcGetCustomWindow(window.windowName).activate();
                    };
                    if(currentCommand.commandTypeName.includes(':windowNextPage')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowNextPage (.*)/i)[1];
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                            if(this.mmcGetCustomWindow(targetWindow).canTurnPage()) {
                                AudioManager.playSe({ "name": "Book2", "volume": 70, "pitch": 100, "pan": 0 });
                                this.mmcGetCustomWindow(targetWindow).turnNextPage();
                            };
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowPreivousPage')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowPreivousPage (.*)/i)[1];
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                            if(this.mmcGetCustomWindow(targetWindow).canTurnPage()) {
                                AudioManager.playSe({ "name": "Book2", "volume": 70, "pitch": 100, "pan": 0 });
                                this.mmcGetCustomWindow(targetWindow).turnPreivousPage();
                            };
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowSetPage')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowSetPage (.*) (.*)/i)[1];
                        var newPage = currentCommand.commandTypeName.match(/:windowSetPage (.*) (.*)/i)[2];
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                            if(this.mmcGetCustomWindow(targetWindow).canTurnPage()) {
                                if(this.mmcGetCustomWindow(targetWindow).getPage() !== newPage) {
                                    AudioManager.playSe({ "name": "Book2", "volume": 70, "pitch": 100, "pan": 0 });
                                    this.mmcGetCustomWindow(targetWindow).setPage(newPage);
                                };
                            };
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowSetX')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowSetX (.*) (.*)/i)[1];
                        var changeX = eval(currentCommand.commandTypeName.match(/:windowSetX (.*) (.*)/i)[2]);
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(changeX === 'default') {
                            if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                                var ox = this.mmcGetCustomWindow(targetWindow)._originalWindowX;
                            }else{
                                var ox = this.mmcGetCustomWindow(targetWindow).currentWindow().windowX;
                            };
                            this.mmcGetCustomWindow(targetWindow).x = ox;
                        }else{
                            this.mmcGetCustomWindow(targetWindow).x = changeX;
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowSetY')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowSetY (.*) (.*)/i)[1];
                        var changeY = eval(currentCommand.commandTypeName.match(/:windowSetY (.*) (.*)/i)[2]);
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(changeY === 'default') {
                            if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                                var oy = this.mmcGetCustomWindow(targetWindow)._originalWindowY;
                            }else{
                                var oy = this.mmcGetCustomWindow(targetWindow).currentWindow().windowY;
                            };
                            this.mmcGetCustomWindow(targetWindow).y = oy;
                        }else{
                            this.mmcGetCustomWindow(targetWindow).y = changeY;
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowSetWitdh')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowSetWitdh (.*) (.*)/i)[1];
                        var changeW = eval(currentCommand.commandTypeName.match(/:windowSetWitdh (.*) (.*)/i)[2]);
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(changeW === 'default') {
                            if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                                var ow = this.mmcGetCustomWindow(targetWindow)._windowWidth;
                            }else{
                                var ow = this.mmcGetCustomWindow(targetWindow).currentWindow().windowW;
                            };
                            this.mmcGetCustomWindow(targetWindow).width = ow;
                        }else{
                            this.mmcGetCustomWindow(targetWindow).width = changeW;
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowSetHeight')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowSetHeight (.*) (.*)/i)[1];
                        var changeH = eval(currentCommand.commandTypeName.match(/:windowSetHeight (.*) (.*)/i)[2]);
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(changeH === 'default') {
                            if(this.mmcGetCustomWindow(targetWindow).constructor === Window_MmcStandardWindow) {
                                var oh = this.mmcGetCustomWindow(targetWindow)._windowHeight;
                            }else{
                                var oh = this.mmcGetCustomWindow(targetWindow).currentWindow().windowH;
                            };
                            this.mmcGetCustomWindow(targetWindow).height = oh;
                        }else{
                            this.mmcGetCustomWindow(targetWindow).height = changeH;
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':windowSetTopRow')) {
                        var targetWindow = currentCommand.commandTypeName.match(/:windowSetTopRow (.*) (.*) (.*)/i)[1];
                        var fromWindow = currentCommand.commandTypeName.match(/:windowSetTopRow (.*) (.*) (.*)/i)[2];
                        var functionSelect = currentCommand.commandTypeName.match(/:windowSetTopRow (.*) (.*) (.*)/i)[3];
                        if(this.mmcGetCustomWindow(targetWindow) === undefined) {
                            //エラー表示予定地
                            return;
                        };
                        if(fromWindow !== 'none') {
                            if(this.mmcGetCustomWindow(fromWindow) === undefined) {
                                //エラー表示予定地
                                return;
                            };
                        };
                        if(functionSelect === 'index') {
                            var fromIndex = this.mmcGetCustomWindow(fromWindow).index();
                            this.mmcGetCustomWindow(targetWindow)._mmcOldTopRow = this.mmcGetCustomWindow(targetWindow)._scrollY;
                            this.mmcGetCustomWindow(targetWindow).setTopRow(fromIndex);
                        }else if(functionSelect === 'default') {
                            var index = this.mmcGetCustomWindow(targetWindow)._mmcOldTopRow === undefined ? 0 : this.mmcGetCustomWindow(targetWindow)._mmcOldTopRow;
                            this.mmcGetCustomWindow(targetWindow).setTopRow(index);
                            this.mmcGetCustomWindow(targetWindow)._mmcOldTopRow = undefined;
                        };
                    };
                    if(currentCommand.commandTypeName.includes(':commandNewGame')) {
                        DataManager.setupNewGame();
                        this.fadeOutAll();
                        SceneManager.goto(Scene_Map);
                    };
                    if(currentCommand.commandTypeName.includes(':nextActor')) {
                        $gameParty.makeMenuActorNext();
                        this.mmcRefreshAllCustomWindow();
                    };
                    if(currentCommand.commandTypeName.includes(':previousActor')) {
                        $gameParty.makeMenuActorPrevious();
                        this.mmcRefreshAllCustomWindow();
                    };
                    if(currentCommand.commandTypeName.includes(':switch')) {
                        var switchId = currentCommand.commandTypeName.match(/:switch (.*) (.*)/i)[1];
                        var enable = currentCommand.commandTypeName.match(/:switch (.*) (.*)/i)[2] === "true" ? true : false;
                        if(enable) {
                            var value = $gameSwitches.value(switchId);
                            $gameSwitches.setValue(switchId,!value);
                            this.mmcRefreshAllCustomWindow();
                        };
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':variable')) {
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':scriptCommand')) {
                        var result = currentCommand.commandTypeName.match(/:scriptCommand (.*), (.*)/i);
                        var script = result[1];
                        var enable = result[2];
                        try {
                            if(eval(enable)) {
                                try {
                                    eval(script);
                                    this.mmcRefreshAllCustomWindow();
                                } catch (e) {
                                    console.error(e);
                                    var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の指定に誤りがあります。\n設定を確認してください。'
                                    SceneManager.mmcErrorPoper(true,'er1099sb',error);
                                };
                            };
                        } catch (e) {
                            console.error(e);
                            var error = '場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の指定に誤りがあります。\n設定を確認してください。'
                            SceneManager.mmcErrorPoper(true,'er1099sb',error);
                        };
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':alwaysDash')) {
                        var value = ConfigManager['alwaysDash'];
                        ConfigManager['alwaysDash'] = !value;
                        this.mmcRefreshCustomWindow(window.windowName);
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':commandRemember')) {
                        var value = ConfigManager['commandRemember'];
                        ConfigManager['commandRemember'] = !value;
                        this.mmcRefreshCustomWindow(window.windowName);
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':bgmVolume')) {
                        var volumeChange = currentCommand.commandTypeName.match(/:bgmVolume (.*)/i)[1];
                        var value = ConfigManager['bgmVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['bgmVolume'] = value;
                        this.mmcRefreshCustomWindow(window.windowName);
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':bgsVolume')) {
                        var volumeChange = currentCommand.commandTypeName.match(/:bgsVolume (.*)/i)[1];
                        var value = ConfigManager['bgsVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['bgsVolume'] = value;
                        this.mmcRefreshCustomWindow(window.windowName);
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':meVolume')) {
                        var volumeChange = currentCommand.commandTypeName.match(/:meVolume (.*)/i)[1];
                        var value = ConfigManager['meVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['meVolume'] = value;
                        this.mmcRefreshCustomWindow(window.windowName);
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    if(currentCommand.commandTypeName.includes(':seVolume')) {
                        var volumeChange = currentCommand.commandTypeName.match(/:seVolume (.*)/i)[1];
                        var value = ConfigManager['seVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['seVolume'] = value;
                        this.mmcRefreshCustomWindow(window.windowName);
                        this.mmcOnPersonalCancel(window,currentCommand);
                    };
                    break;
            };
            break;
    };
};

Scene_Base.prototype.windowAccessing = function(window,currentCommand) {
    var actions = this.mmcTranslateTargetActions(currentCommand.commandTypeName);
    this.mmcAddPreviousWindow(window.windowName);
    this.mmcGetCustomWindow(window.windowName).deactivate();
    actions.forEach(command => {
        if(command) {
            if(this.mmcGetCustomWindow(command[0]) === undefined) {
                SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + command.commandName + '</b></font> の<font color="red"><b>選択時接続ウィンドウ</b></font> ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                return;
            };
            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
            if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
            };
            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1]);
            if(result.includes(':activate')) {
                // 深追い停止
                // this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.mmcOnPersonalOk.bind(this,window,currentCommand));
                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.windowAccessingCancel.bind(this,window,currentCommand));
            };
        };
    });
};

Scene_Base.prototype.windowAccessingCancel = function(window,currentCommand) {
    var actions = undefined;
    var subActions = undefined;
    switch (currentCommand.commandTargetType) {
        case 'callDirectly':
            actions = this.mmcTranslateTargetActions(currentCommand.commandTypeName);
            break;
        case 'targetSelection':
            actions = this.mmcTranslateTargetActions(currentCommand.commandTypeName);
            subActions = this.mmcTranslateTargetActions(currentCommand.targetWindowName);
            break;
    };
    actions.forEach(command => {
        if(command) {
            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"reverse");
            if(result.includes(':activate')) {
                if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                    this.popScene();
                }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                    this.mmcPreviousWindow().pop();
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    if(subActions !== undefined) {
                        subActions.forEach(subCommand => {
                            if(subCommand) {
                                var subCurrentWindow = this.mmcGetCustomWindow(subCommand[0]).currentWindow();
                                this.mmcExecuteTargetAction(this.mmcGetCustomWindow(subCurrentWindow.windowName),subCommand[1]);
                            };
                        });
                    }else{
                        this.mmcGetCustomWindow(window.windowName).activate();
                    };
                }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                }else if(currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                };
            }else if(result.includes(':deactivate')) {
                if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                    this.popScene();
                }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                    this.mmcPreviousWindow().pop();
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    if(subActions !== undefined) {
                        subActions.forEach(subCommand => {
                            if(subCommand) {
                                var subCurrentWindow = this.mmcGetCustomWindow(subCommand[0]).currentWindow();
                                this.mmcExecuteTargetAction(this.mmcGetCustomWindow(subCurrentWindow.windowName),subCommand[1]);
                            };
                        });
                    }else{
                        this.mmcGetCustomWindow(window.windowName).activate();
                    };
                }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                        this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                }else if(currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                };
            };
        };
    });
};

Scene_Base.prototype.mmcCommandPersonal = function(window,currentCommand) {
    this.mmcAddPreviousWindow(window.windowName);
    this.mmcGetCustomWindow(window.windowName).deactivate();
    if(!currentCommand.targetWindowName.includes('none')) {
        var actions = this.mmcTranslateTargetActions(currentCommand.targetWindowName);
        actions.forEach(command => {
            if(command) {
                if(this.mmcGetCustomWindow(command[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + currentCommand.commandName + '</b></font> の<font color="red"><b>選択時接続ウィンドウ</b></font> ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
                var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                    this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                };
                var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"personal");
                if(result.includes(':activate')) {
                    if(currentCommand.callType === 'activateWindow') {
                        this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.windowAccessing.bind(this,window,currentCommand));
                    }else{
                        this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.mmcOnPersonalOk.bind(this,window,currentCommand));
                    };
                    this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.mmcOnPersonalCancel.bind(this,window,currentCommand));
                };
            };
        });
    };
};

Scene_Base.prototype.mmcOnPersonalOk = function(window,currentCommand) {
    this.mmcAddPreviousWindow(window.windowName);
    switch (this.mmcGetCustomWindow(window.windowName).currentSymbol()) {
        case ':mmcAddCommand':
            switch (currentCommand.callType) {
                case 'callScene':
                    this.mmcChangeScene(currentCommand.commandTypeName);
                    break;
                case 'activateWindow':
                    var actions = this.mmcTranslateTargetActions(currentCommand.commandTypeName);
                    actions.forEach(command => {
                        if(command) {
                            if(this.mmcGetCustomWindow(command[0]) === undefined) {
                                SceneManager.mmcErrorPoper(true,'er1099sb','場所: ウィンドウ名 <font color="skyblue"><b>' + window.windowName + '</b></font> のコマンド作成\nコマンド名 <font color="skyblue"><b>' + command.commandName + '</b></font> の<font color="red"><b>選択時接続ウィンドウ</b></font> ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                                return;
                            };
                            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                            if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                                this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1]);
                            if(result.includes(':activate')) {
                                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.windowAccessingCancel.bind(this,window,currentCommand));
                            };
                        };
                    });
                    break;
            };
            break;
    };
};

Scene_Base.prototype.mmcOnPersonalCancel = function(window,currentCommand) {
    var actions = undefined;
    if(!currentCommand.targetWindowName.includes('none')) {
        actions = this.mmcTranslateTargetActions(currentCommand.targetWindowName);
    };
    if(actions !== undefined) {
        actions.forEach(command => {
            if(command) {
                var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"reverse");
                if(result.includes(':activate')) {
                    if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                        this.popScene();
                    }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                        this.mmcPreviousWindow().pop();
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(window.windowName).activate();
                    }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                    }else if(currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                    };
                }else if(result.includes(':deactivate')) {
                    if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                        this.popScene();
                    }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                        this.mmcPreviousWindow().pop();
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(window.windowName).activate();
                    }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                            this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                    }else if(currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                    };
                };
            };
        });
    }else{
        this.mmcGetCustomWindow(window.windowName).activate();
    };
};

Scene_Base.prototype.mmcCommandFormation = function(window,currentCommand) {
    this.mmcGetCustomWindow(window.windowName).deactivate();
    if(!currentCommand.targetWindowName.includes('none')) {
        var actions = this.mmcTranslateTargetActions(currentCommand.targetWindowName);
        actions.forEach(command => {
            if(command) {
                if(this.mmcGetCustomWindow(command[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er1099sb',window.windowName + ' のコマンド名 ' + window.commands[cId].commandName + ' の対象選択時の接続先ウィンドウ' + command[0] + 'が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
                var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                    this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                };
                var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"formation");
                if(result.includes(':activate')) {
                    this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.onMmcFormationOk.bind(this,currentWindow));
                    this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.onMmcFormationCancel.bind(this,window,currentCommand));
                };
            };
        });
    };
};

Scene_Base.prototype.onMmcFormationOk = function(window) {
    var index = this.mmcGetCustomWindow(window.windowName).index();
    var pendingIndex = this.mmcGetCustomWindow(window.windowName).pendingIndex();
    if (pendingIndex >= 0) {
        $gameParty.swapOrder(index, pendingIndex);
        this.mmcGetCustomWindow(window.windowName).setPendingIndex(-1);
        this.mmcGetCustomWindow(window.windowName).redrawItem(index);
    } else {
        this.mmcGetCustomWindow(window.windowName).setPendingIndex(index);
    }
    this.mmcGetCustomWindow(window.windowName).refresh();
    this.mmcGetCustomWindow(window.windowName).activate();
};

Scene_Base.prototype.onMmcFormationCancel = function(window,currentCommand) {
    if(!currentCommand.targetWindowName.includes('none')) {
        var actions = this.mmcTranslateTargetActions(currentCommand.targetWindowName);
        actions.forEach(command => {
            if(command) {
                var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"reverse.formCancel");
                if(result.includes(':activate')) {
                    if (this.mmcGetCustomWindow(currentWindow.windowName).pendingIndex() >= 0) {
                        this.mmcGetCustomWindow(currentWindow.windowName).setPendingIndex(-1);
                        this.mmcGetCustomWindow(currentWindow.windowName).activate();
                    } else {
                        if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                            this.popScene();
                        }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                            this.mmcPreviousWindow().pop();
                            if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                                this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                            this.mmcGetCustomWindow(window.windowName).activate();
                        }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                            if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                                this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                            this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                        }else if(currentWindow.windowCancelBehavior.includes('none')) {
                            if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                                this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                        };
                    };
                }else if(result.includes(':deactivate')) {
                    if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                        this.popScene();
                    }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                        this.mmcPreviousWindow().pop();
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(window.windowName).activate();
                    }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                            this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                    }else if(currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                    };
                };
            };
        });
    };
};

Scene_Base.prototype.mmcSetups = function() {
    this._checkTimerMax = 30;
    this._checkCurrentTimer = 0;
    this._sceneReadyToClose = false;
    this._sceneReadyToChange = false;
    this._startSceneClose = false;
    this._startSceneChange = false;
    this._changeSceneName = undefined;
    this._checkWindowsReady = [];
    this._checkFunctionsReady = [];
};

var _AyatamSceneCustom_Scene_Base_prototype_popScene = Scene_Base.prototype.popScene;
Scene_Base.prototype.popScene = function() {
    if(this.mmcCurrentCustomScene()) {
        if(this.mmcCurrentCustomScene().useSlideOutWhenAbort) {
            if(!this._sceneReadyToClose) {
                this.mmcSetups();
                this._startSceneClose = true;
            }else{
                _AyatamSceneCustom_Scene_Base_prototype_popScene.call(this);
            };
        }else{
            _AyatamSceneCustom_Scene_Base_prototype_popScene.call(this);
        };
    }else{
        _AyatamSceneCustom_Scene_Base_prototype_popScene.call(this);
    };
};

Scene_Base.prototype.mmcChangeScene = function(SceneName) {
    if(this.mmcCurrentCustomScene().useSlideOutWhenChange) {
        if(!this._sceneReadyToChange) {
            this.mmcSetups();
            this._changeSceneName = SceneName;
            this._startSceneChange = true;
        }else{
            eval("SceneManager.push('" + SceneName + "')");
            // ↑の行でエラーが発生した場合は、
            // 存在しないシーン名を指定している可能性があります。
            // 再確認をお願いします。
        };
    }else{
        eval("SceneManager.push('" + SceneName + "')");
        // ↑の行でエラーが発生した場合は、
        // 存在しないシーン名を指定している可能性があります。
        // 再確認をお願いします。
    };
};

var _AyatamSceneCustom_Scene_Base_prototype_update = Scene_Base.prototype.update;
Scene_Base.prototype.update = function() {
    _AyatamSceneCustom_Scene_Base_prototype_update.call(this);
    if(!this.mmcCurrentCustomScene()) return;
    if(!this.mmcIsCustomSceneCreated()) this.mmcCreateCustomAddedWindowForNoneScene();
    if(this.mmcCurrentCustomScene().sceneBackgroundSettings.usePicture) {
        if(!this._mmcBackImg) this.mmcLoadBackground();
        if(this._mmcSceneBackground) this.mmcReadBackground();
    };
    this.mmcCheckForChangingScene();
    this.mmcCheckForClosingScene();
    this.mmcCheckForKeyPress();
    this.mmcCheckForMovablePictures();
};

Scene_Base.prototype.mmcCreateCustomAddedWindowForNoneScene = function() {
    this.mmcCustomSceneCreated();
    // 不具合につき無効化 以下のシーン無効化
    if(["Scene_Item","Scene_Skill","Scene_Load","Scene_Save","Scene_Shop"].includes(this.mmcCurrentCustomScene().sceneName)) return;
    if(this.mmcCurrentCustomScene().sceneName !== String(SceneManager._scene.constructor.name)) return;
    this.mmcCreateSceneBackground();
    this.mmcCreateCustomWindowHandler();
    this.mmcCreateSceneSwitches();
    this.mmcCreateCustomScene();
    this.mmcRefreshAllCustomWindow();
};

Scene_Base.prototype.mmcCheckForChangingScene = function() {
    if(!this._startSceneChange) return;
    if(this._checkCurrentTimer === 0) {
        var index = 0;
        var fIndex = 0;
        this._mmcCustomWindows.forEach(window => {
            if(window) {
                window.deselect();
                window.deactivate();
                if(window.constructor === Window_MmcStandardWindow) {
                    window.startWindowCloseSlides();
                    this._checkWindowsReady[index] = !window.isCloseSliding();
                }else{
                    window.startWindowCloseSlides();
                    this._checkWindowsReady[index] = window.isWindowReadyToClose();
                };
                index++;
            };
        });
        if(this._mmcMovablePictures !== undefined) {
            if(this._mmcMovablePictures.length > 0) {
                this._mmcMovablePictures.forEach(pic => {
                    if(pic) {
                        if(pic.slide.closeSlide.use) {
                            if(!pic.sprite.isSlideMovementLock()) {
                                var x = pic.slide.closeSlide.slideToX;
                                var y = pic.slide.closeSlide.slideToY;
                                var speedX = pic.slide.closeSlide.slideSpeedX;
                                var speedY = pic.slide.closeSlide.slideSpeedY;
                                pic.sprite.slide(x,y,speedX,speedY,"close");
                            };
                            this._checkFunctionsReady[fIndex] = !pic.sprite.isSlideMovementLock();
                            fIndex++;
                        };
                    };
                });
            };
        };
        if(!this._checkWindowsReady.includes(false)) {
            if(this._checkFunctionsReady.length > 0) {
                if(!this._checkFunctionsReady.includes(false)) {
                    this._startSceneChange = false;
                    this._sceneReadyToChange = true;
                    if(this._changeSceneName !== undefined) this.mmcChangeScene(this._changeSceneName);
                };
            }else{
                this._startSceneChange = false;
                this._sceneReadyToChange = true;
                if(this._changeSceneName !== undefined) this.mmcChangeScene(this._changeSceneName);
            };
        };
        this._checkCurrentTimer++;
    }else{
        this._checkCurrentTimer++;
        if(this._checkCurrentTimer >= this._checkTimerMax) {
            this._checkCurrentTimer = 0;
        };
    };
};

Scene_Base.prototype.mmcCheckForClosingScene = function() {
    if(!this._startSceneClose) return;
    if(this._checkCurrentTimer === 0) {
        var index = 0;
        var fIndex = 0;
        this._mmcCustomWindows.forEach(window => {
            if(window) {
                window.deselect();
                window.deactivate();
                if(window.constructor === Window_MmcStandardWindow) {
                    window.startWindowCloseSlides();
                    this._checkWindowsReady[index] = !window.isCloseSliding();
                }else{
                    window.startWindowCloseSlides();
                    this._checkWindowsReady[index] = window.isWindowReadyToClose();
                };
                index++;
            };
        });
        if(this._mmcMovablePictures !== undefined) {
            if(this._mmcMovablePictures.length > 0) {
                this._mmcMovablePictures.forEach(pic => {
                    if(pic) {
                        if(pic.slide.closeSlide.use) {
                            if(!pic.sprite.isSlideMovementLock()) {
                                var x = pic.slide.closeSlide.slideToX;
                                var y = pic.slide.closeSlide.slideToY;
                                var speedX = pic.slide.closeSlide.slideSpeedX;
                                var speedY = pic.slide.closeSlide.slideSpeedY;
                                pic.sprite.slide(x,y,speedX,speedY,"close");
                            };
                            this._checkFunctionsReady[fIndex] = !pic.sprite.isSlideMovementLock();
                            fIndex++;
                        };
                    };
                });
            };
        };
        if(!this._checkWindowsReady.includes(false)) {
            if(this._checkFunctionsReady.length > 0) {
                if(!this._checkFunctionsReady.includes(false)) {
                    this._startSceneClose = false;
                    this._sceneReadyToClose = true;
                    this.popScene();
                };
            }else{
                this._startSceneClose = false;
                this._sceneReadyToClose = true;
                this.popScene();
            };
        };
        this._checkCurrentTimer++;
    }else{
        this._checkCurrentTimer++;
        if(this._checkCurrentTimer >= this._checkTimerMax) {
            this._checkCurrentTimer = 0;
        };
    };
};

//=============================================================================
// Scene_Menu - ショートカット機能のセットアップ
//=============================================================================

Scene_Base.prototype.mmcCheckForKeyPress = function() {
    if(this._mmcShortcuts === undefined) this._mmcShortcuts = this.mmcCurrentCustomScene().sceneShortcutSettings;
    if(this._mmcShortcuts.length <= 0) return;
    var pressedKey = undefined;
    var currentFunction = undefined;
    this._mmcShortcuts.forEach(shortcut => {
        if(shortcut) {
            if(shortcut.keyboardKey !== 'none') {
                if(shortcut.keyboardKey === Input._latestButton) {
                    pressedKey = Input._latestButton;
                    currentFunction = shortcut.function;
                };
            };
            if(shortcut.gamePadKey !== 'none') {
                if(shortcut.gamePadKey === Input._latestButton) {
                    pressedKey = Input._latestButton;
                    currentFunction = shortcut.function;
                };
            };
        };
    });
    if(pressedKey !== undefined) {
        if(Input.isTriggered(pressedKey)) {
            this.executeShortCutFunctions(currentFunction);
            pressedKey = undefined;
        };
    };
};

Scene_Base.prototype.isFormationEnabled = function() {
    return $gameParty.size() >= 2 && $gameSystem.isFormationEnabled();
};

Scene_Base.prototype.isSaveEnabled = function() {
    return !DataManager.isEventTest() && $gameSystem.isSaveEnabled();
};

Scene_Base.prototype.isLoadEnabled = function() {
    return DataManager.isAnySavefileExists();
};

Scene_Base.prototype.isOptionsEnabled = function() {
    return true;
};

Scene_Base.prototype.isGameEndEnabled = function() {
    return true;
};

Scene_Base.prototype.executeShortCutFunctions = function(cFunction) {
    if(cFunction.functionCommandEnableSwitch > 0) {
        if(!$gameSwitches.value(cFunction.functionCommandEnableSwitch)) {
            SoundManager.playBuzzer();
            return;
        };
    };
    if(!cFunction.functionCommandEnableExt.includes('none')) {
        try {
            var enable = eval(cFunction.functionCommandEnableExt);
            if(!enable) {
                SoundManager.playBuzzer();
                return;
            };
        } catch (e) {
            console.error(e);
            var error = '場所: <font color="skyblue"><b>ショートカット機能の作成/設定</b></font> \n機能名 <font color="skyblue"><b>' + cFunction.functionCommandName + '</b></font> の機能使用特殊条件「 <font color="red"><b>' + cFunction.functionCommandEnableExt + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。'
            SceneManager.mmcErrorPoper(true,'er22sbf',error);
        };
    };
    switch (cFunction.functionCallType) {
        case 'callScene'://シーン呼び出し
            switch (cFunction.functionCommandTargetType) {
                case 'callDirectly':
                    if(cFunction.functionCommandTypeName.includes('Scene_Skill') || cFunction.functionCommandTypeName.includes('Scene_Equip') || cFunction.functionCommandTypeName.includes('Scene_Status')) {
                        var actor = $gameParty.members()[0];
                        $gameParty.setMenuActor(actor);
                    };
                    this.mmcChangeScene(cFunction.functionCommandTypeName);
                    SoundManager.playOk();
                    break;
                case 'targetSelection':
                    this.mmcFunctionCommandPersonal(cFunction);
                    SoundManager.playOk();
                    break;
            };
            break;
        case 'commonEvent'://コモンイベントの起動
            var commonEvent = Number(cFunction.functionCommandTypeName);
            if(commonEvent !== 0) {
                $gameTemp.reserveCommonEvent(commonEvent);
                if($gameTemp.isCommonEventReserved()) this.mmcChangeScene("Scene_Map");
            }; 
            SoundManager.playOk();
            break;
        case 'activateWindow'://ウィンドウへ接続
            switch (cFunction.functionCommandTargetType) {
                case 'callDirectly':
                    this.functionWindowAccessing(currentFunction);
                    SoundManager.playOk();
                    break;
                case 'targetSelection':
                    this.mmcFunctionCommandPersonal(cFunction);
                    SoundManager.playOk();
                    break;
            };
            break;
        case 'functionCommand'://特殊コマンド
            switch (cFunction.functionCommandTypeName) {
                case ':formation'://並び替えモード
                    if(cFunction.functionCommandTargetType === 'targetSelection') {
                        if(!cFunction.functionTargetWindowName.includes('none')) {
                            var actions = this.mmcTranslateTargetActions(cFunction.functionTargetWindowName);
                            if(this.mmcGetCustomWindow(actions[0][0]).constructor === Window_MmcStandardWindow) {
                                if(this.mmcGetCustomWindow(actions[0][0]).formationAble()) {
                                    this.mmcFunctionCommandFormation(cFunction);
                                    SoundManager.playOk();
                                }else{
                                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の並び替えモードの対象選択ウィンドウ ' + actions[0][0] + ' はリスト型ではないため、並び替えモードを中断します。\n設定を再確認してください。');
                                    return;
                                };
                            }else{
                                SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の並び替えモードの対象選択ウィンドウ ' + actions[0][0] + ' はデータ型ウィンドウではないため、並び替えモードを中断します。\n設定を再確認してください。');
                                return;
                            };
                        }else{
                            SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の並び替えモードの対象選択ウィンドウが未設定のため、\n設定を再確認してください。');
                            return;
                        };
                    }else{
                        SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の並び替えモードの機能の選択方法が対象選択以外に設定されているため、処理を中断しました。 \n設定を再確認してください。');
                        return;
                    };
                    break;
                default:
                    if(cFunction.functionCommandTypeName.includes(':switch')) {
                        var switchId = cFunction.functionCommandTypeName.match(/:switch (.*) (.*)/i)[1];
                        var enable = cFunction.functionCommandTypeName.match(/:switch (.*) (.*)/i)[2] === "true" ? true : false;
                        if(enable) {
                            var value = $gameSwitches.value(switchId);
                            $gameSwitches.setValue(switchId,!value);
                            this.mmcRefreshAllCustomWindow();
                        };
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':scriptCommand')) {
                        var result = cFunction.functionCommandTypeName.match(/:scriptCommand (.*), (.*)/i);
                        var script = result[1];
                        var enable = result[2];
                        try {
                            if(eval(enable)) {
                                try {
                                    eval(script);
                                    this.mmcRefreshAllCustomWindow();
                                } catch (e) {
                                    console.error(e);
                                    var error = '場所: <font color="skyblue"><b>ショートカット機能の作成/設定</b></font> \n機能名 <font color="skyblue"><b>' + cFunction.functionCommandName + '</b></font> の機能参照名「 <font color="red"><b>' + cFunction.functionCommandTypeName + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。'
                                    SceneManager.mmcErrorPoper(true,'er22sbf',error);
                                };
                            };
                            SoundManager.playOk();
                        } catch (e) {
                            console.error(e);
                            var error = '場所: <font color="skyblue"><b>ショートカット機能の作成/設定</b></font> \n機能名 <font color="skyblue"><b>' + cFunction.functionCommandName + '</b></font> の機能参照名「 <font color="red"><b>' + cFunction.functionCommandTypeName + '</b></font> 」の指定に誤りがあります。\n設定を確認してください。'
                            SceneManager.mmcErrorPoper(true,'er22sbf',error);
                        };
                    };
                    if(cFunction.functionCommandTypeName.includes(':alwaysDash')) {
                        var value = ConfigManager['alwaysDash'];
                        ConfigManager['alwaysDash'] = !value;
                        this.mmcRefreshAllCustomWindow();
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':commandRemember')) {
                        var value = ConfigManager['commandRemember'];
                        ConfigManager['commandRemember'] = !value;
                        this.mmcRefreshAllCustomWindow();
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':bgmVolume')) {
                        var volumeChange = cFunction.functionCommandTypeName.match(/:bgmVolume (.*)/i)[1];
                        var value = ConfigManager['bgmVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['bgmVolume'] = value;
                        this.mmcRefreshAllCustomWindow();
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':bgsVolume')) {
                        var volumeChange = cFunction.functionCommandTypeName.match(/:bgsVolume (.*)/i)[1];
                        var value = ConfigManager['bgsVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['bgsVolume'] = value;
                        this.mmcRefreshAllCustomWindow();
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':meVolume')) {
                        var volumeChange = cFunction.functionCommandTypeName.match(/:meVolume (.*)/i)[1];
                        var value = ConfigManager['meVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['meVolume'] = value;
                        this.mmcRefreshAllCustomWindow();
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':seVolume')) {
                        var volumeChange = cFunction.functionCommandTypeName.match(/:seVolume (.*)/i)[1];
                        var value = ConfigManager['seVolume'];
                        value += Number(volumeChange);
                        if(value > 100) {
                            value = 0;
                        };
                        value = value.clamp(0, 100);
                        ConfigManager['seVolume'] = value;
                        this.mmcRefreshAllCustomWindow();
                        SoundManager.playOk();
                    };
                    if(cFunction.functionCommandTypeName.includes(':accessMovablePicture')) {
                        var result = cFunction.functionCommandTypeName.match(/:accessMovablePicture (.*), (.*), (.*), (.*), (.*)/i);
                        var picId = result[1];
                        if(this._mmcMovablePictures[picId] === undefined) {
                            SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の特殊コマンド :accessMovablePicture にて picId:' + picId + ' は作成されていません。\nシーン上で作成するデータリストにて設定を再確認してください。');
                            return;
                        };
                        if(this._functionActivation === undefined) this._functionActivation = [];
                        if(this._functionActivation[cFunction.functionCommandName] === undefined) {
                            this._functionActivation[cFunction.functionCommandName] = false;
                        };
                        var enableSw = this._mmcMovablePictures[picId].enable;
                        var showSw = this._mmcMovablePictures[picId].show;
                        var enable = result[2] === "true" ? true : false;
                        var show = result[3] === "true" ? true : false;
                        var enableReverse = result[4] === "true" ? true : false;
                        var showReverse = result[5] === "true" ? true : false;
                        if(!this._functionActivation[cFunction.functionCommandName]) {//起動時
                            SoundManager.playOk();
                            if(this._mmcMovablePictures[picId].slide.use) {
                                if(this._mmcMovablePictures[picId].slide.openSlide.use) {
                                    if(this._mmcMovablePictures[picId].slide.onAccess) {
                                        var x = this._mmcMovablePictures[picId].slide.openSlide.slideToX;
                                        var y = this._mmcMovablePictures[picId].slide.openSlide.slideToY;
                                        var speedX = this._mmcMovablePictures[picId].slide.openSlide.slideSpeedX;
                                        var speedY = this._mmcMovablePictures[picId].slide.openSlide.slideSpeedY;
                                        this._mmcMovablePictures[picId].sprite.slide(x,y,speedX,speedY,"open");
                                    };
                                };
                            };
                            this._functionStockWindowActiveInformation = [];
                            this._functionStockWindowActiveInformation[cFunction.functionCommandName] = [];
                            this._mmcCustomWindows.forEach(customWindow => {
                                if(customWindow) {
                                    if(customWindow.active) {
                                        var currentWindow = customWindow.currentWindow();
                                        this._functionStockWindowActiveInformation[cFunction.functionCommandName].push(currentWindow.windowName);
                                        customWindow.deactivate();
                                    };
                                };
                            });
                            if(cFunction.functionCommandTargetType === "targetSelection") {
                                if(!cFunction.functionTargetWindowName.includes('none')) {
                                    var actions = this.mmcTranslateTargetActions(cFunction.functionTargetWindowName);
                                    actions.forEach(command => {
                                        if(command) {
                                            if(this.mmcGetCustomWindow(command[0]) === undefined) {
                                                SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の特殊コマンド :accessMovablePicture の対象選択時ウィンドウ ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                                                return;
                                            };
                                            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                                            this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1]);
                                        };
                                    });
                                };
                            };
                            this.mmcSetSceneSwitches(enableSw,enable);
                            this.mmcSetSceneSwitches(showSw,show);
                            this._mmcMovablePictures[picId].sprite.visible = this.mmcGetSceneSwitches(showSw);
                            this._movablePicturesActivationId = picId;
                            this._functionActivation[cFunction.functionCommandName] = true;
                        }else{//終了時
                            SoundManager.playCancel();
                            if(this._mmcMovablePictures[picId].slide.use) {
                                if(this._mmcMovablePictures[picId].slide.returnSlide.use) {
                                    if(this._mmcMovablePictures[picId].slide.onAccess) {
                                        var x = this._mmcMovablePictures[picId].slide.returnSlide.slideToX;
                                        var y = this._mmcMovablePictures[picId].slide.returnSlide.slideToY;
                                        var speedX = this._mmcMovablePictures[picId].slide.returnSlide.slideSpeedX;
                                        var speedY = this._mmcMovablePictures[picId].slide.returnSlide.slideSpeedY;
                                        this._mmcMovablePictures[picId].sprite.slide(x,y,speedX,speedY,"return");
                                    };
                                };
                            };
                            if(cFunction.functionCommandTargetType === "targetSelection") {
                                if(!cFunction.functionReturnTargetWindowName.includes('none')) {
                                    var actions = this.mmcTranslateTargetActions(cFunction.functionReturnTargetWindowName);
                                    actions.forEach(command => {
                                        if(command) {
                                            if(this.mmcGetCustomWindow(command[0]) === undefined) {
                                                SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + cFunction.functionCommandName + '」の特殊コマンド :accessMovablePicture の対象終了時ウィンドウ ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                                                return;
                                            };
                                            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                                            this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1]);
                                        };
                                    });
                                };
                            };
                            if(this._functionStockWindowActiveInformation[cFunction.functionCommandName].length > 0) {
                                var needActivate = this._functionStockWindowActiveInformation[cFunction.functionCommandName];
                                needActivate.forEach(window => {
                                    if(window) {
                                        this.mmcGetCustomWindow(window).activate();
                                    };
                                });
                            };
                            if(enableReverse) this.mmcSetSceneSwitches(enableSw,!enable);
                            if(showReverse) this.mmcSetSceneSwitches(showSw,!show);
                            this._mmcMovablePictures[picId].sprite.visible = this.mmcGetSceneSwitches(showSw);
                            this._movablePicturesActivationId = -1;
                            this._functionActivation[cFunction.functionCommandName] = false;
                        };
                    };
                    break;
            };
            break;
    };
};

Scene_Base.prototype.mmcCheckForMovablePictures = function() {
    if(this._movablePicturesActivationId === undefined) return;
    if(this._mmcMovablePictures === undefined) return;
    if(this._movablePicturesActivationId < 0) return;
    var picId = this._movablePicturesActivationId;
    if(this._mmcMovablePictures[picId] === undefined) return;
    var enableSw = this._mmcMovablePictures[picId].enable;
    if(this.mmcGetSceneSwitches(enableSw)) {
        if(!this._mmcMovablePictures[picId].sprite.isSlideMovementLock()) {
            this.mmcSceneUserMovent(this._mmcMovablePictures[picId].sprite,this._mmcMovablePictures[picId].distance,this._mmcMovablePictures[picId].speed);
        };
    };
};

Scene_Base.prototype.mmcSceneUserMovent = function(object,mDistance,mSpeed) {
    if(Input.isRepeated('down')) {
        if(Input.isTriggered('down')) {
            var y = object.y + mDistance;
            object.slide(undefined,y,0,mSpeed);
        };
    };
    if(Input.isRepeated('up')) {
        if(Input.isTriggered('up')) {
            var y = object.y - mDistance;
            object.slide(undefined,y,0,mSpeed);
        };
    };
    if(Input.isRepeated('right')) {
        if(Input.isTriggered('right')) {
            var x = object.x + mDistance;
            object.slide(x,undefined,mSpeed,0);
        };
    };
    if(Input.isRepeated('left')) {
        if(Input.isTriggered('left')) {
            var x = object.x - mDistance;
            object.slide(x,undefined,mSpeed,0);
        };
    };
};

Scene_Base.prototype.mmcFunctionCommandPersonal = function(currentFunction) {
    if(!currentFunction.functionReturnTargetWindowName.includes('none')) {
        var returnActions = this.mmcTranslateTargetActions(currentFunction.functionReturnTargetWindowName);
        returnActions.forEach(returnCommand => {
            if(returnCommand) {
                if(this.mmcGetCustomWindow(returnCommand[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続終了時接続ウィンドウ ' + returnCommand[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
            };
            this.mmcExecuteTargetAction(this.mmcGetCustomWindow(returnCommand[0]),returnCommand[1],"reverse");
        });
    };
    if(!currentFunction.functionTargetWindowName.includes('none')) {
        var actions = this.mmcTranslateTargetActions(currentFunction.functionTargetWindowName);
        actions.forEach(command => {
            if(command) {
                if(this.mmcGetCustomWindow(command[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続先ウィンドウ ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
            };
            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
            if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
            };
            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"personal");
            if(result.includes(':activate')) {
                if(currentFunction.functionCallType === 'activateWindow') {
                    this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.functionWindowAccessing.bind(this,currentFunction));
                }else{
                    this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.mmcFunctionOnPersonalOk.bind(this,currentFunction));
                };
                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.mmcFunctionOnPersonalCancel.bind(this,currentFunction));
            };
        });
    };
};

Scene_Base.prototype.functionWindowAccessing = function(currentFunction) {
    var actions = this.mmcTranslateTargetActions(currentFunction.functionCommandTypeName);
    actions.forEach(command => {
        if(command) {
            if(this.mmcGetCustomWindow(command[0]) === undefined) {
                SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続先ウィンドウ ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                return;
            };
            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
            if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
            };
            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1]);
            if(result.includes(':activate')) {
                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.mmcOnPersonalOk.bind(this,window,currentCommand));
                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.windowAccessingCancel.bind(this,window,currentCommand));
            };
        };
    });
};

Scene_Base.prototype.functionWindowAccessingCancel = function(currentFunction) {
    var actions = undefined;
    var subActions = undefined;
    switch (currentFunction.functionCommandTargetType) {
        case 'callDirectly':
            actions = this.mmcTranslateTargetActions(currentFunction.functionCommandTypeName);
            break;
        case 'targetSelection':
            actions = this.mmcTranslateTargetActions(currentFunction.functionCommandTypeName);
            subActions = this.mmcTranslateTargetActions(currentFunction.functionTargetWindowName);
            break;
    };
    actions.forEach(command => {
        if(command) {
            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"reverse");
            if(result.includes(':activate')) {
                if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                    this.popScene();
                }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                    this.mmcPreviousWindow().pop();
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    if(subActions !== undefined) {
                        subActions.forEach(subCommand => {
                            if(subCommand) {
                                var subCurrentWindow = this.mmcGetCustomWindow(subCommand[0]).currentWindow();
                                this.mmcExecuteTargetAction(this.mmcGetCustomWindow(subCurrentWindow.windowName),subCommand[1]);
                            };
                        });
                    }else{
                        this.mmcGetCustomWindow(window.windowName).activate();
                    };
                }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                }else if(currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                };
            }else if(result.includes(':deactivate')) {
                if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                    this.popScene();
                }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                    this.mmcPreviousWindow().pop();
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    if(subActions !== undefined) {
                        subActions.forEach(subCommand => {
                            if(subCommand) {
                                var subCurrentWindow = this.mmcGetCustomWindow(subCommand[0]).currentWindow();
                                this.mmcExecuteTargetAction(this.mmcGetCustomWindow(subCurrentWindow.windowName),subCommand[1]);
                            };
                        });
                    }else{
                        this.mmcGetCustomWindow(window.windowName).activate();
                    };
                }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                    if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                        this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                }else if(currentWindow.windowCancelBehavior.includes('none')) {
                    if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                        this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                    };
                };
            };
        };
    });
};

Scene_Base.prototype.mmcFunctionOnPersonalOk = function(currentFunction) {
    switch (currentFunction.functionCallType) {
        case 'callScene':
            this.mmcChangeScene(currentFunction.functionCommandTypeName);
            break;
        case 'activateWindow':
            this.mmcGetCustomWindow(currentFunction.functionCommandTypeName).activate();
            break;
    };
};

Scene_Base.prototype.mmcFunctionOnPersonalCancel = function(currentFunction) {
    var actions = undefined;
    if(!currentFunction.functionTargetWindowName.includes('none')) {
        actions = this.mmcTranslateTargetActions(currentFunction.functionTargetWindowName);
    };
    if(actions !== undefined) {
        actions.forEach(command => {
            if(command) {
                var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"reverse");
                if(result.includes(':activate')) {
                    if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                        this.popScene();
                    }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                        this.mmcPreviousWindow().pop();
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(window.windowName).activate();
                    }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                    }else if(currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                    };
                }else if(result.includes(':deactivate')) {
                    if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                        this.popScene();
                    }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                        this.mmcPreviousWindow().pop();
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(window.windowName).activate();
                    }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                            this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                    }else if(currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                    };
                };
            };
        });
    };
    if(!currentFunction.functionReturnTargetWindowName.includes('none')) {
        var returnActions = this.mmcTranslateTargetActions(currentFunction.functionReturnTargetWindowName);
        returnActions.forEach(returnCommand => {
            if(returnCommand) {
                if(this.mmcGetCustomWindow(returnCommand[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続終了時接続ウィンドウ ' + returnCommand[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
            };
            this.mmcExecuteTargetAction(this.mmcGetCustomWindow(returnCommand[0]),returnCommand[1]);
        });
    };
};

Scene_Base.prototype.mmcFunctionCommandFormation = function(currentFunction) {
    if(!currentFunction.functionReturnTargetWindowName.includes('none')) {
        var returnActions = this.mmcTranslateTargetActions(currentFunction.functionReturnTargetWindowName);
        returnActions.forEach(returnCommand => {
            if(returnCommand) {
                if(this.mmcGetCustomWindow(returnCommand[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続終了時接続ウィンドウ ' + returnCommand[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
            };
            this.mmcExecuteTargetAction(this.mmcGetCustomWindow(returnCommand[0]),returnCommand[1],"reverse");
        });
    };
    if(!currentFunction.functionTargetWindowName.includes('none')) {
        var actions = this.mmcTranslateTargetActions(currentFunction.functionTargetWindowName);
        actions.forEach(command => {
            if(command) {
                if(this.mmcGetCustomWindow(command[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続先ウィンドウ ' + command[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
            };
            var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
            if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
            };
            var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"formation");
            if(result.includes(':activate')) {
                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('ok', this.onMmcFormationOk.bind(this,currentWindow));
                this.mmcGetCustomWindow(currentWindow.windowName).setHandler('cancel', this.onMmcFunctionFormationCancel.bind(this,currentFunction));
            };
        });
    };
};

Scene_Base.prototype.onMmcFunctionFormationCancel = function(currentFunction) {
    if(!currentFunction.functionTargetWindowName.includes('none')) {
        var actions = this.mmcTranslateTargetActions(currentFunction.functionTargetWindowName);
        actions.forEach(command => {
            if(command) {
                var currentWindow = this.mmcGetCustomWindow(command[0]).currentWindow();
                var result = this.mmcExecuteTargetAction(this.mmcGetCustomWindow(currentWindow.windowName),command[1],"reverse.formCancel");
                if(result.includes(':activate')) {
                    if (this.mmcGetCustomWindow(currentWindow.windowName).pendingIndex() >= 0) {
                        this.mmcGetCustomWindow(currentWindow.windowName).setPendingIndex(-1);
                        this.mmcGetCustomWindow(currentWindow.windowName).activate();
                    } else {
                        if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                            this.popScene();
                        }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                            this.mmcPreviousWindow().pop();
                            if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                                this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                            this.mmcGetCustomWindow(window.windowName).activate();
                        }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                            if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                                this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                            this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                        }else if(currentWindow.windowCancelBehavior.includes('none')) {
                            if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                                this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                            };
                        };
                    };
                }else if(result.includes(':deactivate')) {
                    if(currentWindow.windowCancelBehavior.includes('closeScene')) {
                        this.popScene();
                    }else if(currentWindow.windowCancelBehavior.includes('memoryReturn')) {
                        this.mmcPreviousWindow().pop();
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(window.windowName).activate();
                    }else if(!currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        if(currentWindow.windowBeginBehavior.includes('openWhenSelected')) {
                            this.mmcWindowOpenSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                        this.mmcGetCustomWindow(currentWindow.windowCancelBehavior).activate();
                    }else if(currentWindow.windowCancelBehavior.includes('none')) {
                        if(currentWindow.windowCloseBehavior.includes('closeWindow')) {
                            this.mmcWindowCloseSequence(this.mmcGetCustomWindow(currentWindow.windowName));
                        };
                    };
                };
            };
        });
    };
    if(!currentFunction.functionReturnTargetWindowName.includes('none')) {
        var returnActions = this.mmcTranslateTargetActions(currentFunction.functionReturnTargetWindowName);
        returnActions.forEach(returnCommand => {
            if(returnCommand) {
                if(this.mmcGetCustomWindow(returnCommand[0]) === undefined) {
                    SceneManager.mmcErrorPoper(true,'er22sbf','ショートカット機能の「' + currentFunction.functionCommandName + '」の対象選択接続終了時接続ウィンドウ ' + returnCommand[0] + ' が見つかりませんでした。\n設定を再確認してください。');
                    return;
                };
            };
            this.mmcExecuteTargetAction(this.mmcGetCustomWindow(returnCommand[0]),returnCommand[1]);
        });
    };
};
//=============================================================================
// プラグイン終了 - End of file
//=============================================================================